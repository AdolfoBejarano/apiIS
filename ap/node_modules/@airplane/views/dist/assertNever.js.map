{"version":3,"file":"assertNever.js","sources":["../src/assertNever.ts"],"sourcesContent":["/**\n * Use assertNever at the end of exhaustive checks of discriminated unions.\n * TypeScript will error if it becomes non-exhaustive.\n *\n * For example, you can it at the end of a switch statement:\n *\n * switch (type) {\n *   case \"good\":\n *     ...\n *   case \"bad\":\n *     ...\n *   default:\n *     assertNever(type);\n * }\n */\nexport const assertNever = (value: never): never => {\n  throw new Error(`Unhandled value: ${JSON.stringify(value)}`);\n};\n"],"names":["assertNever","value","Error","JSON","stringify"],"mappings":"AAeaA,MAAAA,cAAcA,CAACC,UAAwB;AAClD,QAAM,IAAIC,MAAO,oBAAmBC,KAAKC,UAAUH,KAAK,CAAE,EAAC;AAC7D;"}