{"version":3,"file":"useTaskQuery.js","sources":["../../../src/state/tasks/useTaskQuery.ts"],"sourcesContent":["import {\n  QueryObserverResult,\n  useQuery as useReactQuery,\n} from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\nimport {\n  DefaultOutput,\n  DefaultParams,\n  ExecuteTaskError,\n  executeTask,\n  ExecuteTaskSuccess,\n  ParamValues,\n  isExecuteTaskError,\n  executeTaskBackground,\n} from \"client/executeTask\";\nimport {\n  ExecuteError,\n  TaskQuery,\n  getFullQuery,\n  getSlug,\n} from \"components/query\";\n\nexport type UseTaskQueryOptions<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = {\n  /**\n   * The params of the task to execute.\n   */\n  params?: TParams;\n  /**\n   * If set to true, the task will be executed automatically.\n   * @default true\n   */\n  enabled?: boolean;\n  /**\n   * If set, the task will be refetched every refetchInterval milliseconds.\n   */\n  refetchInterval?: number;\n  /**\n   * If set, queries with identical inputs within the configured age\n   * (in seconds) may get cached results.\n   */\n  allowCachedMaxAge?: number;\n  /**\n   * If set to true, the task will be executed on mount.\n   * @default true\n   */\n  executeOnMount?: boolean;\n  /**\n   * If set to true, the task will be executed on window focus.\n   * @default true\n   */\n  executeOnWindowFocus?: boolean;\n  /**\n   * If set to true, the task will be executed on reconnect.\n   * @default true\n   */\n  executeOnReconnect?: boolean;\n  /**\n   * Callback on successful task execution.\n   */\n  onSuccess?: (output: TOutput, runID: string) => void;\n  /**\n   * Callback on failed task execution.\n   */\n  onError?: (\n    output: TOutput | undefined,\n    error: ExecuteError,\n    runID?: string,\n  ) => void;\n};\n\nexport type UseTaskQueryResult<TOutput = DefaultOutput> = {\n  /**\n   * The output of the last successfully executed task.\n   */\n  output?: TOutput;\n  /**\n   * True when the task is executing for the first time.\n   */\n  loading?: boolean;\n  /**\n   * True anytime the task is executing. This includes the first time the task is executed (loading = true)\n   * and anytime the task is refetching.\n   *\n   * You usually want to use `loading` instead of `executing` unless you want to show an indicator when the task is refetching.\n   */\n  executing?: boolean;\n  /**\n   * Will be set with the error message if the task failed to execute.\n   */\n  error?: ExecuteError;\n  /**\n   * Will be set with a function that executes the task.\n   */\n  refetch: () => Promise<\n    QueryObserverResult<ExecuteTaskSuccess<TOutput>, ExecuteTaskError<TOutput>>\n  >;\n  /**\n   * The ID of the run.\n   */\n  runID?: string;\n};\n\n/**\n * useTaskQuery executes a task.\n *\n * This should be used for tasks that queries for data.\n *\n * Additionally, useTaskQuery can:\n * - Cache the output\n * - Automatically refetch to keep the output up to date\n */\nexport const useTaskQuery = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>(\n  query: TaskQuery<TParams, TOutput>,\n): UseTaskQueryResult<TOutput> => {\n  const [executedRunID, setExecutedRunID] = useState<string | undefined>();\n  const fullQuery = getFullQuery<TParams>(query);\n  const {\n    params,\n    enabled: enabledOption = true,\n    refetchInterval,\n    allowCachedMaxAge,\n    executeOnMount = true,\n    executeOnWindowFocus = false,\n    executeOnReconnect = true,\n    onSuccess,\n    onError,\n  } = fullQuery;\n  const slug = getSlug(fullQuery);\n  const enabled = Boolean(enabledOption) && Boolean(slug);\n  const { isInitialLoading, isLoading, error, data, refetch, isFetching } =\n    useReactQuery<ExecuteTaskSuccess<TOutput>, ExecuteTaskError<TOutput>>(\n      [slug, params],\n      async () => {\n        const runID = await executeTaskBackground<TParams, TOutput>(\n          slug,\n          \"query\",\n          params,\n          allowCachedMaxAge,\n        );\n        if (typeof runID === \"object\") {\n          throw runID;\n        }\n        setExecutedRunID(runID);\n\n        const r = await executeTask<TParams, TOutput>(\n          slug,\n          \"query\",\n          params,\n          runID,\n          allowCachedMaxAge,\n        );\n        if (isExecuteTaskError<TOutput>(r)) {\n          throw r;\n        }\n        return r;\n      },\n      {\n        enabled,\n        refetchInterval,\n        refetchOnMount: executeOnMount,\n        refetchOnWindowFocus: executeOnWindowFocus,\n        refetchOnReconnect: executeOnReconnect,\n        onSuccess: (res) => {\n          onSuccess?.(res.output, res.runID);\n        },\n        onError: (res) => {\n          onError?.(res.output, res.error, res.runID);\n        },\n      },\n    );\n\n  return {\n    output: data?.output ?? error?.output,\n    runID: executedRunID ?? data?.runID ?? error?.runID,\n    error: error?.error,\n    loading: enabled ? isLoading : Boolean(isInitialLoading),\n    refetch,\n    executing: isFetching,\n  };\n};\n"],"names":["useTaskQuery","query","executedRunID","setExecutedRunID","useState","fullQuery","getFullQuery","params","enabled","enabledOption","refetchInterval","allowCachedMaxAge","executeOnMount","executeOnWindowFocus","executeOnReconnect","onSuccess","onError","slug","getSlug","Boolean","isInitialLoading","isLoading","error","data","refetch","isFetching","useReactQuery","runID","executeTaskBackground","r","executeTask","isExecuteTaskError","refetchOnMount","refetchOnWindowFocus","refetchOnReconnect","res","output","loading","executing"],"mappings":";;;;AAmHaA,MAAAA,eAAe,CAI1BC,UACgC;AAChC,QAAM,CAACC,eAAeC,gBAAgB,IAAIC,SAA6B;AACjEC,QAAAA,YAAYC,aAAsBL,KAAK;AACvC,QAAA;AAAA,IACJM;AAAAA,IACAC,SAASC,gBAAgB;AAAA,IACzBC;AAAAA,IACAC;AAAAA,IACAC,iBAAiB;AAAA,IACjBC,uBAAuB;AAAA,IACvBC,qBAAqB;AAAA,IACrBC;AAAAA,IACAC;AAAAA,EACEX,IAAAA;AACEY,QAAAA,OAAOC,QAAQb,SAAS;AAC9B,QAAMG,UAAUW,QAAQV,aAAa,KAAKU,QAAQF,IAAI;AAChD,QAAA;AAAA,IAAEG;AAAAA,IAAkBC;AAAAA,IAAWC;AAAAA,IAAOC;AAAAA,IAAMC;AAAAA,IAASC;AAAAA,MACzDC,SACE,CAACT,MAAMV,MAAM,GACb,YAAY;AACV,UAAMoB,QAAQ,MAAMC,sBAClBX,MACA,SACAV,QACAI,iBACF;AACI,QAAA,OAAOgB,UAAU,UAAU;AACvBA,YAAAA;AAAAA,IACR;AACAxB,qBAAiBwB,KAAK;AAEtB,UAAME,IAAI,MAAMC,YACdb,MACA,SACAV,QACAoB,OACAhB,iBACF;AACIoB,QAAAA,mBAA4BF,CAAC,GAAG;AAC5BA,YAAAA;AAAAA,IACR;AACOA,WAAAA;AAAAA,EAAAA,GAET;AAAA,IACErB;AAAAA,IACAE;AAAAA,IACAsB,gBAAgBpB;AAAAA,IAChBqB,sBAAsBpB;AAAAA,IACtBqB,oBAAoBpB;AAAAA,IACpBC,WAAYoB,CAAQ,QAAA;AACNA,6CAAAA,IAAIC,QAAQD,IAAIR;AAAAA,IAC9B;AAAA,IACAX,SAAUmB,CAAQ,QAAA;AAChBnB,yCAAUmB,IAAIC,QAAQD,IAAIb,OAAOa,IAAIR;AAAAA,IACvC;AAAA,EAAA,CAEJ;AAEK,SAAA;AAAA,IACLS,SAAQb,6BAAMa,YAAUd,+BAAOc;AAAAA,IAC/BT,OAAOzB,kBAAiBqB,6BAAMI,WAASL,+BAAOK;AAAAA,IAC9CL,OAAOA,+BAAOA;AAAAA,IACde,SAAS7B,UAAUa,YAAYF,QAAQC,gBAAgB;AAAA,IACvDI;AAAAA,IACAc,WAAWb;AAAAA,EAAAA;AAEf;"}