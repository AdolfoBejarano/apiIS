{"version":3,"file":"ComponentStateProvider.js","sources":["../../../src/state/context/ComponentStateProvider.tsx"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport * as React from \"react\";\n\nimport { sanitizeMessage } from \"message/sanitizeMessage\";\nimport { sendViewMessage } from \"message/sendViewMessage\";\n\nimport {\n  ComponentState,\n  ComponentStateContext,\n  ComponentStateContextType,\n} from \"./context\";\n\nexport type StateProviderProps = {\n  children: React.ReactNode;\n};\n\nexport const ComponentStateProvider = ({ children }: StateProviderProps) => {\n  const [components, setComponents] = useState<Record<string, ComponentState>>(\n    {},\n  );\n\n  useEffect(() => {\n    try {\n      const state = sanitizeMessage(components);\n      sendViewMessage({\n        type: \"component_state\",\n        state,\n      });\n    } catch (e) {\n      if (e instanceof DOMException && e.name === \"DataCloneError\") {\n        sendViewMessage({\n          type: \"component_state\",\n          state: {},\n          error: e.message,\n        });\n        return;\n      }\n      throw e;\n    }\n  }, [components]);\n\n  const updateComponent = useCallback(\n    <TState extends ComponentState>(id: string, state: TState) => {\n      setComponents((currentComponents) => ({\n        ...currentComponents,\n        [id]: state,\n      }));\n    },\n    [],\n  );\n\n  const removeComponent = useCallback((id: string) => {\n    setComponents((currentComponents) => {\n      const hasComponent = currentComponents[id];\n      if (!hasComponent) return currentComponents;\n      const newComponents = { ...currentComponents };\n      delete newComponents[id];\n      return newComponents;\n    });\n  }, []);\n\n  const context: ComponentStateContextType = {\n    components,\n    updateComponent,\n    removeComponent,\n  };\n  return (\n    <ComponentStateContext.Provider value={context}>\n      {children}\n    </ComponentStateContext.Provider>\n  );\n};\n"],"names":["ComponentStateProvider","children","components","setComponents","useState","useEffect","state","sanitizeMessage","type","e","DOMException","name","error","message","updateComponent","useCallback","id","currentComponents","removeComponent","hasComponent","newComponents","context"],"mappings":";;;;;AAgBO,MAAMA,yBAAyBA,CAAC;AAAA,EAAEC;AAA6B,MAAM;AAC1E,QAAM,CAACC,YAAYC,aAAa,IAAIC,SAClC,CACF,CAAA;AAEAC,YAAU,MAAM;AACV,QAAA;AACIC,YAAAA,QAAQC,gBAAgBL,UAAU;AACxB,sBAAA;AAAA,QACdM,MAAM;AAAA,QACNF;AAAAA,MAAAA,CACD;AAAA,aACMG,GAAG;AACV,UAAIA,aAAaC,gBAAgBD,EAAEE,SAAS,kBAAkB;AAC5C,wBAAA;AAAA,UACdH,MAAM;AAAA,UACNF,OAAO,CAAC;AAAA,UACRM,OAAOH,EAAEI;AAAAA,QAAAA,CACV;AACD;AAAA,MACF;AACMJ,YAAAA;AAAAA,IACR;AAAA,EAAA,GACC,CAACP,UAAU,CAAC;AAEf,QAAMY,kBAAkBC,YACtB,CAAgCC,IAAYV,UAAkB;AAC5DH,kBAAec,CAAuB,uBAAA;AAAA,MACpC,GAAGA;AAAAA,MACH,CAACD,EAAE,GAAGV;AAAAA,IACN,EAAA;AAAA,EACJ,GACA,CACF,CAAA;AAEMY,QAAAA,kBAAkBH,YAAY,CAACC,OAAe;AAClDb,kBAAec,CAAsB,sBAAA;AAC7BE,YAAAA,eAAeF,kBAAkBD,EAAE;AACzC,UAAI,CAACG;AAAqBF,eAAAA;AAC1B,YAAMG,gBAAgB;AAAA,QAAE,GAAGH;AAAAA,MAAAA;AAC3B,aAAOG,cAAcJ,EAAE;AAChBI,aAAAA;AAAAA,IAAAA,CACR;AAAA,EACH,GAAG,CAAE,CAAA;AAEL,QAAMC,UAAqC;AAAA,IACzCnB;AAAAA,IACAY;AAAAA,IACAI;AAAAA,EAAAA;AAEF,6BACG,sBAAsB,UAAtB,EAA+B,OAAOG,SACpCpB,SACH,CAAA;AAEJ;"}