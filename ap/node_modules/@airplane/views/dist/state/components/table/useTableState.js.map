{"version":3,"file":"useTableState.js","sources":["../../../../src/state/components/table/useTableState.ts"],"sourcesContent":["import { useCallback, useMemo, useReducer, Reducer } from \"react\";\n\nimport { ComponentType, useSyncComponentState } from \"state/context/context\";\nimport { MutationState } from \"state/tasks/useTaskMutation\";\n\nimport { reducer, ReducerState, Action } from \"./reducer\";\nimport { TableState } from \"./state\";\n\nexport type TableHookOptions = {\n  // If true, only a single row can be selected at a time.\n  singleSelect?: boolean;\n  /** Clear all selected rows. */\n  clearSelection: () => void;\n};\n\n/**\n * useTableState is a hook that creates and manages a Table's state on the\n * Airplane context\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const useTableState = <TRowData = any>(\n  id: string,\n  options: TableHookOptions,\n): TableState<TRowData> => {\n  const [internalState, dispatch] = useReducer<\n    Reducer<ReducerState<TRowData>, Action<TRowData>>\n  >(reducer, {\n    selectedRows: [],\n    rowActionResult: null,\n  });\n\n  const changeRowSelection = useCallback((rows: TRowData[]) => {\n    dispatch({\n      type: \"changeRowSelection\",\n      rows,\n    });\n  }, []);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const setRowActionResult = useCallback((result: MutationState<any>) => {\n    dispatch({\n      type: \"setRowActionResult\",\n      result,\n    });\n  }, []);\n\n  const state: TableState<TRowData> = useMemo(\n    () => ({\n      id,\n      selectedRows: internalState.selectedRows,\n      selectedRow: internalState.selectedRow,\n      rowActionResult: internalState.rowActionResult,\n      setRowActionResult,\n      changeRowSelection,\n      clearSelection: options.clearSelection,\n      componentType: ComponentType.Table,\n    }),\n    [\n      id,\n      internalState.selectedRows,\n      internalState.selectedRow,\n      internalState.rowActionResult,\n      changeRowSelection,\n      setRowActionResult,\n      options.clearSelection,\n    ],\n  );\n  useSyncComponentState(id, state);\n\n  return state;\n};\n"],"names":["useTableState","id","options","internalState","dispatch","useReducer","reducer","selectedRows","rowActionResult","changeRowSelection","useCallback","rows","type","setRowActionResult","result","state","useMemo","selectedRow","clearSelection","componentType","ComponentType","Table","useSyncComponentState"],"mappings":";;;AAoBaA,MAAAA,gBAAgB,CAC3BC,IACAC,YACyB;AACzB,QAAM,CAACC,eAAeC,QAAQ,IAAIC,WAEhCC,SAAS;AAAA,IACTC,cAAc,CAAE;AAAA,IAChBC,iBAAiB;AAAA,EAAA,CAClB;AAEKC,QAAAA,qBAAqBC,YAAY,CAACC,SAAqB;AAClD,aAAA;AAAA,MACPC,MAAM;AAAA,MACND;AAAAA,IAAAA,CACD;AAAA,EACH,GAAG,CAAE,CAAA;AAECE,QAAAA,qBAAqBH,YAAY,CAACI,WAA+B;AAC5D,aAAA;AAAA,MACPF,MAAM;AAAA,MACNE;AAAAA,IAAAA,CACD;AAAA,EACH,GAAG,CAAE,CAAA;AAECC,QAAAA,QAA8BC,QAClC,OAAO;AAAA,IACLf;AAAAA,IACAM,cAAcJ,cAAcI;AAAAA,IAC5BU,aAAad,cAAcc;AAAAA,IAC3BT,iBAAiBL,cAAcK;AAAAA,IAC/BK;AAAAA,IACAJ;AAAAA,IACAS,gBAAgBhB,QAAQgB;AAAAA,IACxBC,eAAeC,cAAcC;AAAAA,EAE/B,IAAA,CACEpB,IACAE,cAAcI,cACdJ,cAAcc,aACdd,cAAcK,iBACdC,oBACAI,oBACAX,QAAQgB,cAAc,CAE1B;AACAI,wBAAsBrB,IAAIc,KAAK;AAExBA,SAAAA;AACT;"}