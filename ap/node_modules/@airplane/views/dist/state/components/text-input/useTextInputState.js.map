{"version":3,"file":"useTextInputState.js","sources":["../../../../src/state/components/text-input/useTextInputState.ts"],"sourcesContent":["import { Dispatch, useCallback, useMemo, useReducer } from \"react\";\n\nimport { useStateSetters } from \"state/components/input/useStateSetters\";\nimport { ComponentType, useSyncComponentState } from \"state/context/context\";\n\nimport { Action, reducer } from \"./reducer\";\nimport { InitialTextInputState, TextInputState } from \"./state\";\n\nexport type InputHookOptions = {\n  initialState?: InitialTextInputState;\n  focus?: () => void;\n};\n\n/**\n * getUseInputState returns a hook that creates and manages state for TextInput,\n * Textarea, or CodeInput on the Airplane context\n */\nexport const getUseTextInputState =\n  (\n    componentType:\n      | ComponentType.TextInput\n      | ComponentType.Textarea\n      | ComponentType.CodeInput,\n  ) =>\n  (\n    id: string,\n    options?: InputHookOptions,\n  ): { state: TextInputState; dispatch: Dispatch<Action> } => {\n    const initialState = {\n      value: options?.initialState?.value ?? \"\",\n      disabled: options?.initialState?.disabled ?? false,\n    };\n    const [internalState, dispatch] = useReducer(reducer, {\n      ...initialState,\n      showErrors: false,\n      errors: [],\n    });\n    const stateSetters = useStateSetters(dispatch, initialState);\n\n    const f = options?.focus;\n    const focus: TextInputState[\"focus\"] = useCallback(() => {\n      if (f) f();\n    }, [f]);\n\n    const state: TextInputState = useMemo(\n      () => ({\n        ...internalState,\n        ...stateSetters,\n        id,\n        focus,\n        componentType,\n      }),\n      [internalState, id, focus, stateSetters],\n    );\n    useSyncComponentState(id, state);\n\n    return { state, dispatch };\n  };\n\nexport const useTextInputState = getUseTextInputState(ComponentType.TextInput);\nexport const useTextareaState = getUseTextInputState(ComponentType.Textarea);\nexport const useCodeInputState = getUseTextInputState(ComponentType.CodeInput);\n"],"names":["getUseTextInputState","componentType","id","options","initialState","value","disabled","internalState","dispatch","useReducer","reducer","showErrors","errors","stateSetters","useStateSetters","f","focus","useCallback","state","useMemo","useSyncComponentState","useTextInputState","ComponentType","TextInput","useTextareaState","Textarea","useCodeInputState","CodeInput"],"mappings":";;;;AAiBO,MAAMA,uBACXA,CACEC,kBAKF,CACEC,IACAC,YAC0D;;AAC1D,QAAMC,eAAe;AAAA,IACnBC,SAAOF,wCAASC,iBAATD,mBAAuBE,UAAS;AAAA,IACvCC,YAAUH,wCAASC,iBAATD,mBAAuBG,aAAY;AAAA,EAAA;AAE/C,QAAM,CAACC,eAAeC,QAAQ,IAAIC,WAAWC,SAAS;AAAA,IACpD,GAAGN;AAAAA,IACHO,YAAY;AAAA,IACZC,QAAQ,CAAA;AAAA,EAAA,CACT;AACKC,QAAAA,eAAeC,gBAAgBN,UAAUJ,YAAY;AAE3D,QAAMW,IAAIZ,mCAASa;AACbA,QAAAA,QAAiCC,YAAY,MAAM;AACnDF,QAAAA;AAAK;EAAA,GACR,CAACA,CAAC,CAAC;AAEAG,QAAAA,QAAwBC,QAC5B,OAAO;AAAA,IACL,GAAGZ;AAAAA,IACH,GAAGM;AAAAA,IACHX;AAAAA,IACAc;AAAAA,IACAf;AAAAA,EAAAA,IAEF,CAACM,eAAeL,IAAIc,OAAOH,YAAY,CACzC;AACAO,wBAAsBlB,IAAIgB,KAAK;AAExB,SAAA;AAAA,IAAEA;AAAAA,IAAOV;AAAAA,EAAAA;AAClB;AAEWa,MAAAA,oBAAoBrB,qBAAqBsB,cAAcC,SAAS;AAChEC,MAAAA,mBAAmBxB,qBAAqBsB,cAAcG,QAAQ;AAC9DC,MAAAA,oBAAoB1B,qBAAqBsB,cAAcK,SAAS;"}