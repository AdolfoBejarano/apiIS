{"version":3,"file":"useNumberInputState.js","sources":["../../../../src/state/components/number-input/useNumberInputState.ts"],"sourcesContent":["import { Dispatch, useMemo, useReducer } from \"react\";\n\nimport { useStateSetters } from \"state/components/input/useStateSetters\";\nimport { ComponentType, useSyncComponentState } from \"state/context/context\";\n\nimport { Action, reducer } from \"./reducer\";\nimport { InitialNumberInputState, NumberInputState } from \"./state\";\n\nexport type InputHookOptions = {\n  initialState?: InitialNumberInputState;\n  focus?: () => void;\n  min?: number;\n  max?: number;\n};\n\nconst clipMinAndMax = (\n  value?: number,\n  min?: number,\n  max?: number,\n): number | undefined => {\n  if (value === undefined) {\n    return value;\n  } else if (min !== undefined && value < min) {\n    return min;\n  } else if (max !== undefined && value > max) {\n    return max;\n  } else {\n    return value;\n  }\n};\n\n/**\n * getUseNumberInputState returns hook that creates and manages state\n * for NumberInput or Slider on the Airplane context\n */\nexport const getUseNumberInputState =\n  (componentType: ComponentType.NumberInput | ComponentType.Slider) =>\n  (\n    id: string,\n    options?: InputHookOptions,\n  ): { state: NumberInputState; dispatch: Dispatch<Action> } => {\n    const initialState = {\n      value: options?.initialState?.value,\n      disabled: options?.initialState?.disabled ?? false,\n    };\n    const [internalState, dispatch] = useReducer(reducer, {\n      ...initialState,\n      showErrors: false,\n      errors: [],\n    });\n    const stateSetters = useStateSetters(dispatch, initialState);\n\n    const state: NumberInputState = useMemo(\n      () => ({\n        ...internalState,\n        ...stateSetters,\n        setValue: (v) =>\n          stateSetters.setValue(clipMinAndMax(v, options?.min, options?.max)),\n        id,\n        componentType,\n      }),\n      [internalState, id, stateSetters, options?.min, options?.max],\n    );\n    useSyncComponentState(id, state);\n\n    return { state, dispatch };\n  };\n\nexport const useNumberInputState = getUseNumberInputState(\n  ComponentType.NumberInput,\n);\nexport const useSliderState = getUseNumberInputState(ComponentType.Slider);\n"],"names":["clipMinAndMax","value","min","max","undefined","getUseNumberInputState","componentType","id","options","initialState","disabled","internalState","dispatch","useReducer","reducer","showErrors","errors","stateSetters","useStateSetters","state","useMemo","setValue","v","useSyncComponentState","useNumberInputState","ComponentType","NumberInput","useSliderState","Slider"],"mappings":";;;;AAeA,MAAMA,gBAAgBA,CACpBC,OACAC,KACAC,QACuB;AACvB,MAAIF,UAAUG,QAAW;AAChBH,WAAAA;AAAAA,EACEC,WAAAA,QAAQE,UAAaH,QAAQC,KAAK;AACpCA,WAAAA;AAAAA,EACEC,WAAAA,QAAQC,UAAaH,QAAQE,KAAK;AACpCA,WAAAA;AAAAA,EAAAA,OACF;AACEF,WAAAA;AAAAA,EACT;AACF;AAMO,MAAMI,yBACXA,CAACC,kBACD,CACEC,IACAC,YAC4D;;AAC5D,QAAMC,eAAe;AAAA,IACnBR,QAAOO,wCAASC,iBAATD,mBAAuBP;AAAAA,IAC9BS,YAAUF,wCAASC,iBAATD,mBAAuBE,aAAY;AAAA,EAAA;AAE/C,QAAM,CAACC,eAAeC,QAAQ,IAAIC,WAAWC,SAAS;AAAA,IACpD,GAAGL;AAAAA,IACHM,YAAY;AAAA,IACZC,QAAQ,CAAA;AAAA,EAAA,CACT;AACKC,QAAAA,eAAeC,gBAAgBN,UAAUH,YAAY;AAErDU,QAAAA,QAA0BC,QAC9B,OAAO;AAAA,IACL,GAAGT;AAAAA,IACH,GAAGM;AAAAA,IACHI,UAAWC,CACTL,MAAAA,aAAaI,SAASrB,cAAcsB,GAAGd,mCAASN,KAAKM,mCAASL,GAAG,CAAC;AAAA,IACpEI;AAAAA,IACAD;AAAAA,EAAAA,IAEF,CAACK,eAAeJ,IAAIU,cAAcT,mCAASN,KAAKM,mCAASL,GAAG,CAC9D;AACAoB,wBAAsBhB,IAAIY,KAAK;AAExB,SAAA;AAAA,IAAEA;AAAAA,IAAOP;AAAAA,EAAAA;AAClB;AAEWY,MAAAA,sBAAsBnB,uBACjCoB,cAAcC,WAChB;AACaC,MAAAA,iBAAiBtB,uBAAuBoB,cAAcG,MAAM;"}