import { useCallback, useMemo } from "react";
const useStateSetters = (dispatch, initialState) => {
  const setValue = useCallback((value) => {
    dispatch({
      type: "setValue",
      value
    });
  }, [dispatch]);
  const setDisabled = useCallback((disabled) => {
    dispatch({
      type: "setDisabled",
      disabled
    });
  }, [dispatch]);
  const setShowErrors = useCallback((showErrors) => {
    dispatch({
      type: "setShowErrors",
      showErrors
    });
  }, [dispatch]);
  const reset = useCallback(() => {
    dispatch({
      type: "reset",
      initialValue: initialState.value,
      initialDisabled: initialState.disabled
    });
  }, [dispatch]);
  return useMemo(() => ({
    setValue,
    setDisabled,
    setShowErrors,
    reset
  }), [setValue, setDisabled, setShowErrors, reset]);
};
export {
  useStateSetters
};
//# sourceMappingURL=useStateSetters.js.map
