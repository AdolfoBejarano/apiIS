{"version":3,"file":"useFormInputs.js","sources":["../../../../src/state/components/form/useFormInputs.ts"],"sourcesContent":["import { shallowEqual } from \"@mantine/hooks\";\nimport { useContext, useMemo, useRef } from \"react\";\n\nimport {\n  ComponentState,\n  ComponentStateContext,\n  InputComponentState,\n} from \"state/context/context\";\n\nimport { FormContext, InputType } from \"./FormProvider\";\nimport { InputValues } from \"./state\";\n\n/**\n * FormInputs is the global component state and type of each form input for the nearest `Form`\n * parent component.\n */\nexport type FormInputs = Record<\n  string,\n  { state: InputComponentState; type: InputType }\n>;\n\n/**\n * useFormInputStates returns the form's input data (state and type).\n */\nexport const useFormInputs = (): FormInputs => {\n  const memoizedInputComponents = useRef<ComponentState[]>([]);\n  const { formTypeByID } = useContext(FormContext);\n  const componentState = useContext(ComponentStateContext);\n  let inputComponents = Object.keys(formTypeByID).map(\n    (id) => componentState.components[id],\n  );\n  if (shallowEqual(inputComponents, memoizedInputComponents.current)) {\n    inputComponents = memoizedInputComponents.current;\n  }\n  memoizedInputComponents.current = inputComponents;\n  return useMemo(() => {\n    const formInputs: FormInputs = {};\n    for (const component of inputComponents) {\n      formInputs[component.id] = {\n        state: component as InputComponentState,\n        type: formTypeByID[component.id],\n      };\n    }\n    return formInputs;\n  }, [formTypeByID, inputComponents]);\n};\n\n/**\n * adaptInputDataToValues transforms the form's inputs to more user-friendly values.\n */\nexport const adaptInputsToValues = (formInputs: FormInputs): InputValues => {\n  const values: InputValues = {};\n  for (const [id, s] of Object.entries(formInputs)) {\n    const { state } = s;\n    values[id] = state.value;\n  }\n  return values;\n};\n"],"names":["useFormInputs","memoizedInputComponents","useRef","formTypeByID","useContext","FormContext","componentState","ComponentStateContext","inputComponents","Object","keys","map","id","components","shallowEqual","current","useMemo","formInputs","component","state","type","adaptInputsToValues","values","s","entries","value"],"mappings":";;;;AAwBO,MAAMA,gBAAgBA,MAAkB;AACvCC,QAAAA,0BAA0BC,OAAyB,CAAA,CAAE;AACrD,QAAA;AAAA,IAAEC;AAAAA,EAAAA,IAAiBC,WAAWC,WAAW;AACzCC,QAAAA,iBAAiBF,WAAWG,qBAAqB;AACnDC,MAAAA,kBAAkBC,OAAOC,KAAKP,YAAY,EAAEQ,IAC7CC,CAAON,OAAAA,eAAeO,WAAWD,EAAE,CACtC;AACA,MAAIE,aAAaN,iBAAiBP,wBAAwBc,OAAO,GAAG;AAClEP,sBAAkBP,wBAAwBc;AAAAA,EAC5C;AACAd,0BAAwBc,UAAUP;AAClC,SAAOQ,QAAQ,MAAM;AACnB,UAAMC,aAAyB,CAAA;AAC/B,eAAWC,aAAaV,iBAAiB;AAC5BU,iBAAAA,UAAUN,EAAE,IAAI;AAAA,QACzBO,OAAOD;AAAAA,QACPE,MAAMjB,aAAae,UAAUN,EAAE;AAAA,MAAA;AAAA,IAEnC;AACOK,WAAAA;AAAAA,EAAAA,GACN,CAACd,cAAcK,eAAe,CAAC;AACpC;AAKaa,MAAAA,sBAAsBA,CAACJ,eAAwC;AAC1E,QAAMK,SAAsB,CAAA;AAC5B,aAAW,CAACV,IAAIW,CAAC,KAAKd,OAAOe,QAAQP,UAAU,GAAG;AAC1C,UAAA;AAAA,MAAEE;AAAAA,IAAUI,IAAAA;AACXX,WAAAA,EAAE,IAAIO,MAAMM;AAAAA,EACrB;AACOH,SAAAA;AACT;"}