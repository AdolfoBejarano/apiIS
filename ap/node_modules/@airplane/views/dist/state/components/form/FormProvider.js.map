{"version":3,"file":"FormProvider.js","sources":["../../../../src/state/components/form/FormProvider.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport * as React from \"react\";\n\n/**\n * Supported form input types\n */\nexport type InputType =\n  | \"number-input\"\n  | \"text-input\"\n  | \"file-input\"\n  | \"checkbox\"\n  | \"switch\"\n  | \"slider\"\n  | \"select\"\n  | \"date-picker\"\n  | \"radio-group\"\n  | \"multi-select\"\n  | \"multi-input\";\ntype FormTypeByID = Record<string, InputType>;\n\nexport type FormContextType = {\n  formTypeByID: FormTypeByID;\n  addFormInput: (id: string, type: InputType) => void;\n  removeFormInput: (id: string) => void;\n};\n\nconst defaultContext: FormContextType = {\n  formTypeByID: {},\n  addFormInput: () => {\n    // Empty\n  },\n  removeFormInput: () => {\n    // Empty\n  },\n};\n\nexport const FormContext = React.createContext<FormContextType>(defaultContext);\n\nexport const FormProvider = ({ children }: { children: React.ReactNode }) => {\n  const [formInputs, setFormInputs] = useState<FormTypeByID>({});\n  const addFormInput = useCallback((id: string, type: InputType) => {\n    setFormInputs((formInputs) => {\n      if (id in formInputs) {\n        return formInputs;\n      }\n      return {\n        ...formInputs,\n        [id]: type,\n      };\n    });\n  }, []);\n  const removeFormInput = React.useCallback((id: string) => {\n    setFormInputs((formInputs) => {\n      if (!(id in formInputs)) {\n        return formInputs;\n      }\n      const newFormInputs = { ...formInputs };\n      delete newFormInputs[id];\n      return newFormInputs;\n    });\n  }, []);\n  const context: FormContextType = {\n    formTypeByID: formInputs,\n    addFormInput,\n    removeFormInput,\n  };\n  return (\n    <FormContext.Provider value={context}>{children}</FormContext.Provider>\n  );\n};\n"],"names":["defaultContext","formTypeByID","addFormInput","removeFormInput","FormContext","createContext","FormProvider","children","formInputs","setFormInputs","useState","useCallback","id","type","React","newFormInputs","context"],"mappings":";;;AA0BA,MAAMA,iBAAkC;AAAA,EACtCC,cAAc,CAAC;AAAA,EACfC,cAAcA,MAAM;AAAA,EAClB;AAAA,EAEFC,iBAAiBA,MAAM;AAAA,EACrB;AAEJ;AAEaC,MAAAA,cAAoBC,sBAAAA,cAA+BL,cAAc;AAEvE,MAAMM,eAAeA,CAAC;AAAA,EAAEC;AAAwC,MAAM;AAC3E,QAAM,CAACC,YAAYC,aAAa,IAAIC,SAAuB,CAAE,CAAA;AAC7D,QAAMR,eAAeS,YAAY,CAACC,IAAYC,SAAoB;AAChEJ,kBAAeD,CAAAA,gBAAe;AAC5B,UAAII,MAAMJ,aAAY;AACbA,eAAAA;AAAAA,MACT;AACO,aAAA;AAAA,QACL,GAAGA;AAAAA,QACH,CAACI,EAAE,GAAGC;AAAAA,MAAAA;AAAAA,IACR,CACD;AAAA,EACH,GAAG,CAAE,CAAA;AACL,QAAMV,kBAAkBW,MAAMH,YAAY,CAACC,OAAe;AACxDH,kBAAeD,CAAAA,gBAAe;AACxB,UAAA,EAAEI,MAAMJ,cAAa;AAChBA,eAAAA;AAAAA,MACT;AACA,YAAMO,gBAAgB;AAAA,QAAE,GAAGP;AAAAA,MAAAA;AAC3B,aAAOO,cAAcH,EAAE;AAChBG,aAAAA;AAAAA,IAAAA,CACR;AAAA,EACH,GAAG,CAAE,CAAA;AACL,QAAMC,UAA2B;AAAA,IAC/Bf,cAAcO;AAAAA,IACdN;AAAAA,IACAC;AAAAA,EAAAA;AAEF,6BACG,YAAY,UAAZ,EAAqB,OAAOa,SAAUT,SAAS,CAAA;AAEpD;"}