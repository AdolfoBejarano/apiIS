{"version":3,"file":"types.js","sources":["../../src/client/types.ts"],"sourcesContent":["export type User = {\n  userID: string;\n  email: string;\n  name: string;\n  avatarURL?: string;\n};\nexport type Group = { id: string; name: string };\nexport type UserGroup = { user?: User; group?: Group };\nexport interface EntitiesResponse {\n  results: UserGroup[];\n}\n\nexport interface ConstraintOption {\n  label: string;\n  value: ParamValue;\n}\n\nexport interface TaskOption {\n  slug: string;\n  params?: ParamValues;\n}\n\nexport type Parameter = {\n  slug: string;\n  name: string;\n  type:\n    | \"boolean\"\n    | \"upload\"\n    | \"date\"\n    | \"datetime\"\n    | \"float\"\n    | \"integer\"\n    | \"string\"\n    | \"json\";\n  component?: \"textarea\" | \"editor-sql\";\n  default?: ParamValue;\n  constraints: {\n    optional: boolean;\n    validate?: string;\n    options?: Array<ConstraintOption | ParamValue> | TaskOption;\n    regex?: string;\n  };\n  desc?: string;\n  hidden?: string;\n  multi?: boolean;\n};\n\nexport interface TaskOrRunbookReviewersResponse {\n  task?: {\n    name: string;\n    requireExplicitPermissions: boolean;\n    triggers: { triggerID: string; kind: string }[];\n    parameters: { parameters: Parameter[] };\n  };\n  runbook?: {\n    name: string;\n    isPrivate: boolean;\n    triggers: { triggerID: string; kind: string }[];\n    parameters: { parameters: Parameter[] };\n  };\n  reviewers: { userID?: string; groupID?: string }[];\n}\n\nexport type View = {\n  id: string;\n  slug: string;\n  archivedAt?: string;\n  archivedBy?: string;\n  name: string;\n  description?: string;\n  createdAt?: string;\n  createdBy?: string;\n  isLocal?: boolean;\n};\n\nexport type TaskMetadata = {\n  id: string;\n  slug: string;\n  isArchived?: boolean;\n  isLocal?: boolean;\n};\n\n/**\n * isConstraintOptions is a user-defined type guard for checking if a variable is a list of constraint options.\n */\nexport const isConstraintOptions = (\n  options: unknown,\n): options is ConstraintOption[] => {\n  if (!Array.isArray(options)) {\n    return false;\n  }\n  return options.every(isConstraintOption);\n};\n\n/**\n * isConstraintOption is a user-defined type guard for checking if a variable is a constraint option.\n */\nexport const isConstraintOption = (o: unknown): o is ConstraintOption => {\n  if (o == null || typeof o !== \"object\") {\n    return false;\n  }\n\n  return \"value\" in o;\n};\n\n/**\n * isTaskOption is a user-defined type guard for checking if a variable is a TaskOption.\n */\nexport const isTaskOption = (options: unknown): options is TaskOption => {\n  if (!options || Array.isArray(options)) {\n    return false;\n  }\n  return typeof options === \"object\" && \"slug\" in options;\n};\n\n// JSONValue type\nexport type JSONValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JSONObject\n  | JSONArray;\nexport interface JSONObject {\n  [key: string]: JSONValue;\n}\nexport type JSONArray = Array<JSONValue>;\n\nexport type SingleParamValue =\n  | string\n  | boolean\n  | number\n  | Template\n  | ConfigVar\n  | ParamList\n  | ParamMap\n  | JSONValue\n  | undefined\n  | null;\n\nexport type MultiParamValue = ParamValue[];\n\nexport type ParamValue = SingleParamValue | MultiParamValue;\nexport type ParamValues = Record<string, ParamValue>;\n\nexport type ParamList = Array<unknown>;\n\nexport type ParamMap = Record<string, unknown>;\n\n/**\n * ConfigVar is a basic representation of a config variable, used for parameters.\n */\nexport type ConfigVar = {\n  __airplaneType: \"configvar\";\n  name: string;\n};\n\nexport type Template = {\n  __airplaneType: \"template\";\n  raw: string;\n};\n\nexport const isTemplate = (v: unknown): v is Template =>\n  v != null &&\n  typeof v === \"object\" &&\n  (v as Template)[\"__airplaneType\"] === \"template\";\n"],"names":["isConstraintOptions","options","Array","isArray","every","isConstraintOption","o","isTaskOption","isTemplate","v"],"mappings":"AAqFaA,MAAAA,sBAAsBA,CACjCC,YACkC;AAClC,MAAI,CAACC,MAAMC,QAAQF,OAAO,GAAG;AACpB,WAAA;AAAA,EACT;AACOA,SAAAA,QAAQG,MAAMC,kBAAkB;AACzC;AAKaA,MAAAA,qBAAqBA,CAACC,MAAsC;AACvE,MAAIA,KAAK,QAAQ,OAAOA,MAAM,UAAU;AAC/B,WAAA;AAAA,EACT;AAEA,SAAO,WAAWA;AACpB;AAKaC,MAAAA,eAAeA,CAACN,YAA4C;AACvE,MAAI,CAACA,WAAWC,MAAMC,QAAQF,OAAO,GAAG;AAC/B,WAAA;AAAA,EACT;AACO,SAAA,OAAOA,YAAY,YAAY,UAAUA;AAClD;AAiDaO,MAAAA,aAAaA,CAACC,MACzBA,KAAK,QACL,OAAOA,MAAM,YACZA,EAAe,gBAAgB,MAAM;"}