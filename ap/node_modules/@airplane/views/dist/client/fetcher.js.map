{"version":3,"file":"fetcher.js","sources":["../../src/client/fetcher.ts"],"sourcesContent":["import { Fetcher as LibFetcher } from \"@airplane/lib\";\n\nimport {\n  AIRPLANE_API_HOST,\n  AIRPLANE_TOKEN,\n  AIRPLANE_API_KEY,\n  AIRPLANE_ENV_SLUG,\n  AIRPLANE_TUNNEL_TOKEN,\n  AIRPLANE_SANDBOX_TOKEN,\n  AIRPLANE_API_HEADERS,\n} from \"client/env\";\nimport { getNPMPackageVersion } from \"getNPMPackageVersion\";\n\n// Fetcher wraps `@airplane/lib` Fetcher to allow us to lazily construct a Fetcher\n// instance with proper defaults. We must do this lazily since various build steps\n// rely on calling `setEnvVars`.\nexport class Fetcher extends LibFetcher {\n  constructor() {\n    let headers = undefined;\n    try {\n      headers = JSON.parse(AIRPLANE_API_HEADERS);\n    } catch (e) {\n      // If we encounter a JSON parse error, ignore the value.\n    }\n    super({\n      host: AIRPLANE_API_HOST,\n      token: AIRPLANE_TOKEN,\n      apiKey: AIRPLANE_API_KEY,\n      tunnelToken: AIRPLANE_TUNNEL_TOKEN,\n      sandboxToken: AIRPLANE_SANDBOX_TOKEN,\n      envSlug: AIRPLANE_ENV_SLUG,\n      headers,\n      clientKind: \"views\",\n      clientVersion: getNPMPackageVersion(),\n    });\n  }\n}\n"],"names":["Fetcher","LibFetcher","constructor","headers","undefined","JSON","parse","AIRPLANE_API_HEADERS","e","host","AIRPLANE_API_HOST","token","AIRPLANE_TOKEN","apiKey","AIRPLANE_API_KEY","tunnelToken","AIRPLANE_TUNNEL_TOKEN","sandboxToken","AIRPLANE_SANDBOX_TOKEN","envSlug","AIRPLANE_ENV_SLUG","clientKind","clientVersion","getNPMPackageVersion"],"mappings":";;;AAgBO,MAAMA,gBAAgBC,UAAW;AAAA,EACtCC,cAAc;AACZ,QAAIC,UAAUC;AACV,QAAA;AACQC,gBAAAA,KAAKC,MAAMC,oBAAoB;AAAA,aAClCC,GAAG;AAAA,IACV;AAEI,UAAA;AAAA,MACJC,MAAMC;AAAAA,MACNC,OAAOC;AAAAA,MACPC,QAAQC;AAAAA,MACRC,aAAaC;AAAAA,MACbC,cAAcC;AAAAA,MACdC,SAASC;AAAAA,MACTjB;AAAAA,MACAkB,YAAY;AAAA,MACZC,eAAeC,qBAAqB;AAAA,IAAA,CACrC;AAAA,EACH;AACF;"}