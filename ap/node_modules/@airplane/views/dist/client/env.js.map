{"version":3,"file":"env.js","sources":["../../src/client/env.ts"],"sourcesContent":["export let AIRPLANE_API_HOST =\n  import.meta.env?.AIRPLANE_API_HOST ?? \"https://api.airplane.dev\";\nexport let AIRPLANE_TOKEN = import.meta.env?.AIRPLANE_TOKEN ?? \"\";\nexport let AIRPLANE_API_KEY = import.meta.env?.AIRPLANE_API_KEY ?? \"\";\nexport let AIRPLANE_VIEW_TOKEN = import.meta.env?.AIRPLANE_VIEW_TOKEN ?? \"\";\nexport let AIRPLANE_ENV_SLUG = import.meta.env?.AIRPLANE_ENV_SLUG ?? \"\";\nexport let AIRPLANE_WEB_HOST =\n  import.meta.env?.AIRPLANE_WEB_HOST ?? \"https://app.airplane.dev\";\nexport let AIRPLANE_TUNNEL_TOKEN = import.meta.env?.AIRPLANE_TUNNEL_TOKEN ?? \"\";\nexport let AIRPLANE_SANDBOX_TOKEN =\n  import.meta.env?.AIRPLANE_SANDBOX_TOKEN ?? \"\";\nexport let AIRPLANE_API_HEADERS = import.meta.env?.AIRPLANE_API_HEADERS ?? \"{}\";\nexport let AIRPLANE_USE_SELF_HOSTED_INPUTS =\n  import.meta.env?.AIRPLANE_USE_SELF_HOSTED_INPUTS === \"true\";\n\n// Additional environment variables we want to plumb into the views package.\ntype AdditionalEnvVars = {\n  // AIRPLANE_TUNNEL_TOKEN is used only by local dev to authenticate with the dev server when\n  // proxying from an ngrok tunnel.\n  AIRPLANE_TUNNEL_TOKEN?: string;\n  // AIRPLANE_SANDBOX_TOKEN is used to authenticate requests with the sandbox router for remote\n  // studio.\n  AIRPLANE_SANDBOX_TOKEN?: string;\n  AIRPLANE_API_HEADERS?: string;\n  // AIRPLANE_VIEW_TOKEN is used to identify the view to the API.\n  AIRPLANE_VIEW_TOKEN?: string;\n  AIRPLANE_USE_SELF_HOSTED_INPUTS?: string;\n};\n\nexport const setEnvVars = (\n  apiHost: string,\n  token: string,\n  apiKey: string,\n  envSlug: string,\n  additionalEnvVars?: AdditionalEnvVars,\n) => {\n  AIRPLANE_API_HOST = apiHost;\n  AIRPLANE_TOKEN = token;\n  AIRPLANE_VIEW_TOKEN = additionalEnvVars?.AIRPLANE_VIEW_TOKEN;\n  AIRPLANE_API_KEY = apiKey;\n  AIRPLANE_ENV_SLUG = envSlug;\n  if (apiHost.includes(\"stage\")) {\n    AIRPLANE_WEB_HOST = \"https://web.airstage.app\";\n  }\n  AIRPLANE_TUNNEL_TOKEN = additionalEnvVars?.AIRPLANE_TUNNEL_TOKEN ?? \"\";\n  AIRPLANE_SANDBOX_TOKEN = additionalEnvVars?.AIRPLANE_SANDBOX_TOKEN ?? \"\";\n  AIRPLANE_API_HEADERS = additionalEnvVars?.AIRPLANE_API_HEADERS ?? \"{}\";\n  AIRPLANE_USE_SELF_HOSTED_INPUTS =\n    additionalEnvVars?.AIRPLANE_USE_SELF_HOSTED_INPUTS === \"true\";\n};\n\nexport const getExecuteOptions = (\n  source: \"query\" | \"mutation\",\n  allowCachedMaxAge?: number,\n) => {\n  return {\n    host: AIRPLANE_API_HOST,\n    token: AIRPLANE_TOKEN,\n    apiKey: AIRPLANE_TOKEN ? undefined : AIRPLANE_API_KEY,\n    envSlug: AIRPLANE_ENV_SLUG,\n    source: `view-${source}`,\n    headers: { \"X-Airplane-View-Token\": AIRPLANE_VIEW_TOKEN },\n    useSelfHostedInputs: AIRPLANE_USE_SELF_HOSTED_INPUTS,\n    allowCachedMaxAge,\n  };\n};\n"],"names":["AIRPLANE_API_HOST","env"],"mappings":"AAAO,IAAIA,iCAAAA,EAAAA,UAAAA,KAAAA,MAAAA,cACGC,KAAAA,OAA0B,MAAA,MAAA,KAAA,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}