{"version":3,"file":"Code.js","sources":["../../../src/components/code/Code.tsx"],"sourcesContent":["import { createStyles } from \"@mantine/core\";\nimport { Prism, PrismProps } from \"@mantine/prism\";\nimport dracula from \"prism-react-renderer/themes/dracula\";\nimport github from \"prism-react-renderer/themes/github\";\n\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\n\nimport { Props } from \"./Code.types\";\n\nconst useStyles = createStyles((theme) => ({\n  lineNumber: {\n    marginRight: theme.spacing.md,\n    color: theme.colors.gray[3],\n  },\n  copy: {\n    color: theme.colors.gray[4],\n  },\n}));\n\nexport const CodeComponent = ({\n  children,\n  theme = \"light\",\n  language,\n  className,\n  style,\n  width,\n  height,\n  grow,\n  copy = true,\n  ...restProps\n}: Props) => {\n  const { classes } = useStyles();\n  const { classes: layoutClasses } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  let prismLanguage: PrismProps[\"language\"];\n  // Alias the sql variants to sql.\n  if (language === \"pgsql\" || language === \"mysql\") {\n    prismLanguage = \"sql\";\n  } else if (language === \"none\") {\n    // HACK: Prism doesn't have a \"none\" language. However, it won't highlight anything if\n    // the language is invalid. So here we force the type to be any to pass the type-check.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    prismLanguage = \"none\" as any;\n  } else {\n    prismLanguage = language;\n  }\n  return (\n    <Prism\n      className={className}\n      style={style}\n      colorScheme={theme}\n      classNames={{\n        lineNumber: classes.lineNumber,\n        copy: classes.copy,\n        scrollArea: layoutClasses.style,\n      }}\n      getPrismTheme={(_theme, colorScheme) =>\n        colorScheme === \"light\" ? github : dracula\n      }\n      language={prismLanguage}\n      noCopy={!copy}\n      {...restProps}\n    >\n      {children}\n    </Prism>\n  );\n};\n\nexport const Code = (props: Props) => (\n  <ComponentErrorBoundary componentName={Code.displayName}>\n    <CodeComponent {...props} />\n  </ComponentErrorBoundary>\n);\n\nCode.displayName = \"Code\";\n"],"names":["useStyles","createStyles","theme","lineNumber","marginRight","spacing","md","color","colors","gray","copy","CodeComponent","children","language","className","style","width","height","grow","restProps","classes","layoutClasses","useCommonLayoutStyle","prismLanguage","scrollArea","_theme","colorScheme","github","dracula","Code","props","displayName"],"mappings":";;;;;;;AAUA,MAAMA,YAAYC,aAAcC,CAAW,WAAA;AAAA,EACzCC,YAAY;AAAA,IACVC,aAAaF,MAAMG,QAAQC;AAAAA,IAC3BC,OAAOL,MAAMM,OAAOC,KAAK,CAAC;AAAA,EAC5B;AAAA,EACAC,MAAM;AAAA,IACJH,OAAOL,MAAMM,OAAOC,KAAK,CAAC;AAAA,EAC5B;AACF,EAAE;AAEK,MAAME,gBAAgBA,CAAC;AAAA,EAC5BC;AAAAA,EACAV,QAAQ;AAAA,EACRW;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAR,OAAO;AAAA,EACP,GAAGS;AACE,MAAM;AACL,QAAA;AAAA,IAAEC;AAAAA,MAAYpB,UAAU;AACxB,QAAA;AAAA,IAAEoB,SAASC;AAAAA,MAAkBC,qBAAqB;AAAA,IACtDN;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,CACD;AACGK,MAAAA;AAEAV,MAAAA,aAAa,WAAWA,aAAa,SAAS;AAChC,oBAAA;AAAA,EAAA,WACPA,aAAa,QAAQ;AAId,oBAAA;AAAA,EAAA,OACX;AACWA,oBAAAA;AAAAA,EAClB;AACA,6BACG,OACC,EAAA,WACA,OACA,aAAaX,OACb,YAAY;AAAA,IACVC,YAAYiB,QAAQjB;AAAAA,IACpBO,MAAMU,QAAQV;AAAAA,IACdc,YAAYH,cAAcN;AAAAA,EAAAA,GAE5B,eAAe,CAACU,QAAQC,gBACtBA,gBAAgB,UAAUC,SAASC,SAErC,UAAUL,eACV,QAAQ,CAACb,MACT,GAAIS,WAEHP,SACH,CAAA;AAEJ;AAEO,MAAMiB,OAAOA,CAACC,UACnB,oBAAC,wBAAuB,EAAA,eAAeD,KAAKE,aAC1C,UAAC,oBAAA,eAAA,EAAc,GAAID,MAAAA,CAAM,EAC3B,CAAA;AAGFD,KAAKE,cAAc;"}