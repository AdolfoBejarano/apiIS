{"version":3,"file":"Chip.styles.js","sources":["../../../src/components/chip/Chip.styles.ts"],"sourcesContent":["import { createStyles, MantineTheme } from \"@mantine/core\";\n\nimport { ChipProps } from \"./Chip.types\";\n\ntype StyleParams = {\n  color: NonNullable<ChipProps[\"color\"]>;\n  size: NonNullable<ChipProps[\"size\"]>;\n  variant: NonNullable<ChipProps[\"variant\"]>;\n};\n\nexport const useStyles = createStyles((theme, params: StyleParams) => {\n  return {\n    root: {\n      ...getVariantStyles(theme, params),\n      ...getColorStyles(theme, params),\n    },\n  };\n});\n\nconst getVariantStyles = (theme: MantineTheme, params: StyleParams) => {\n  let backgroundColor;\n  let color;\n  let borderColor;\n  if (params.variant === \"light\") {\n    backgroundColor = theme.colors[params.color][0];\n    color = theme.colors[params.color][6];\n    borderColor = backgroundColor;\n  } else if (params.variant === \"filled\") {\n    backgroundColor = theme.colors[params.color][6];\n    color = theme.colors[params.color][0];\n    borderColor = backgroundColor;\n  } else {\n    backgroundColor = theme.white;\n    color = theme.colors[params.color][6];\n    borderColor = color;\n  }\n  return { backgroundColor, color, border: `1px solid ${borderColor}` };\n};\n\nconst getColorStyles = (theme: MantineTheme, params: StyleParams) => {\n  let fontSize;\n  let padding;\n  if (params.size === \"sm\") {\n    fontSize = theme.fontSizes.xs;\n    padding = \"2px 8px\";\n  } else if (params.size === \"md\") {\n    fontSize = theme.fontSizes.sm;\n    padding = \"4px 14px\";\n  } else {\n    fontSize = theme.fontSizes.md;\n    padding = \"4px 16px\";\n  }\n  return {\n    fontFamily: theme.fontFamily,\n    fontWeight: 500,\n    fontSize,\n    borderRadius: theme.radius.xl,\n    padding,\n  };\n};\n"],"names":["useStyles","createStyles","theme","params","root","getVariantStyles","getColorStyles","backgroundColor","color","borderColor","variant","colors","white","border","fontSize","padding","size","fontSizes","xs","sm","md","fontFamily","fontWeight","borderRadius","radius","xl"],"mappings":";AAUO,MAAMA,YAAYC,aAAa,CAACC,OAAOC,WAAwB;AAC7D,SAAA;AAAA,IACLC,MAAM;AAAA,MACJ,GAAGC,iBAAiBH,OAAOC,MAAM;AAAA,MACjC,GAAGG,eAAeJ,OAAOC,MAAM;AAAA,IACjC;AAAA,EAAA;AAEJ,CAAC;AAED,MAAME,mBAAmBA,CAACH,OAAqBC,WAAwB;AACjEI,MAAAA;AACAC,MAAAA;AACAC,MAAAA;AACAN,MAAAA,OAAOO,YAAY,SAAS;AAC9BH,sBAAkBL,MAAMS,OAAOR,OAAOK,KAAK,EAAE,CAAC;AAC9CA,YAAQN,MAAMS,OAAOR,OAAOK,KAAK,EAAE,CAAC;AACtBD,kBAAAA;AAAAA,EAAAA,WACLJ,OAAOO,YAAY,UAAU;AACtCH,sBAAkBL,MAAMS,OAAOR,OAAOK,KAAK,EAAE,CAAC;AAC9CA,YAAQN,MAAMS,OAAOR,OAAOK,KAAK,EAAE,CAAC;AACtBD,kBAAAA;AAAAA,EAAAA,OACT;AACLA,sBAAkBL,MAAMU;AACxBJ,YAAQN,MAAMS,OAAOR,OAAOK,KAAK,EAAE,CAAC;AACtBA,kBAAAA;AAAAA,EAChB;AACO,SAAA;AAAA,IAAED;AAAAA,IAAiBC;AAAAA,IAAOK,QAAS,aAAYJ,WAAY;AAAA,EAAA;AACpE;AAEA,MAAMH,iBAAiBA,CAACJ,OAAqBC,WAAwB;AAC/DW,MAAAA;AACAC,MAAAA;AACAZ,MAAAA,OAAOa,SAAS,MAAM;AACxBF,eAAWZ,MAAMe,UAAUC;AACjB,cAAA;AAAA,EAAA,WACDf,OAAOa,SAAS,MAAM;AAC/BF,eAAWZ,MAAMe,UAAUE;AACjB,cAAA;AAAA,EAAA,OACL;AACLL,eAAWZ,MAAMe,UAAUG;AACjB,cAAA;AAAA,EACZ;AACO,SAAA;AAAA,IACLC,YAAYnB,MAAMmB;AAAAA,IAClBC,YAAY;AAAA,IACZR;AAAAA,IACAS,cAAcrB,MAAMsB,OAAOC;AAAAA,IAC3BV;AAAAA,EAAAA;AAEJ;"}