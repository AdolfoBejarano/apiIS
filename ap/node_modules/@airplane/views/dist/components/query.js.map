{"version":3,"file":"query.js","sources":["../../src/components/query.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Run } from \"airplane/api\";\n\nimport { DefaultOutput, DefaultParams, ParamValues } from \"client\";\nimport { MutationHookOptions } from \"state\";\nimport { RunbookMutationHookOptions } from \"state/tasks/useRunbookMutation\";\nimport { UseTaskQueryOptions } from \"state/tasks/useTaskQuery\";\n\nexport type AirplaneFunc<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = (paramValues: TParams) => Promise<Run<any, TOutput>>;\ntype AirplaneFuncMetadata = { __airplane: { config: { slug: string } } };\n\n// Query\n\n/**\n * FullQuery is a query that uses an airplane function or a slug. It is always\n * an object and does not include the shorthands of just slug or just function.\n */\nexport type FullQuery<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = FunctionQuery<TParams, TOutput> | SlugQuery<TParams, TOutput>;\n\n/** FunctionQuery is a query that takes an airplane function and params. */\nexport type FunctionQuery<\n  TParams extends ParamValues | undefined,\n  TOutput = DefaultOutput,\n> = (Record<string, never> extends TParams\n  ? {\n      /**\n       * A function returned by airplane.task to execute.\n       * @example\n       * // myTask can be used as fn.\n       * const myTask = airplane.task(async (params) => {...\n       */\n      fn: AirplaneFunc<TParams, TOutput>;\n      params?: TParams;\n      slug?: never;\n    }\n  : {\n      /**\n       * A function returned by airplane.task to execute.\n       * @example\n       * // myTask can be used as fn.\n       * const myTask = airplane.task(async (params) => {...\n       */\n      fn: AirplaneFunc<TParams, TOutput>;\n      params: TParams;\n      slug?: never;\n    }) &\n  UseTaskQueryOptions<TParams, TOutput>;\n\n/** SlugQuery is a query that takes a slug and params. */\nexport type SlugQuery<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = {\n  /** The slug of the task to execute. */\n  slug: string;\n  fn?: never;\n} & UseTaskQueryOptions<TParams, TOutput>;\n\n/**\n * TaskQuery is a query that uses an airplane function or a slug. If the task's\n * parameters are optional then it can take a shorthand of a string slug or a function.\n */\nexport type TaskQuery<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> =\n  | SlugQuery<TParams, TOutput>\n  | string\n  | FunctionQuery<TParams, TOutput>\n  | (Record<string, never> extends TParams\n      ? AirplaneFunc<TParams, TOutput>\n      : never);\n\n/**\n * getFullQuery gets a FullQuery given a TaskQuery. It converts shorthands (just string or function)\n * to their full form.\n */\nexport function getFullQuery<\n  TParams extends ParamValues | undefined = DefaultParams,\n>(q: TaskQuery<TParams>): FullQuery<TParams> {\n  if (typeof q === \"string\") {\n    return { slug: q };\n  }\n  if (typeof q === \"function\") {\n    if (!(q as unknown as AirplaneFuncMetadata)?.__airplane?.config?.slug) {\n      throw new Error(\"function is not an Airplane task function\");\n    }\n    return { fn: q } as unknown as FunctionQuery<TParams>;\n  }\n  return q as FullQuery<TParams>;\n}\n\n// Mutation\n\n/**\n * FullMutation is a mutation that uses an airplane function or a slug. It is always\n * an object and does not include the shorthands of just slug or just function.\n */\nexport type FullMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = FunctionMutation<TParams, TOutput> | SlugMutation<TParams, TOutput>;\n\n/** FunctionMutation is a mutation that takes an airplane function and params. */\nexport type FunctionMutation<\n  TParams extends ParamValues | undefined,\n  TOutput = DefaultOutput,\n> = (Record<string, never> extends TParams\n  ? {\n      /**\n       * A function returned by airplane.task to execute.\n       * @example\n       * // myTask can be used as fn.\n       * const myTask = airplane.task(async (params) => {...\n       */\n      fn: AirplaneFunc<TParams, TOutput>;\n      params?: TParams;\n      slug?: never;\n    }\n  : {\n      /**\n       * A function returned by airplane.task to execute.\n       * @example\n       * // myTask can be used as fn.\n       * const myTask = airplane.task(async (params) => {...\n       */\n      fn: AirplaneFunc<TParams, TOutput>;\n      params: TParams;\n      slug?: never;\n    }) &\n  MutationHookOptions<TParams, TOutput>;\n\n/** SlugMutation is a mutation that takes a slug and params. */\nexport type SlugMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> = {\n  /** The slug of the task to execute. */\n  slug: string;\n} & MutationHookOptions<TParams, TOutput>;\n\n/**\n * TaskMutation is a mutation that uses an airplane function or a slug. If the task's\n * parameters are optional then it can take a shorthand of a string slug or a function.\n */\nexport type TaskMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n> =\n  | SlugMutation<TParams, TOutput>\n  | string\n  | FunctionMutation<TParams, TOutput>\n  | (Record<string, never> extends TParams\n      ? AirplaneFunc<TParams, TOutput>\n      : never);\n\n/**\n * getFullMutation gets a FullMutation given a TaskMutation.\n * It converts shorthands (just string or function) to their full form.\n */\nexport function getFullMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n>(m: TaskMutation<TParams>): FullMutation<TParams> {\n  if (typeof m === \"string\") {\n    return { slug: m };\n  }\n  if (typeof m === \"function\") {\n    if (!(m as unknown as AirplaneFuncMetadata)?.__airplane?.config?.slug) {\n      throw new Error(\"function is not an Airplane task function\");\n    }\n    return { fn: m } as unknown as FunctionMutation<TParams>;\n  }\n  return m as FullMutation<TParams>;\n}\n\n/**\n * getSlug takes a full query or mutation and returns the task slug.\n */\nexport function getSlug<\n  TParams extends ParamValues | undefined = DefaultParams,\n>(fullQuery: FullQuery<TParams> | FullMutation<TParams>): string {\n  if (\"slug\" in fullQuery && fullQuery.slug != null) {\n    return fullQuery.slug;\n  }\n  const fn = fullQuery.fn;\n  if (!(fn as unknown as AirplaneFuncMetadata)?.__airplane?.config?.slug) {\n    throw new Error(\"function is not an Airplane task function\");\n  }\n  return (fn as unknown as AirplaneFuncMetadata).__airplane.config.slug;\n}\n\n/**\n * getRunbookFullMutation gets a RunbookFullMutation given a RunbookMutation.\n * It converts a shorthand string slug into the full runbook form.\n */\nexport function getRunbookFullMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n>(m: RunbookMutation<TParams>): RunbookFullMutation<TParams> {\n  if (typeof m === \"string\") {\n    return { slug: m };\n  }\n  return m as RunbookFullMutation<TParams>;\n}\n\n/** 4XX errors from executing task or runbook (except for 403 missing execute permissions) */\ntype ClientExecuteError = {\n  message: string;\n  type: \"CLIENT_ERROR\";\n};\n\n/** All other API errors (403 and 5XX errors) */\ntype InternalExecuteError = {\n  message: string;\n  type: \"AIRPLANE_INTERNAL\";\n};\n\n/** Run/session failure errors */\ntype FailedExecuteError = {\n  message: string;\n  type: \"FAILED\";\n};\n\nexport type ExecuteError =\n  | ClientExecuteError\n  | InternalExecuteError\n  | FailedExecuteError;\n\nexport type RunbookSlugMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n> = {\n  slug: string;\n} & RunbookMutationHookOptions<TParams>;\n\nexport type RunbookFullMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n> = RunbookSlugMutation<TParams>;\n\nexport type RunbookMutation<\n  TParams extends ParamValues | undefined = DefaultParams,\n> = RunbookSlugMutation<TParams> | string;\n\nexport type RefetchQuery =\n  | { slug: string; params?: ParamValues }\n  | string\n  | { fn: AirplaneFunc<any>; params?: ParamValues }\n  | AirplaneFunc<any>;\n"],"names":["getFullQuery","q","slug","__airplane","config","Error","fn","getFullMutation","m","getSlug","fullQuery","getRunbookFullMutation"],"mappings":"AAmFO,SAASA,aAEdC,GAA2C;AAFtC;AAGD,MAAA,OAAOA,MAAM,UAAU;AAClB,WAAA;AAAA,MAAEC,MAAMD;AAAAA,IAAAA;AAAAA,EACjB;AACI,MAAA,OAAOA,MAAM,YAAY;AAC3B,QAAI,GAAEA,kCAAuCE,eAAvCF,mBAAmDG,WAAnDH,mBAA2DC,OAAM;AAC/D,YAAA,IAAIG,MAAM,2CAA2C;AAAA,IAC7D;AACO,WAAA;AAAA,MAAEC,IAAIL;AAAAA,IAAAA;AAAAA,EACf;AACOA,SAAAA;AACT;AAsEO,SAASM,gBAEdC,GAAiD;AArF5C;AAsFD,MAAA,OAAOA,MAAM,UAAU;AAClB,WAAA;AAAA,MAAEN,MAAMM;AAAAA,IAAAA;AAAAA,EACjB;AACI,MAAA,OAAOA,MAAM,YAAY;AAC3B,QAAI,GAAEA,kCAAuCL,eAAvCK,mBAAmDJ,WAAnDI,mBAA2DN,OAAM;AAC/D,YAAA,IAAIG,MAAM,2CAA2C;AAAA,IAC7D;AACO,WAAA;AAAA,MAAEC,IAAIE;AAAAA,IAAAA;AAAAA,EACf;AACOA,SAAAA;AACT;AAKO,SAASC,QAEdC,WAA+D;AAvG1D;AAwGL,MAAI,UAAUA,aAAaA,UAAUR,QAAQ,MAAM;AACjD,WAAOQ,UAAUR;AAAAA,EACnB;AACA,QAAMI,KAAKI,UAAUJ;AACrB,MAAI,GAAEA,oCAAwCH,eAAxCG,mBAAoDF,WAApDE,mBAA4DJ,OAAM;AAChE,UAAA,IAAIG,MAAM,2CAA2C;AAAA,EAC7D;AACQC,SAAAA,GAAuCH,WAAWC,OAAOF;AACnE;AAMO,SAASS,uBAEdH,GAA2D;AACvD,MAAA,OAAOA,MAAM,UAAU;AAClB,WAAA;AAAA,MAAEN,MAAMM;AAAAA,IAAAA;AAAAA,EACjB;AACOA,SAAAA;AACT;"}