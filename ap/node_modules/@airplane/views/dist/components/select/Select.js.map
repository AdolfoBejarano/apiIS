{"version":3,"file":"Select.js","sources":["../../../src/components/select/Select.tsx"],"sourcesContent":["import {\n  Select as MantineSelect,\n  SelectItem as MantineSelectItem,\n} from \"@mantine/core\";\nimport type { ParamValues } from \"airplane/api\";\nimport { uniq, flatten } from \"lodash-es\";\nimport { forwardRef, useState } from \"react\";\n\nimport { DefaultOutput, DefaultParams } from \"client\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport {\n  LatestRun,\n  SetLatestRunProps,\n  useSetLatestRunInTaskQuery,\n} from \"components/errorBoundary/LatestRunDetails\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\nimport { Loader } from \"components/loader/Loader\";\nimport { displayTaskBackedError } from \"errors/displayTaskBackedError\";\nimport { useRegisterFormInput } from \"state/components/form/useRegisterFormInput\";\nimport { useInput } from \"state/components/input/useInput\";\nimport { SelectState, useSelectState } from \"state/components/select\";\nimport { SelectTValue } from \"state/components/select/reducer\";\nimport { useComponentId } from \"state/components/useId\";\nimport { useTaskQuery } from \"state/tasks/useTaskQuery\";\n\nimport {\n  SelectComponentProps,\n  SelectItem,\n  ConnectedSelectProps,\n  SelectProps,\n  SelectPropsWithTask,\n} from \"./Select.types\";\n\n// This prefix gets appended to numbers, so that we can represent them as strings\n// internally.\nconst NUMBER_PREFIX = \"__airplane_number__\";\n\nconst defaultProps: Partial<SelectProps> = {\n  searchable: true,\n};\n\nexport const Select = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>(\n  props: SelectProps<TParams, TOutput>,\n) => {\n  const [latestRun, setLatestRun] = useState<LatestRun>();\n  if (doesUseTask<TParams, TOutput>(props)) {\n    return (\n      <ComponentErrorBoundary\n        componentName={Select.displayName}\n        latestRun={latestRun}\n      >\n        <SelectWithTask {...props} setLatestRun={setLatestRun} />\n      </ComponentErrorBoundary>\n    );\n  } else {\n    return (\n      <ComponentErrorBoundary componentName={Select.displayName}>\n        <ConnectedSelect {...props} />\n      </ComponentErrorBoundary>\n    );\n  }\n};\nSelect.displayName = \"Select\";\n\n/**\n * SelectWithTask is a connected select that can directly populate its data from a task.\n */\nconst SelectWithTask = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>({\n  task,\n  outputTransform,\n  setLatestRun,\n  ...restProps\n}: SelectPropsWithTask<TParams, TOutput> & SetLatestRunProps) => {\n  const fullQuery = useSetLatestRunInTaskQuery<TParams>(task, setLatestRun);\n  const { error, loading, output, runID } = useTaskQuery<TParams, TOutput>(\n    fullQuery,\n  );\n\n  const data = output\n    ? outputToData<TParams, TOutput>(output, outputTransform)\n    : [];\n  if (error) {\n    return displayTaskBackedError({\n      error,\n      taskSlug: fullQuery.slug,\n      runID,\n      componentName: \"Select\",\n    });\n  } else {\n    return <ConnectedSelect {...restProps} loading={loading} data={data} />;\n  }\n};\n\n/**\n * ConnectedSelect is a select that's connected to the global component state.\n */\nconst ConnectedSelect = (props: ConnectedSelectProps) => {\n  const id = useComponentId(props.id);\n  const { state, dispatch } = useSelectState(id, {\n    initialState: {\n      disabled: props.disabled ?? props.defaultDisabled,\n      value: props.value ?? props.defaultValue,\n    },\n  });\n  const propsOnChange = props.onChange;\n  const { inputProps } = useInput<SelectTValue, SelectState, string | null>(\n    {\n      ...props,\n      onChange:\n        propsOnChange &&\n        ((v) =>\n          propsOnChange(\n            v !== null ? convertSelectStringToOriginalType(v) : undefined,\n          )),\n    },\n    state,\n    dispatch,\n    (v) => (v !== null ? convertSelectStringToOriginalType(v) : undefined),\n  );\n\n  useRegisterFormInput(id, \"select\");\n\n  const {\n    data,\n    validate: _,\n    onChange: __,\n    defaultDisabled: ___,\n    defaultValue: ____,\n    error: propsError,\n    ...restProps\n  } = props;\n\n  const error = propsError || inputProps.error;\n\n  const newData = data.map((item) => {\n    if (typeof item === \"string\") {\n      return item;\n    } else if (typeof item === \"number\") {\n      return numberToSelectItem(item);\n    } else {\n      return selectItemToMantine(item);\n    }\n  });\n  return (\n    <SelectComponent\n      data={newData}\n      {...defaultProps}\n      {...inputProps}\n      {...restProps}\n      error={error}\n    />\n  );\n};\n\n/**\n * Presentational select component.\n */\nexport const SelectComponent = forwardRef(\n  (props: SelectComponentProps, ref: React.Ref<HTMLInputElement>) => (\n    <SelectComponentWithoutRef {...props} innerRef={ref} />\n  ),\n);\nSelectComponent.displayName = \"SelectComponent\";\n\nexport const SelectComponentWithoutRef = ({\n  loading,\n  data,\n  value,\n  defaultValue,\n  filter,\n  withinPortal,\n  innerRef,\n  unstyled,\n  disabled,\n  ItemComponent,\n  itemComponent,\n  className,\n  style,\n  width,\n  height,\n  grow,\n  ...restProps\n}: SelectComponentProps & { innerRef: React.Ref<HTMLInputElement> }) => {\n  const { classes: layoutClasses, cx } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  const newProps = {\n    data: data as MantineSelectItem[],\n    value: maybeConvertSelectValueToString(value),\n    defaultValue: maybeConvertSelectValueToString(defaultValue),\n    filter: filter\n      ? (value: string, item: MantineSelectItem) => {\n          return filter(value, mantineToSelectItem(item));\n        }\n      : undefined,\n  };\n  return (\n    <MantineSelect\n      withinPortal={withinPortal}\n      ref={innerRef}\n      variant={unstyled ? \"unstyled\" : undefined}\n      className={cx(layoutClasses.style, className)}\n      style={style}\n      itemComponent={ItemComponent || itemComponent}\n      {...newProps}\n      {...restProps}\n      icon={loading && <Loader size=\"xs\" color=\"secondary\" />}\n      disabled={loading || disabled}\n    />\n  );\n};\n\n/**\n * outputToData converts task output to Select data.\n */\nexport function outputToData<TParams extends ParamValues | undefined, TOutput>(\n  output: TOutput,\n  dataTransform?: SelectPropsWithTask<TParams, TOutput>[\"outputTransform\"],\n): SelectComponentProps[\"data\"] {\n  if (!output) {\n    return [];\n  }\n  if (dataTransform) {\n    return dataTransform(output);\n  }\n  if (Array.isArray(output)) {\n    return output;\n  }\n  const unwrappedOutput = unwrapOutput(output);\n  if (unwrappedOutput) {\n    return unwrappedOutput;\n  }\n  return [];\n}\n\nfunction doesUseTask<TParams extends ParamValues | undefined, TOutput>(\n  props: SelectProps<TParams, TOutput>,\n): props is SelectPropsWithTask<TParams, TOutput> {\n  return Boolean((props as SelectPropsWithTask<TParams, TOutput>).task);\n}\n\n/**\n * Unwrap object with one string array entry, e.g. {key: [\"a\", \"b\"]}.\n * @returns The unwrapped object or undefined if the object is not unwrappable\n */\nconst unwrapOutput = (data: unknown): string[] | SelectItem[] | undefined => {\n  if (data && !Array.isArray(data) && typeof data === \"object\") {\n    const keys = Object.keys(data);\n    if (keys.length === 1) {\n      const value = (data as Record<string, unknown>)[keys[0]];\n      if (\n        Array.isArray(value) &&\n        value.every((item: unknown) => typeof item === \"object\")\n      ) {\n        // Unwrap if output is an array of objects with a single key (ie SQL task with one column)\n        const columns = getColumns(value);\n        if (columns.length === 1) {\n          return unwrapSingleColumn(value, columns[0]);\n        }\n        // Unwrap if output is an array of a single object (ie SQL task with one row)\n        if (value.length === 1) {\n          const rowValues = Object.values(value[0]);\n          if (\n            rowValues.every((item: unknown) => typeof item === \"string\") ||\n            rowValues.every((item: unknown) => isSelectItem(item))\n          ) {\n            return rowValues as string[] | SelectItem[];\n          }\n        }\n      }\n      if (\n        Array.isArray(value) &&\n        value.every(\n          (item: unknown) => typeof item === \"string\" || isSelectItem(item),\n        )\n      ) {\n        return value;\n      }\n    }\n  }\n  return undefined;\n};\n\nconst getColumns = (value: Record<string, unknown>[]): string[] => {\n  return uniq(flatten(value.map((row) => Object.keys(row))));\n};\n\nconst unwrapSingleColumn = (\n  value: Record<string, unknown>[],\n  column_name: string,\n): string[] | SelectItem[] | undefined => {\n  const unwrapped = value.map((value) => value[column_name]);\n  if (\n    unwrapped.every((item) => typeof item === \"string\") ||\n    unwrapped.every((item) => isSelectItem(item))\n  ) {\n    return unwrapped as string[] | SelectItem[];\n  }\n  return undefined;\n};\n\nconst isSelectItem = (item: unknown): item is SelectItem =>\n  !Array.isArray(item) &&\n  typeof item === \"object\" &&\n  typeof (item as Record<string, unknown>).value === \"string\";\n\nconst numberToSelectItem = (value: number) => {\n  return { value: convertSelectValueToString(value), label: String(value) };\n};\n\n/**\n * Converts a value that the user wants to put in the select to an internal\n * string representation. Non-strings are converted to strings with special\n * strings prepended.\n */\nconst convertSelectValueToString = (value: string | number): string => {\n  if (typeof value === \"number\") {\n    return NUMBER_PREFIX + String(value);\n  } else {\n    return value;\n  }\n};\nconst maybeConvertSelectValueToString = (\n  value: string | number | undefined,\n): string | null => {\n  if (value === undefined) {\n    return null;\n  }\n  return convertSelectValueToString(value);\n};\n\n/**\n * Converts our internal representation, which is always a string that can be\n * passed to Mantine, back to the original type.\n */\nconst convertSelectStringToOriginalType = (s: string): string | number => {\n  if (s.startsWith(NUMBER_PREFIX)) {\n    return Number(s.substring(NUMBER_PREFIX.length));\n  } else {\n    return s;\n  }\n};\n\n/**\n * The following functions convert between our SelectItem type and Mantine's\n * SelectItem type.\n */\nconst selectItemToMantine = (item: SelectItem): MantineSelectItem => {\n  const { value, ...restFields } = item;\n  return { value: convertSelectValueToString(value), ...restFields };\n};\nconst mantineToSelectItem = (item: MantineSelectItem): SelectItem => {\n  const { value, ...restFields } = item;\n  return { value: convertSelectStringToOriginalType(value), ...restFields };\n};\n"],"names":["NUMBER_PREFIX","defaultProps","searchable","Select","props","latestRun","setLatestRun","useState","doesUseTask","displayName","SelectWithTask","task","outputTransform","restProps","fullQuery","useSetLatestRunInTaskQuery","error","loading","output","runID","useTaskQuery","data","outputToData","displayTaskBackedError","taskSlug","slug","componentName","ConnectedSelect","id","useComponentId","state","dispatch","useSelectState","initialState","disabled","defaultDisabled","value","defaultValue","propsOnChange","onChange","inputProps","useInput","v","convertSelectStringToOriginalType","undefined","useRegisterFormInput","validate","_","__","___","____","propsError","newData","map","item","numberToSelectItem","selectItemToMantine","SelectComponent","ref","SelectComponentWithoutRef","filter","withinPortal","innerRef","unstyled","ItemComponent","itemComponent","className","style","width","height","grow","classes","layoutClasses","cx","useCommonLayoutStyle","newProps","maybeConvertSelectValueToString","mantineToSelectItem","MantineSelect","dataTransform","Array","isArray","unwrappedOutput","unwrapOutput","Boolean","keys","Object","length","every","columns","getColumns","unwrapSingleColumn","rowValues","values","isSelectItem","uniq","flatten","row","column_name","unwrapped","convertSelectValueToString","label","String","s","startsWith","Number","substring","restFields"],"mappings":"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"}