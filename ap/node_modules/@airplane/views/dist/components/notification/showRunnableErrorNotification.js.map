{"version":3,"file":"showRunnableErrorNotification.js","sources":["../../../src/components/notification/showRunnableErrorNotification.tsx"],"sourcesContent":["import { createStyles } from \"@mantine/core\";\n\nimport { Button } from \"components/button/Button\";\nimport { showNotification } from \"components/notification/showNotification\";\nimport { ExecuteError } from \"components/query\";\nimport { sendViewMessage } from \"message/sendViewMessage\";\n\nexport const useStyles = createStyles((theme) => ({\n  messageRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  errorMessage: {\n    paddingRight: theme.spacing.xs,\n    wordBreak: \"break-word\",\n  },\n}));\n\nconst ErrorNotificationMessage = ({\n  error,\n  runID,\n  sessionID,\n  slug,\n}: RunnableErrorNotificationProps) => {\n  const { classes } = useStyles();\n  if (runID && sessionID) {\n    throw Error(\"Cannot set both runID and sessionID\");\n  }\n  let message: string;\n  if (error.type === \"FAILED\") {\n    message = `${runID ? \"Run\" : \"Session\"} failed ${\n      slug ? `for ${slug}` : \"\"\n    }`;\n  } else {\n    message = error.message;\n  }\n\n  return (\n    <div className={classes.messageRoot}>\n      <span className={classes.errorMessage}>{message}</span>\n      {(runID || sessionID) && (\n        <Button\n          size=\"xs\"\n          variant=\"subtle\"\n          disableFocusRing\n          onClick={() =>\n            sendViewMessage({\n              type: \"debug_panel\",\n              open: true,\n              activeTab: \"activity\",\n              runID,\n              sessionID,\n            })\n          }\n        >\n          {`Open ${runID ? \"run\" : \"session\"}`}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport type RunnableErrorNotificationProps = {\n  error: ExecuteError;\n  runID?: string;\n  sessionID?: string;\n  slug?: string;\n};\n\nexport const showRunnableErrorNotification = ({\n  error,\n  runID,\n  sessionID,\n  slug,\n}: RunnableErrorNotificationProps) => {\n  return showNotification({\n    title: \"Error\",\n    message: (\n      <ErrorNotificationMessage\n        error={error}\n        runID={runID}\n        sessionID={sessionID}\n        slug={slug}\n      />\n    ),\n    type: \"error\",\n  });\n};\n"],"names":["useStyles","createStyles","theme","messageRoot","display","justifyContent","alignItems","errorMessage","paddingRight","spacing","xs","wordBreak","ErrorNotificationMessage","error","runID","sessionID","slug","classes","Error","message","type","sendViewMessage","open","activeTab","showRunnableErrorNotification","showNotification","title"],"mappings":";;;;;AAOaA,MAAAA,YAAYC,aAAcC,CAAW,WAAA;AAAA,EAChDC,aAAa;AAAA,IACXC,SAAS;AAAA,IACTC,gBAAgB;AAAA,IAChBC,YAAY;AAAA,EACd;AAAA,EACAC,cAAc;AAAA,IACZC,cAAcN,MAAMO,QAAQC;AAAAA,IAC5BC,WAAW;AAAA,EACb;AACF,EAAE;AAEF,MAAMC,2BAA2BA,CAAC;AAAA,EAChCC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAC8B,MAAM;AAC9B,QAAA;AAAA,IAAEC;AAAAA,MAAYjB,UAAU;AAC9B,MAAIc,SAASC,WAAW;AACtB,UAAMG,MAAM,qCAAqC;AAAA,EACnD;AACIC,MAAAA;AACAN,MAAAA,MAAMO,SAAS,UAAU;AAChB,cAAA,GAAEN,QAAQ,QAAQ,SAAU,WACrCE,OAAQ,OAAMA,IAAK,KAAI,EACxB;AAAA,EAAA,OACI;AACLG,cAAUN,MAAMM;AAAAA,EAClB;AAEA,SACG,qBAAA,OAAA,EAAI,WAAWF,QAAQd,aACtB,UAAA;AAAA,IAAA,oBAAC,QAAK,EAAA,WAAWc,QAAQV,cAAeY,UAAQ,SAAA;AAAA,KAC9CL,SAASC,cACR,oBAAA,QAAA,EACC,MAAK,MACL,SAAQ,UACR,kBAAgB,MAChB,SAAS,MACPM,gBAAgB;AAAA,MACdD,MAAM;AAAA,MACNE,MAAM;AAAA,MACNC,WAAW;AAAA,MACXT;AAAAA,MACAC;AAAAA,IAAAA,CACD,GAGD,UAAA,QAAOD,QAAQ,QAAQ,SAAU,IACrC;AAAA,EAEJ,EAAA,CAAA;AAEJ;AASO,MAAMU,gCAAgCA,CAAC;AAAA,EAC5CX;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAC8B,MAAM;AACpC,SAAOS,iBAAiB;AAAA,IACtBC,OAAO;AAAA,IACPP,SACG,oBAAA,0BAAA,EACC,OACA,OACA,WACA,MAEH;AAAA,IACDC,MAAM;AAAA,EAAA,CACP;AACH;"}