/// <reference types="react" />
import { SliderProps } from "./Slider.types";
type StyleParams = {
    hasMarks: boolean;
    hasLabel: boolean;
};
export declare const useStyles: (params: StyleParams, options?: import("@mantine/core").UseStylesOptions<string> | undefined) => {
    classes: {
        slider: string;
        markLabel: string;
        label: string;
    };
    cx: (...args: any) => string;
    theme: import("@mantine/core").MantineTheme;
};
/** Presentational slider component */
export declare const SliderComponent: import("react").ForwardRefExoticComponent<{
    color?: import("../theme/colors").Color | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    radius?: import("@mantine/core").MantineNumberSize | undefined;
    disabled?: boolean | undefined;
    inverted?: boolean | undefined;
    defaultValue?: number | undefined;
    value?: number | undefined;
    marks?: {
        value: number;
        label?: import("react").ReactNode;
    }[] | undefined;
    max?: number | undefined;
    min?: number | undefined;
    step?: number | undefined;
    label?: import("react").ReactNode;
    error?: import("react").ReactNode;
    valueLabel?: import("react").ReactNode | ((value: number) => import("react").ReactNode);
    valueLabelDisplay?: import("./Slider.types").ValueLabelDisplayOption | undefined;
    onChange?: ((value: number) => void) | undefined;
    onChangeEnd?: ((value: number) => void) | undefined;
} & import("../layout/layout.types").CommonLayoutProps & import("../styling.types").CommonStylingProps & {
    required?: boolean | undefined;
} & import("react").RefAttributes<HTMLInputElement>>;
export declare const Slider: import("react").ForwardRefExoticComponent<{
    id?: string | undefined;
    defaultValue?: number | undefined;
    defaultDisabled?: boolean | undefined;
} & import("../../state/components/input/types").InputProps<import("../../state/components/number-input/reducer").NumberInputTValue, import("../../state/components/number-input/reducer").NumberInputTValue> & {
    color?: import("../theme/colors").Color | undefined;
    size?: "sm" | "md" | "lg" | undefined;
    radius?: import("@mantine/core").MantineNumberSize | undefined;
    disabled?: boolean | undefined;
    inverted?: boolean | undefined;
    defaultValue?: number | undefined;
    value?: number | undefined;
    marks?: {
        value: number;
        label?: import("react").ReactNode;
    }[] | undefined;
    max?: number | undefined;
    min?: number | undefined;
    step?: number | undefined;
    label?: import("react").ReactNode;
    error?: import("react").ReactNode;
    valueLabel?: import("react").ReactNode | ((value: number) => import("react").ReactNode);
    valueLabelDisplay?: import("./Slider.types").ValueLabelDisplayOption | undefined;
    onChange?: ((value: number) => void) | undefined;
    onChangeEnd?: ((value: number) => void) | undefined;
} & import("../layout/layout.types").CommonLayoutProps & import("../styling.types").CommonStylingProps & import("react").RefAttributes<HTMLInputElement>>;
export declare const SliderWithoutRef: (props: SliderProps & {
    innerRef: React.Ref<HTMLInputElement>;
}) => import("react/jsx-runtime").JSX.Element;
export {};
