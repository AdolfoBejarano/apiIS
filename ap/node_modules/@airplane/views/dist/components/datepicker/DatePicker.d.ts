import React, { Ref } from "react";
import { DatePickerProps, DatePickerComponentProps } from "./DatePicker.types";
export declare const DatePickerComponent: React.ForwardRefExoticComponent<{
    placeholder?: string | undefined;
    label?: React.ReactNode;
    description?: React.ReactNode;
    error?: React.ReactNode;
    disabled?: boolean | undefined;
    size?: import("@mantine/core").MantineSize | undefined;
    onChange?: ((value: import("../../state/components/datepicker/reducer").DatePickerTValue) => void) | undefined;
    value?: import("../../state/components/datepicker/reducer").DatePickerTValue;
    radius?: import("@mantine/core").MantineSize | undefined;
    initiallyOpened?: boolean | undefined;
    excludeDate?: ((date: Date) => boolean) | undefined;
    clearable?: boolean | undefined;
    onDropdownClose?: (() => void) | undefined;
    variant?: "unstyled" | "default" | undefined;
    autoFocus?: boolean | undefined;
    withinPortal?: boolean | undefined;
    classNames?: Partial<Record<import("@mantine/dates").DatePickerStylesNames, string>> | undefined;
} & import("../layout/layout.types").CommonLayoutProps & import("../styling.types").CommonStylingProps & {
    closeCalendarOnChange?: boolean | undefined;
} & React.RefAttributes<HTMLInputElement>>;
export declare const DatePicker: React.ForwardRefExoticComponent<{
    id?: string | undefined;
    defaultValue?: Date | undefined;
    defaultDisabled?: boolean | undefined;
} & import("../../state/components/input/types").InputProps<import("../../state/components/datepicker/reducer").DatePickerTValue, import("../../state/components/datepicker/reducer").DatePickerTValue> & Omit<DatePickerComponentProps, "withinPortal"> & React.RefAttributes<HTMLInputElement>>;
export declare const DatePickerWithoutRef: (props: DatePickerProps & {
    innerRef: Ref<HTMLInputElement>;
}) => import("react/jsx-runtime").JSX.Element;
