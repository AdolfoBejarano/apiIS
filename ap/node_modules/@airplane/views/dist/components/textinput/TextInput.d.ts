import { ChangeEvent, Ref } from "react";
import * as React from "react";
import { TextInputComponentProps, TextInputProps } from "./TextInput.types";
export declare const TextInputComponent: React.ForwardRefExoticComponent<{
    placeholder?: string | undefined;
    label?: React.ReactNode;
    description?: React.ReactNode;
    error?: React.ReactNode;
    disabled?: boolean | undefined;
    size?: import("@mantine/core").MantineSize | undefined;
    radius?: import("@mantine/core").MantineSize | undefined;
    value?: string | undefined;
    onChange?: ((e: ChangeEvent<HTMLInputElement>) => void) | undefined;
    icon?: React.ReactNode;
    variant?: "unstyled" | "default" | undefined;
    sx?: import("@mantine/core").CSSObject | undefined;
    styles?: import("@mantine/core").Styles<import("@mantine/core").TextInputStylesNames, Record<string, any>> | undefined;
} & import("../layout/layout.types").CommonLayoutProps & import("../styling.types").CommonStylingProps & Omit<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "error" | "value" | "ref" | "size" | "styles" | "variant" | "sx" | "label" | "placeholder" | "onChange" | "radius" | keyof import("../layout/layout.types").CommonLayoutProps | keyof import("../styling.types").CommonStylingProps | "disabled" | "description" | "icon"> & React.RefAttributes<HTMLInputElement>>;
export declare const TextInput: React.ForwardRefExoticComponent<{
    id?: string | undefined;
    defaultValue?: string | undefined;
    defaultDisabled?: boolean | undefined;
} & import("../../state/components/input/types").InputProps<string, ChangeEvent<HTMLInputElement>> & Omit<TextInputComponentProps, "styles" | "defaultValue" | "id" | "defaultDisabled"> & React.RefAttributes<HTMLInputElement>>;
export declare const TextInputWithoutRef: (props: TextInputProps & {
    innerRef: React.Ref<HTMLInputElement>;
}) => import("react/jsx-runtime").JSX.Element;
