{"version":3,"file":"Form.js","sources":["../../../src/components/form/Form.tsx"],"sourcesContent":["import { HTTPError } from \"@airplane/lib\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport json5 from \"json5\";\nimport { useContext, useMemo, useState } from \"react\";\n\nimport { DefaultOutput } from \"client\";\nimport {\n  PERMISSIONS_GET,\n  RUNBOOKS_GET,\n  TASKS_GET_TASK_REVIEWERS,\n} from \"client/endpoints\";\nimport { executeRunbook } from \"client/executeRunbook\";\nimport { executeTask } from \"client/executeTask\";\nimport { Fetcher } from \"client/fetcher\";\nimport { TaskOrRunbookReviewersResponse, Parameter } from \"client/types\";\nimport { Button } from \"components/button/Button\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\nimport { Loader } from \"components/loader/Loader\";\nimport { showNotification } from \"components/notification/showNotification\";\nimport { showRunnableErrorNotification } from \"components/notification/showRunnableErrorNotification\";\nimport { ExecuteError, getFullQuery, getSlug } from \"components/query\";\nimport { RequestDialogContext } from \"components/requestDialog/RequestDialogProvider\";\nimport { Stack } from \"components/stack/Stack\";\nimport { Text } from \"components/text/Text\";\nimport { Tooltip } from \"components/tooltip/Tooltip\";\nimport { FormProvider } from \"state/components/form/FormProvider\";\nimport { FormInputs, useFormInputs } from \"state/components/form/useFormInputs\";\nimport { useFormState } from \"state/components/form/useFormState\";\nimport { useComponentId } from \"state/components/useId\";\nimport { useRefetchTasks } from \"state/tasks/useRefetchTask\";\n\nimport {\n  FieldOption,\n  FormBaseProps,\n  FormProps,\n  FormWithRunnableProps,\n  RunbookOptions,\n  State,\n  TaskOptions,\n} from \"./Form.types\";\nimport { ParameterInput, validateParameterOptions } from \"./parameters\";\n\nexport const Form = <TOutput = DefaultOutput,>({\n  id: propId,\n  children,\n  ...props\n}: FormProps<TOutput>) => {\n  const id = useComponentId(propId);\n  return (\n    <ComponentErrorBoundary componentName={Form.displayName}>\n      <FormProvider>\n        {\"task\" in props || \"runbook\" in props ? (\n          <FormWithRunnable<TOutput> id={id} {...props}>\n            {children}\n          </FormWithRunnable>\n        ) : (\n          <InnerForm id={id} {...props}>\n            {children}\n          </InnerForm>\n        )}\n      </FormProvider>\n    </ComponentErrorBoundary>\n  );\n};\n\nForm.displayName = \"Form\";\n\nconst FormWithRunnable = <TOutput,>({\n  children,\n  onSubmit,\n  beforeSubmitTransform,\n  disabled,\n  task,\n  runbook,\n  ...props\n}: FormWithRunnableProps<TOutput>) => {\n  if (task && runbook) {\n    throw new Error(\"form cannot be backed by both task and runbook\");\n  }\n  const runnableDef = task || runbook!;\n  const opts: TaskOptions<TOutput> | RunbookOptions = useMemo(\n    () =>\n      typeof runnableDef === \"string\"\n        ? { slug: runnableDef }\n        : typeof runnableDef === \"function\"\n        ? { slug: getSlug(getFullQuery(runnableDef)) }\n        : \"fn\" in runnableDef\n        ? { ...runnableDef, slug: getSlug(getFullQuery(runnableDef.fn)) }\n        : runnableDef,\n    [runnableDef],\n  );\n  const prefix = `${props.id}.`;\n  const requestDialogContext = useContext(RequestDialogContext);\n  const getRunnableEndpoint = task ? TASKS_GET_TASK_REVIEWERS : RUNBOOKS_GET;\n  const [loading, setLoading] = useState(false);\n  const refetchTasks = useRefetchTasks();\n\n  const { data: permissionsData, status: permissionsStatus } = useQuery(\n    [PERMISSIONS_GET, opts.slug],\n    async () => {\n      const fetcher = new Fetcher();\n      return await fetcher.get<{ resource: Record<string, boolean> }>(\n        PERMISSIONS_GET,\n        {\n          task_slug: task && opts.slug,\n          runbook_slug: runbook && opts.slug,\n          actions: task\n            ? [\"tasks.execute\", \"tasks.request_run\"]\n            : [\"runbooks.execute\", \"trigger_requests.create\"],\n        },\n      );\n    },\n  );\n\n  const {\n    data: runnableData,\n    isLoading: runnableDataIsLoading,\n    error: runnableDataError,\n  } = useQuery<TaskOrRunbookReviewersResponse, HTTPError>(\n    [getRunnableEndpoint, opts.slug],\n    async () => {\n      const fetcher = new Fetcher();\n      return await fetcher.get<TaskOrRunbookReviewersResponse>(\n        getRunnableEndpoint,\n        {\n          taskSlug: task && opts.slug,\n          runbookSlug: runbook && opts.slug,\n        },\n      );\n    },\n  );\n\n  const params =\n    runnableData?.task?.parameters.parameters ||\n    runnableData?.runbook?.parameters.parameters;\n\n  const { values: formValues, setValues: setFormValues } = useFormState(\n    props.id,\n  );\n\n  const paramTypes = useMemo(\n    () =>\n      Object.fromEntries(\n        (params ?? []).map((v) => {\n          return [v.slug, v.type];\n        }),\n      ),\n    [params],\n  );\n\n  const components = useMemo(() => {\n    const visibleParams = params?.filter(\n      (v) =>\n        (!opts.shownFields || opts.shownFields.includes(v.slug)) &&\n        (!opts.hiddenFields || !opts.hiddenFields.includes(v.slug)),\n    );\n\n    const formValuesForRunnable = getParamValues(\n      formValues,\n      paramTypes,\n      opts.fieldOptions,\n      prefix,\n    );\n\n    return visibleParams?.map((param, index) => {\n      const inputID = `${prefix}${param.slug}`;\n      return (\n        <ParameterInput\n          key={index}\n          idPrefix={prefix}\n          param={param}\n          paramValues={formValuesForRunnable}\n          onChange={(value) => {\n            setFormValues({ ...formValues, [inputID]: value });\n          }}\n          value={formValues[inputID]}\n          opt={opts.fieldOptions?.find(\n            (opt: FieldOption) => param.slug === opt.slug,\n          )}\n        />\n      );\n    });\n  }, [\n    params,\n    formValues,\n    setFormValues,\n    opts.fieldOptions,\n    opts.shownFields,\n    opts.hiddenFields,\n    prefix,\n    paramTypes,\n  ]);\n\n  if (runnableDataError) {\n    return (\n      <InnerForm {...props} disabled>\n        <Text color=\"error\">{runnableDataError.message}</Text>\n        {children}\n      </InnerForm>\n    );\n  }\n  if (\n    runnableDataIsLoading ||\n    !runnableData ||\n    permissionsStatus === \"loading\" ||\n    !params\n  ) {\n    return (\n      <InnerForm {...props} disabled>\n        <Loader />\n        {children}\n      </InnerForm>\n    );\n  }\n\n  const error = validateParameterOptions<TOutput>(params, opts);\n  if (error) {\n    return (\n      <InnerForm {...props}>\n        <Text color=\"error\">{error}</Text>\n        {children}\n      </InnerForm>\n    );\n  }\n\n  const { canExecute, canRequest } = task\n    ? processPermissionsQueryResult(\n        permissionsStatus,\n        permissionsData!.resource[\"tasks.execute\"],\n        permissionsData!.resource[\"tasks.request_run\"],\n      )\n    : processPermissionsQueryResult(\n        permissionsStatus,\n        permissionsData!.resource[\"runbooks.execute\"],\n        permissionsData!.resource[\"trigger_requests.create\"],\n      );\n\n  const newOnSubmit = (values: State) => {\n    const valuesWithDefaults = { ...values };\n    // Add back fixed value options. This also happens in getFormValuesForRunnable, but we need to do it here\n    // as well so that the values are available in the onSubmit callback.\n    for (const option of opts.fieldOptions ?? []) {\n      if (option.value !== undefined) {\n        valuesWithDefaults[option.slug] = option.value;\n      }\n    }\n    const paramValues = getParamValues(\n      values,\n      paramTypes,\n      opts.fieldOptions,\n      prefix,\n    );\n\n    const executeRunnable = async () => {\n      setLoading(true);\n      const executeResult: {\n        output?: TOutput;\n        error?: ExecuteError;\n        runID?: string;\n        sessionID?: string;\n      } = task\n        ? await executeTask(opts.slug, \"mutation\", paramValues)\n        : await executeRunbook(opts.slug, \"mutation\", paramValues);\n      if (executeResult.error) {\n        showRunnableErrorNotification({\n          ...executeResult,\n          error: executeResult.error,\n          slug: opts.slug,\n        });\n        setLoading(false);\n        if (\"onError\" in opts) {\n          opts.onError?.(\n            executeResult.output,\n            executeResult.error,\n            executeResult.runID,\n          );\n        }\n      } else {\n        showNotification({\n          title: `Successful ${task ? \"run\" : \"session\"}`,\n          message: opts.slug,\n          type: \"success\",\n        });\n        setLoading(false);\n        if (\"refetchTasks\" in opts && opts.refetchTasks) {\n          refetchTasks(opts.refetchTasks);\n        }\n        if (\n          \"onSuccess\" in opts &&\n          executeResult.runID &&\n          executeResult.output !== undefined\n        ) {\n          opts.onSuccess?.(executeResult.output, executeResult.runID);\n        }\n      }\n    };\n    if (canExecute) {\n      executeRunnable();\n    } else if (canRequest) {\n      requestDialogContext.setState({\n        params: paramValues,\n        taskSlug: task && opts.slug,\n        runbookSlug: runbook && opts.slug,\n        opened: true,\n      });\n    }\n    onSubmit?.(valuesWithDefaults);\n  };\n\n  const newBeforeSubmitTransform = (rawFormValues: State) => {\n    const valuesWithoutPrefix = getValuesWithoutPrefix(rawFormValues, prefix);\n\n    return beforeSubmitTransform\n      ? beforeSubmitTransform(valuesWithoutPrefix)\n      : valuesWithoutPrefix;\n  };\n\n  const disabledBecauseOfPermissions = !canRequest && !canExecute;\n  const isDisabled = disabled || disabledBecauseOfPermissions;\n  return (\n    <InnerForm\n      submitting={loading}\n      disabled={isDisabled}\n      disabledMessage={\n        disabledBecauseOfPermissions\n          ? \"Missing request and execute permissions\"\n          : undefined\n      }\n      onSubmit={newOnSubmit}\n      beforeSubmitTransform={newBeforeSubmitTransform}\n      {...props}\n    >\n      {components}\n      {children}\n    </InnerForm>\n  );\n};\n\nconst InnerForm = ({\n  id,\n  children,\n  submitText = \"Submit\",\n  onSubmit,\n  beforeSubmitTransform,\n  resetOnSubmit = true,\n  disabled,\n  disabledMessage,\n  submitting,\n  className,\n  style,\n  width,\n  height,\n  grow,\n}: FormBaseProps & {\n  disabledMessage?: string;\n}) => {\n  const formInputs = useFormInputs();\n  const { values } = useFormState(id);\n  const { classes: layoutClasses, cx } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  return (\n    <form\n      style={style}\n      className={cx(layoutClasses.style, className)}\n      onSubmit={(e) => {\n        if (!hasErrors(formInputs)) {\n          if (resetOnSubmit) {\n            resetInputs(formInputs);\n          }\n          setShowErrors(formInputs, false);\n          onSubmit?.(\n            beforeSubmitTransform ? beforeSubmitTransform(values) : values,\n          );\n        } else {\n          setShowErrors(formInputs, true);\n        }\n        e.preventDefault();\n      }}\n      noValidate\n    >\n      <Stack>\n        {children}\n        <Stack direction=\"row\" justify=\"end\">\n          <Tooltip\n            label={disabledMessage}\n            wrapper=\"div\"\n            disabled={!disabledMessage}\n          >\n            <Button\n              type=\"submit\"\n              loading={submitting}\n              disabled={\n                disabled || !!disabledMessage || isButtonDisabled(formInputs)\n              }\n            >\n              {submitText}\n            </Button>\n          </Tooltip>\n        </Stack>\n      </Stack>\n    </form>\n  );\n};\n\nconst setShowErrors = (formInputs: FormInputs, showErrors: boolean) => {\n  for (const { state } of Object.values(formInputs)) {\n    state.setShowErrors(showErrors);\n  }\n};\n\nconst resetInputs = (formInputs: FormInputs) => {\n  for (const { state } of Object.values(formInputs)) {\n    state.reset();\n  }\n};\n\nconst hasErrors = (formInputs: FormInputs) =>\n  Object.values(formInputs).some((state) => state.state.errors.length > 0);\n\nconst isButtonDisabled = (formInputs: FormInputs) =>\n  Object.values(formInputs).some(\n    (state) => state.state.errors.length > 0 && state.state.showErrors,\n  );\n\nfunction processPermissionsQueryResult(\n  status: string,\n  apiCanExecute: boolean,\n  apiCanRequest: boolean,\n): { canExecute: boolean; canRequest: boolean } {\n  let canExecute = true;\n  let canRequest = false;\n  if (status === \"success\") {\n    canExecute = apiCanExecute;\n    canRequest = apiCanRequest;\n  }\n  return { canExecute, canRequest };\n}\n\nconst getValuesWithoutPrefix = (values: State, prefix: string) => {\n  const maybeRemovePrefix = (k: string) =>\n    k.startsWith(prefix) ? k.substring(prefix.length) : k;\n\n  const valuesWithoutPrefix = Object.fromEntries(\n    Object.entries(values).map(([k, v]) => [maybeRemovePrefix(k), v]),\n  );\n\n  return valuesWithoutPrefix;\n};\n\n/** Gets param values that can be passed into a task execution from form state values. */\nconst getParamValues = (\n  values: State,\n  paramTypes: Record<string, Parameter[\"type\"]>,\n  fieldOptions: FieldOption[] | undefined,\n  prefix: string,\n) => {\n  // Make shallow copy of formValues\n  const formValues = getValuesWithoutPrefix(values, prefix);\n  // Add back fixed value options\n  for (const option of fieldOptions ?? []) {\n    if (option.value !== undefined) {\n      formValues[option.slug] = option.value;\n    }\n  }\n  const paramValues = Object.fromEntries(\n    Object.entries(formValues)\n      // Get rid of extraneous entries\n      .filter(([key, _]) => {\n        return key in paramTypes;\n      })\n      // Extract the first element of file inputs\n      .map(([key, val]) => {\n        if (paramTypes[key] === \"upload\") {\n          const fileVal = val as File | File[];\n          return [key, Array.isArray(fileVal) ? fileVal[0] : fileVal];\n        } else if (paramTypes[key] === \"json\") {\n          try {\n            if (Array.isArray(val)) {\n              return [key, val.map((v) => json5.parse(v as string))];\n            }\n            return [key, json5.parse(val as string)];\n          } catch {\n            return [key, val];\n          }\n        } else {\n          return [key, val];\n        }\n      }),\n  );\n\n  return paramValues;\n};\n"],"names":["Form","id","propId","children","props","useComponentId","displayName","FormWithRunnable","onSubmit","beforeSubmitTransform","disabled","task","runbook","Error","runnableDef","opts","useMemo","slug","getSlug","getFullQuery","fn","prefix","requestDialogContext","useContext","RequestDialogContext","getRunnableEndpoint","TASKS_GET_TASK_REVIEWERS","RUNBOOKS_GET","loading","setLoading","useState","refetchTasks","useRefetchTasks","data","permissionsData","status","permissionsStatus","useQuery","PERMISSIONS_GET","fetcher","Fetcher","get","task_slug","runbook_slug","actions","runnableData","isLoading","runnableDataIsLoading","error","runnableDataError","taskSlug","runbookSlug","params","parameters","values","formValues","setValues","setFormValues","useFormState","paramTypes","Object","fromEntries","map","v","type","components","visibleParams","filter","shownFields","includes","hiddenFields","formValuesForRunnable","getParamValues","fieldOptions","param","index","inputID","value","find","opt","message","validateParameterOptions","canExecute","canRequest","processPermissionsQueryResult","resource","newOnSubmit","valuesWithDefaults","option","undefined","paramValues","executeRunnable","executeResult","executeTask","executeRunbook","onError","output","runID","title","onSuccess","setState","opened","newBeforeSubmitTransform","rawFormValues","valuesWithoutPrefix","getValuesWithoutPrefix","disabledBecauseOfPermissions","isDisabled","InnerForm","submitText","resetOnSubmit","disabledMessage","submitting","className","style","width","height","grow","formInputs","useFormInputs","classes","layoutClasses","cx","useCommonLayoutStyle","e","hasErrors","resetInputs","setShowErrors","preventDefault","isButtonDisabled","showErrors","state","reset","some","errors","length","apiCanExecute","apiCanRequest","maybeRemovePrefix","k","startsWith","substring","entries","key","_","val","fileVal","Array","isArray","json5","parse"],"mappings":"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"}