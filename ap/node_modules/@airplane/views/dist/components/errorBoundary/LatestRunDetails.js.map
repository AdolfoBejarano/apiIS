{"version":3,"file":"LatestRunDetails.js","sources":["../../../src/components/errorBoundary/LatestRunDetails.tsx"],"sourcesContent":["import { createStyles } from \"@mantine/core\";\nimport { useCallback } from \"react\";\n\nimport { DefaultParams, ParamValues } from \"client\";\nimport { ButtonComponent } from \"components/button/Button\";\nimport { CalloutComponent } from \"components/callout/Callout\";\nimport { CodeInput } from \"components/codeinput/CodeInput\";\nimport { HeadingComponent } from \"components/heading/Heading\";\nimport { XCircleIconMini } from \"components/icon\";\nimport { ExecuteError, getFullQuery } from \"components/query\";\nimport { TaskQuery } from \"components/query\";\nimport { StackComponent } from \"components/stack/Stack\";\nimport { sendViewMessage } from \"message/sendViewMessage\";\n\nconst useStyles = createStyles((theme) => ({\n  runBadge: {\n    borderRadius: theme.radius.md,\n    backgroundColor: theme.colors.gray[1],\n    color: theme.colors.gray[6],\n    fontFamily: theme.fontFamilyMonospace,\n    fontSize: theme.fontSizes.xs,\n    fontWeight: 700,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 10,\n    paddingRight: 10,\n    border: \"none\",\n    transition: \"background-color 0.2s\",\n    \"&:hover\": { backgroundColor: theme.colors.gray[2] },\n  },\n  header: { display: \"flex\", gap: 6, alignItems: \"center\" },\n  callout: { whiteSpace: \"pre-wrap\" },\n}));\n\nexport type LatestRun = {\n  runID?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  output?: any;\n  error?: ExecuteError;\n};\n\nexport const LatestRunDetails = ({ runID, output, error }: LatestRun) => {\n  const { classes } = useStyles();\n\n  return (\n    <StackComponent spacing=\"sm\">\n      <div className={classes.header}>\n        <HeadingComponent level={5}>Latest run</HeadingComponent>\n        {runID && (\n          <ButtonComponent\n            compact\n            className={classes.runBadge}\n            onClick={() =>\n              sendViewMessage({\n                type: \"debug_panel\",\n                open: true,\n                activeTab: \"activity\",\n                runID,\n              })\n            }\n          >\n            #{runID}\n          </ButtonComponent>\n        )}\n      </div>\n      {error && (\n        <CalloutComponent\n          icon={<XCircleIconMini color=\"red.4\" />}\n          variant=\"error\"\n          title={\n            error.type === \"FAILED\"\n              ? \"Run failed with error\"\n              : \"Internal error occured\"\n          }\n          className={classes.callout}\n        >\n          {error.message}\n        </CalloutComponent>\n      )}\n      {output && (\n        <CodeInput\n          value={JSON.stringify(output, null, 2)}\n          foldGutter\n          lineNumbers\n          language=\"json\"\n          disabled\n          style={{ maxHeight: 230 }}\n        />\n      )}\n    </StackComponent>\n  );\n};\n\nexport type SetLatestRunProps = {\n  setLatestRun?: (run?: LatestRun) => void;\n};\n\n/**\n * useSetLatestRunInTaskQuery is a hook that sets the latest run ID in a task's\n * onSuccess and onError. Used internally to get run information in a\n * task-backed component's error boundary.\n */\nexport const useSetLatestRunInTaskQuery = <\n  TParams extends ParamValues | undefined = DefaultParams,\n>(\n  task: TaskQuery<TParams>,\n  setLatestRun?: (run: LatestRun) => void,\n) => {\n  const fullQuery = getFullQuery(task);\n  const fullQueryOnSuccess = fullQuery.onSuccess;\n  const fullQueryOnError = fullQuery.onError;\n  fullQuery.onSuccess = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (output: any, runID: string) => {\n      fullQueryOnSuccess?.(output, runID);\n      setLatestRun?.({ output, runID });\n    },\n    [fullQueryOnSuccess, setLatestRun],\n  );\n\n  fullQuery.onError = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (output: any, error: ExecuteError, runID?: string) => {\n      fullQueryOnError?.(output, error, runID);\n      setLatestRun?.({ output, error, runID });\n    },\n    [fullQueryOnError, setLatestRun],\n  );\n  return fullQuery;\n};\n"],"names":["useStyles","createStyles","theme","runBadge","borderRadius","radius","md","backgroundColor","colors","gray","color","fontFamily","fontFamilyMonospace","fontSize","fontSizes","xs","fontWeight","paddingTop","paddingBottom","paddingLeft","paddingRight","border","transition","header","display","gap","alignItems","callout","whiteSpace","LatestRunDetails","runID","output","error","classes","sendViewMessage","type","open","activeTab","message","JSON","stringify","maxHeight","useSetLatestRunInTaskQuery","task","setLatestRun","fullQuery","getFullQuery","fullQueryOnSuccess","onSuccess","fullQueryOnError","onError","useCallback"],"mappings":";;;;;;;;;;;AAcA,MAAMA,YAAYC,aAAcC,CAAW,WAAA;AAAA,EACzCC,UAAU;AAAA,IACRC,cAAcF,MAAMG,OAAOC;AAAAA,IAC3BC,iBAAiBL,MAAMM,OAAOC,KAAK,CAAC;AAAA,IACpCC,OAAOR,MAAMM,OAAOC,KAAK,CAAC;AAAA,IAC1BE,YAAYT,MAAMU;AAAAA,IAClBC,UAAUX,MAAMY,UAAUC;AAAAA,IAC1BC,YAAY;AAAA,IACZC,YAAY;AAAA,IACZC,eAAe;AAAA,IACfC,aAAa;AAAA,IACbC,cAAc;AAAA,IACdC,QAAQ;AAAA,IACRC,YAAY;AAAA,IACZ,WAAW;AAAA,MAAEf,iBAAiBL,MAAMM,OAAOC,KAAK,CAAC;AAAA,IAAE;AAAA,EACrD;AAAA,EACAc,QAAQ;AAAA,IAAEC,SAAS;AAAA,IAAQC,KAAK;AAAA,IAAGC,YAAY;AAAA,EAAS;AAAA,EACxDC,SAAS;AAAA,IAAEC,YAAY;AAAA,EAAW;AACpC,EAAE;AASK,MAAMC,mBAAmBA,CAAC;AAAA,EAAEC;AAAAA,EAAOC;AAAAA,EAAQC;AAAiB,MAAM;AACjE,QAAA;AAAA,IAAEC;AAAAA,MAAYjC,UAAU;AAG5B,SAAA,qBAAC,gBAAe,EAAA,SAAQ,MACtB,UAAA;AAAA,IAAC,qBAAA,OAAA,EAAI,WAAWiC,QAAQV,QACtB,UAAA;AAAA,MAAC,oBAAA,kBAAA,EAAiB,OAAO,GAAG,UAAU,cAAA;AAAA,MACrCO,SACE,qBAAA,iBAAA,EACC,SAAO,MACP,WAAWG,QAAQ9B,UACnB,SAAS,MACP+B,gBAAgB;AAAA,QACdC,MAAM;AAAA,QACNC,MAAM;AAAA,QACNC,WAAW;AAAA,QACXP;AAAAA,MACD,CAAA,GACF,UAAA;AAAA,QAAA;AAAA,QAECA;AAAAA,MAAAA,GACJ;AAAA,IAAA,GAEJ;AAAA,IACCE,6BACE,kBACC,EAAA,0BAAO,iBAAgB,EAAA,OAAM,YAC7B,SAAQ,SACR,OACEA,MAAMG,SAAS,WACX,0BACA,0BAEN,WAAWF,QAAQN,SAElBK,UAAAA,MAAMM,QACT,CAAA;AAAA,IAEDP,UACE,oBAAA,WAAA,EACC,OAAOQ,KAAKC,UAAUT,QAAQ,MAAM,CAAC,GACrC,YAAU,MACV,aAAW,MACX,UAAS,QACT,UAAQ,MACR,OAAO;AAAA,MAAEU,WAAW;AAAA,IAAA,GAEvB;AAAA,EACH,EAAA,CAAA;AAEJ;AAWaC,MAAAA,6BAA6B,CAGxCC,MACAC,iBACG;AACGC,QAAAA,YAAYC,aAAaH,IAAI;AACnC,QAAMI,qBAAqBF,UAAUG;AACrC,QAAMC,mBAAmBJ,UAAUK;AACnCL,YAAUG,YAAYG;AAAAA;AAAAA,IAEpB,CAACpB,QAAaD,UAAkB;AAC9BiB,+DAAqBhB,QAAQD;AACd,mDAAA;AAAA,QAAEC;AAAAA,QAAQD;AAAAA,MAAAA;AAAAA,IAC3B;AAAA,IACA,CAACiB,oBAAoBH,YAAY;AAAA,EAAA;AAGnCC,YAAUK,UAAUC;AAAAA;AAAAA,IAElB,CAACpB,QAAaC,OAAqBF,UAAmB;AACjCC,2DAAAA,QAAQC,OAAOF;AACnB,mDAAA;AAAA,QAAEC;AAAAA,QAAQC;AAAAA,QAAOF;AAAAA,MAAAA;AAAAA,IAClC;AAAA,IACA,CAACmB,kBAAkBL,YAAY;AAAA,EAAA;AAE1BC,SAAAA;AACT;"}