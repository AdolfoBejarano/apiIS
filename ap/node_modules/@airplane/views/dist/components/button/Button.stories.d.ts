/// <reference types="react" />
export declare const mockDataExecute: ({
    url: string;
    method: string;
    status: number;
    response: {};
} | {
    url: string;
    method: string;
    status: number;
    response: {
        resource: {
            "tasks.execute": boolean;
            "tasks.request_run": boolean;
        };
    };
})[];
declare const _default: import("@storybook/types").ComponentAnnotations<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export default _default;
export declare const Default: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Primary: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Secondary: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Tertiary: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Danger: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Subtle: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const OverridePreset: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Loading: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const FullWidth: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const Link: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const LoadingLink: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const WithIcon: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const WithConfirmation: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const WithConfirmationAndOptions: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("./Button.types").ButtonProps<import("airplane/api").ParamValues | undefined, unknown> & {
    ref?: import("react").Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}>;
export declare const ExecuteTask: () => import("react/jsx-runtime").JSX.Element;
export declare const RequestTask: {
    (): import("react/jsx-runtime").JSX.Element;
    parameters: {
        mockData: ({
            url: string;
            method: string;
            status: number;
            response: {};
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                resource: {
                    "tasks.execute": boolean;
                    "tasks.request_run": boolean;
                };
                task?: undefined;
                reviewers?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                task: {
                    name: string;
                    requireExplicitPermissions: boolean;
                    triggers: {
                        kind: string;
                        triggerID: string;
                    }[];
                };
                reviewers: never[];
                resource?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                triggerRequestID: string;
                resource?: undefined;
                task?: undefined;
                reviewers?: undefined;
            };
        })[];
    };
};
export declare const RequestTaskWithConfirmation: {
    (): import("react/jsx-runtime").JSX.Element;
    parameters: {
        mockData: ({
            url: string;
            method: string;
            status: number;
            response: {};
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                resource: {
                    "tasks.execute": boolean;
                    "tasks.request_run": boolean;
                };
                task?: undefined;
                reviewers?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                task: {
                    name: string;
                    requireExplicitPermissions: boolean;
                    triggers: {
                        kind: string;
                        triggerID: string;
                    }[];
                };
                reviewers: never[];
                resource?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                triggerRequestID: string;
                resource?: undefined;
                task?: undefined;
                reviewers?: undefined;
            };
        })[];
    };
};
export declare const RequestTaskDisabled: {
    (): import("react/jsx-runtime").JSX.Element;
    parameters: {
        mockData: ({
            url: string;
            method: string;
            status: number;
            response: {};
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                resource: {
                    "tasks.execute": boolean;
                    "tasks.request_run": boolean;
                };
            };
        })[];
    };
};
export declare const RequestRunbook: {
    (): import("react/jsx-runtime").JSX.Element;
    parameters: {
        mockData: ({
            url: string;
            method: string;
            status: number;
            response: {
                results: ({
                    user: null;
                    group: {
                        id: string;
                        name: string;
                    };
                } | {
                    user: {
                        userID: string;
                        name: string;
                        avatarURL: string;
                    };
                    group: null;
                })[];
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                resource: {
                    "runbooks.execute": boolean;
                    "trigger_requests.create": boolean;
                };
                runbook?: undefined;
                reviewers?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                runbook: {
                    name: string;
                    isPrivate: boolean;
                    triggers: {
                        kind: string;
                        triggerID: string;
                    }[];
                };
                reviewers: never[];
                resource?: undefined;
                triggerRequestID?: undefined;
            };
        } | {
            url: string;
            method: string;
            status: number;
            response: {
                triggerRequestID: string;
                resource?: undefined;
                runbook?: undefined;
                reviewers?: undefined;
            };
        })[];
    };
};
export declare const ButtonVariantsAndColors: () => import("react/jsx-runtime").JSX.Element;
