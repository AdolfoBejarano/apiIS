import * as React from "react";
import { ReactElement, Ref } from "react";
import { DefaultOutput, DefaultParams, ParamValues } from "../../client";
import { ButtonComponentProps, ButtonProps } from "./Button.types";
export declare const Button: <TParams extends ParamValues | undefined = DefaultParams, TOutput = any>(props: ButtonProps<TParams, TOutput> & {
    ref?: React.Ref<HTMLAnchorElement | HTMLButtonElement> | undefined;
}) => ReactElement;
export declare function ButtonWithoutRef<TParams extends ParamValues | undefined = DefaultParams, TOutput = DefaultOutput>(props: ButtonProps<TParams, TOutput> & {
    innerRef: React.Ref<HTMLAnchorElement | HTMLButtonElement>;
}): import("react/jsx-runtime").JSX.Element;
/**
 * UnconnectedButton is a task-aware button that is not connected to the global component state.
 *
 * This should be used sparingly - mostly for buttons that are created dynamically within other components.
 * */
export declare function UnconnectedButton<TParams extends ParamValues | undefined = DefaultParams, TOutput = DefaultOutput>(props: ButtonProps<TParams, TOutput>): import("react/jsx-runtime").JSX.Element;
/**
 * Presentational button component
 */
export declare const ButtonComponent: React.ForwardRefExoticComponent<ButtonComponentProps & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>>;
