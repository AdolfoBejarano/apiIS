{"version":3,"file":"RadioGroup.js","sources":["../../../src/components/radioGroup/RadioGroup.tsx"],"sourcesContent":["import { Radio as MantineRadio, createStyles } from \"@mantine/core\";\nimport type { ParamValues } from \"airplane/api\";\nimport { useState } from \"react\";\n\nimport { DefaultOutput, DefaultParams } from \"client\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport {\n  LatestRun,\n  SetLatestRunProps,\n  useSetLatestRunInTaskQuery,\n} from \"components/errorBoundary/LatestRunDetails\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\nimport { Text } from \"components/text/Text\";\nimport { displayTaskBackedError } from \"errors/displayTaskBackedError\";\nimport { useRegisterFormInput } from \"state/components/form/useRegisterFormInput\";\nimport { useInput } from \"state/components/input/useInput\";\nimport { useRadioGroupState } from \"state/components/radio-group\";\nimport { RadioGroupTValue } from \"state/components/radio-group/reducer\";\nimport { useComponentId } from \"state/components/useId\";\nimport { useTaskQuery } from \"state/tasks/useTaskQuery\";\n\nimport {\n  RadioGroupComponentProps,\n  ConnectedRadioGroupProps,\n  RadioGroupProps,\n  RadioGroupPropsWithTask,\n  RadioGroupItem,\n} from \"./RadioGroup.types\";\n\nexport const useStyles = createStyles((theme) => {\n  const focusRingRGB = theme.fn.variant({\n    variant: \"filled\",\n    color: \"primary\",\n  }).background;\n  return {\n    radio: {\n      \"&:focus\": {\n        ...theme.fn.focusStyles()[\"&:focus\"],\n        outline: `2px solid ${focusRingRGB}`,\n      },\n      \"&:focus:not(:focus-visible)\": {\n        ...theme.fn.focusStyles()[\"&:focus\"],\n        outline: `2px solid ${focusRingRGB}`,\n      },\n    },\n    label: { color: theme.colors.gray[7] },\n  };\n});\n\nexport const RadioGroup = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>(\n  props: RadioGroupProps<TParams, TOutput>,\n) => {\n  const [latestRun, setLatestRun] = useState<LatestRun>();\n\n  if (doesUseTask<TParams, TOutput>(props)) {\n    return (\n      <ComponentErrorBoundary\n        componentName={RadioGroup.displayName}\n        latestRun={latestRun}\n      >\n        <RadioGroupWithTask {...props} setLatestRun={setLatestRun} />\n      </ComponentErrorBoundary>\n    );\n  } else {\n    return (\n      <ComponentErrorBoundary componentName={RadioGroup.displayName}>\n        <ConnectedRadioGroup {...props} />{\" \"}\n      </ComponentErrorBoundary>\n    );\n  }\n};\nRadioGroup.displayName = \"RadioGroup\";\n\n/**\n * RadioGroupWithTask is a connected radio group that can directly populate its data from a task.\n */\nconst RadioGroupWithTask = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>({\n  task,\n  outputTransform,\n  setLatestRun,\n  ...restProps\n}: RadioGroupPropsWithTask<TParams, TOutput> & SetLatestRunProps) => {\n  const fullQuery = useSetLatestRunInTaskQuery<TParams>(task, setLatestRun);\n  const { error, loading, output, runID } = useTaskQuery<TParams, TOutput>(\n    fullQuery,\n  );\n\n  const data = output\n    ? outputToData<TParams, TOutput>(output, outputTransform)\n    : [];\n\n  if (error) {\n    return displayTaskBackedError({\n      error,\n      taskSlug: fullQuery.slug,\n      runID,\n      componentName: \"RadioGroup\",\n    });\n  } else {\n    return <ConnectedRadioGroup {...restProps} loading={loading} data={data} />;\n  }\n};\n\n/**\n * ConnectedRadioGroup is a radio group that's connected to the global component state.\n */\nconst ConnectedRadioGroup = (props: ConnectedRadioGroupProps) => {\n  const id = useComponentId(props.id);\n  const { state, dispatch } = useRadioGroupState(id, {\n    initialState: {\n      disabled: props.disabled ?? props.defaultDisabled,\n      value: props.value ?? props.defaultValue,\n    },\n  });\n  const { inputProps } = useInput(\n    props,\n    state,\n    dispatch,\n    (v: RadioGroupTValue) => v,\n  );\n\n  useRegisterFormInput(id, \"radio-group\");\n\n  const {\n    validate: _,\n    onChange: __,\n    defaultDisabled: ___,\n    defaultValue: ____,\n    ...restProps\n  } = props;\n  return <RadioGroupComponent {...inputProps} {...restProps} />;\n};\n\n/**\n * Presentational radio group component.\n *\n * Passes through to the Mantine Radio.Group component.\n */\nconst RadioGroupComponent = ({\n  loading,\n  data,\n  disabled,\n  className,\n  style,\n  width,\n  height,\n  grow,\n  ...restProps\n}: RadioGroupComponentProps) => {\n  const { classes } = useStyles();\n  const { classes: layoutClasses, cx } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  if (loading) {\n    return <Text disableMarkdown>Loading...</Text>;\n  }\n  const radioGroupData = data.map((datum) => {\n    if (typeof datum === \"string\") {\n      return { value: datum };\n    }\n    return datum;\n  });\n  return (\n    <MantineRadio.Group\n      className={cx(layoutClasses.style, className)}\n      style={style}\n      {...restProps}\n    >\n      {radioGroupData.map((item, idx) => {\n        return (\n          <MantineRadio\n            classNames={classes}\n            key={idx}\n            value={item.value}\n            label={item.label ?? item.value}\n            disabled={disabled || item.disabled}\n          />\n        );\n      })}\n    </MantineRadio.Group>\n  );\n};\n\n/**\n * outputToData converts task output to Radio data.\n */\nfunction outputToData<TParams extends ParamValues | undefined, TOutput>(\n  output: TOutput,\n  dataTransform?: RadioGroupPropsWithTask<TParams, TOutput>[\"outputTransform\"],\n): RadioGroupComponentProps[\"data\"] {\n  if (!output) {\n    return [];\n  }\n  if (dataTransform) {\n    return dataTransform(output);\n  }\n  if (Array.isArray(output)) {\n    return output;\n  }\n  const unwrappedOutput = unwrapOutput(output);\n  if (unwrappedOutput) {\n    return unwrappedOutput;\n  }\n  return [];\n}\n\nfunction doesUseTask<TParams extends ParamValues | undefined, TOutput>(\n  props: RadioGroupProps<TParams, TOutput>,\n): props is RadioGroupPropsWithTask<TParams, TOutput> {\n  return Boolean((props as RadioGroupPropsWithTask<TParams, TOutput>).task);\n}\n\n/**\n * Unwrap object with one string array entry, e.g. {key: [\"a\", \"b\"]}.\n * @returns The unwrapped object or null if the object is not unwrappable\n */\nconst unwrapOutput = (data: unknown): string[] | RadioGroupItem[] | null => {\n  if (data && !Array.isArray(data) && typeof data === \"object\") {\n    const keys = Object.keys(data);\n    if (keys.length === 1) {\n      const value = (data as Record<string, unknown>)[keys[0]];\n      if (\n        Array.isArray(value) &&\n        value.every(\n          (item: unknown) => typeof item === \"string\" || isRadio(item),\n        )\n      ) {\n        return value;\n      }\n    }\n  }\n  return null;\n};\n\nconst isRadio = (item: unknown): item is RadioGroupItem =>\n  !Array.isArray(item) &&\n  typeof item === \"object\" &&\n  typeof (item as Record<string, unknown>).value === \"string\";\n"],"names":["useStyles","createStyles","theme","focusRingRGB","fn","variant","color","background","radio","focusStyles","outline","label","colors","gray","RadioGroup","props","latestRun","setLatestRun","useState","doesUseTask","displayName","RadioGroupWithTask","task","outputTransform","restProps","fullQuery","useSetLatestRunInTaskQuery","error","loading","output","runID","useTaskQuery","data","outputToData","displayTaskBackedError","taskSlug","slug","componentName","ConnectedRadioGroup","id","useComponentId","state","dispatch","useRadioGroupState","initialState","disabled","defaultDisabled","value","defaultValue","inputProps","useInput","v","useRegisterFormInput","validate","_","onChange","__","___","____","RadioGroupComponent","className","style","width","height","grow","classes","layoutClasses","cx","useCommonLayoutStyle","radioGroupData","map","datum","MantineRadio","item","idx","dataTransform","Array","isArray","unwrappedOutput","unwrapOutput","Boolean","keys","Object","length","every","isRadio"],"mappings":";;;;;;;;;;;;;AA6BaA,MAAAA,YAAYC,aAAcC,CAAU,UAAA;AACzCC,QAAAA,eAAeD,MAAME,GAAGC,QAAQ;AAAA,IACpCA,SAAS;AAAA,IACTC,OAAO;AAAA,EACR,CAAA,EAAEC;AACI,SAAA;AAAA,IACLC,OAAO;AAAA,MACL,WAAW;AAAA,QACT,GAAGN,MAAME,GAAGK,YAAAA,EAAc,SAAS;AAAA,QACnCC,SAAU,aAAYP,YAAa;AAAA,MACrC;AAAA,MACA,+BAA+B;AAAA,QAC7B,GAAGD,MAAME,GAAGK,YAAAA,EAAc,SAAS;AAAA,QACnCC,SAAU,aAAYP,YAAa;AAAA,MACrC;AAAA,IACF;AAAA,IACAQ,OAAO;AAAA,MAAEL,OAAOJ,MAAMU,OAAOC,KAAK,CAAC;AAAA,IAAE;AAAA,EAAA;AAEzC,CAAC;AAEYC,MAAAA,aAAa,CAIxBC,UACG;AACH,QAAM,CAACC,WAAWC,YAAY,IAAIC,SAAoB;AAElDC,MAAAA,YAA8BJ,KAAK,GAAG;AAEtC,WAAA,oBAAC,wBACC,EAAA,eAAeD,WAAWM,aAC1B,WAEA,UAAA,oBAAC,oBAAuBL,EAAAA,GAAAA,OAAO,aAAA,CAA2B,EAC5D,CAAA;AAAA,EAAA,OAEG;AACL,WACG,qBAAA,wBAAA,EAAuB,eAAeD,WAAWM,aAChD,UAAA;AAAA,MAAC,oBAAA,qBAAA,EAAoB,GAAIL,OAAM;AAAA,MAAI;AAAA,IACrC,EAAA,CAAA;AAAA,EAEJ;AACF;AACAD,WAAWM,cAAc;AAKzB,MAAMC,qBAAqB,CAGzB;AAAA,EACAC;AAAAA,EACAC;AAAAA,EACAN;AAAAA,EACA,GAAGO;AAC0D,MAAM;AAC7DC,QAAAA,YAAYC,2BAAoCJ,MAAML,YAAY;AAClE,QAAA;AAAA,IAAEU;AAAAA,IAAOC;AAAAA,IAASC;AAAAA,IAAQC;AAAAA,EAAAA,IAAUC,aACxCN,SACF;AAEA,QAAMO,OAAOH,SACTI,aAA+BJ,QAAQN,eAAe,IACtD;AAEJ,MAAII,OAAO;AACT,WAAOO,uBAAuB;AAAA,MAC5BP;AAAAA,MACAQ,UAAUV,UAAUW;AAAAA,MACpBN;AAAAA,MACAO,eAAe;AAAA,IAAA,CAChB;AAAA,EAAA,OACI;AACL,WAAQ,oBAAA,qBAAA,KAAwBb,WAAW,SAAkB,KAAc,CAAA;AAAA,EAC7E;AACF;AAKA,MAAMc,sBAAsBA,CAACvB,UAAoC;AACzDwB,QAAAA,KAAKC,eAAezB,MAAMwB,EAAE;AAC5B,QAAA;AAAA,IAAEE;AAAAA,IAAOC;AAAAA,EAAAA,IAAaC,mBAAmBJ,IAAI;AAAA,IACjDK,cAAc;AAAA,MACZC,UAAU9B,MAAM8B,YAAY9B,MAAM+B;AAAAA,MAClCC,OAAOhC,MAAMgC,SAAShC,MAAMiC;AAAAA,IAC9B;AAAA,EAAA,CACD;AACK,QAAA;AAAA,IAAEC;AAAAA,EAAAA,IAAeC,SACrBnC,OACA0B,OACAC,UACA,CAACS,MAAwBA,CAC3B;AAEAC,uBAAqBb,IAAI,aAAa;AAEhC,QAAA;AAAA,IACJc,UAAUC;AAAAA,IACVC,UAAUC;AAAAA,IACVV,iBAAiBW;AAAAA,IACjBT,cAAcU;AAAAA,IACd,GAAGlC;AAAAA,EACDT,IAAAA;AACJ,SAAQ,oBAAA,qBAAA,EAAwBkC,GAAAA,YAAY,GAAIzB,UAAa,CAAA;AAC/D;AAOA,MAAMmC,sBAAsBA,CAAC;AAAA,EAC3B/B;AAAAA,EACAI;AAAAA,EACAa;AAAAA,EACAe;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,GAAGxC;AACqB,MAAM;AACxB,QAAA;AAAA,IAAEyC;AAAAA,MAAYjE,UAAU;AACxB,QAAA;AAAA,IAAEiE,SAASC;AAAAA,IAAeC;AAAAA,MAAOC,qBAAqB;AAAA,IAC1DN;AAAAA,IACAC;AAAAA,IACAC;AAAAA,EAAAA,CACD;AACD,MAAIpC,SAAS;AACX,WAAQ,oBAAA,MAAA,EAAK,iBAAe,MAAC,UAAU,aAAA,CAAA;AAAA,EACzC;AACMyC,QAAAA,iBAAiBrC,KAAKsC,IAAKC,CAAU,UAAA;AACrC,QAAA,OAAOA,UAAU,UAAU;AACtB,aAAA;AAAA,QAAExB,OAAOwB;AAAAA,MAAAA;AAAAA,IAClB;AACOA,WAAAA;AAAAA,EAAAA,CACR;AACD,6BACGC,MAAa,OAAb,EACC,WAAWL,GAAGD,cAAcL,OAAOD,SAAS,GAC5C,OACIpC,GAAAA,WAEH6C,yBAAeC,IAAI,CAACG,MAAMC,QAAQ;AACjC,+BACGF,OACC,EAAA,YAAYP,SAEZ,OAAOQ,KAAK1B,OACZ,OAAO0B,KAAK9D,SAAS8D,KAAK1B,OAC1B,UAAUF,YAAY4B,KAAK5B,YAHtB6B,GAIL;AAAA,EAEL,CAAA,EACH,CAAA;AAEJ;AAKA,SAASzC,aACPJ,QACA8C,eACkC;AAClC,MAAI,CAAC9C,QAAQ;AACX,WAAO;EACT;AACA,MAAI8C,eAAe;AACjB,WAAOA,cAAc9C,MAAM;AAAA,EAC7B;AACI+C,MAAAA,MAAMC,QAAQhD,MAAM,GAAG;AAClBA,WAAAA;AAAAA,EACT;AACMiD,QAAAA,kBAAkBC,aAAalD,MAAM;AAC3C,MAAIiD,iBAAiB;AACZA,WAAAA;AAAAA,EACT;AACA,SAAO;AACT;AAEA,SAAS3D,YACPJ,OACoD;AAC7CiE,SAAAA,QAASjE,MAAoDO,IAAI;AAC1E;AAMA,MAAMyD,eAAeA,CAAC/C,SAAsD;AACtEA,MAAAA,QAAQ,CAAC4C,MAAMC,QAAQ7C,IAAI,KAAK,OAAOA,SAAS,UAAU;AACtDiD,UAAAA,OAAOC,OAAOD,KAAKjD,IAAI;AACzBiD,QAAAA,KAAKE,WAAW,GAAG;AACrB,YAAMpC,QAASf,KAAiCiD,KAAK,CAAC,CAAC;AACvD,UACEL,MAAMC,QAAQ9B,KAAK,KACnBA,MAAMqC,MACJ,CAACX,SAAkB,OAAOA,SAAS,YAAYY,QAAQZ,IAAI,CAC7D,GACA;AACO1B,eAAAA;AAAAA,MACT;AAAA,IACF;AAAA,EACF;AACO,SAAA;AACT;AAEA,MAAMsC,UAAUA,CAACZ,SACf,CAACG,MAAMC,QAAQJ,IAAI,KACnB,OAAOA,SAAS,YAChB,OAAQA,KAAiC1B,UAAU;"}