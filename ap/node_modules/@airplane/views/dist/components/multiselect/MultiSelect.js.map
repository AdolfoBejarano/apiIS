{"version":3,"file":"MultiSelect.js","sources":["../../../src/components/multiselect/MultiSelect.tsx"],"sourcesContent":["import {\n  MultiSelect as MantineMultiSelect,\n  SelectItem as MantineMultiSelectItem,\n} from \"@mantine/core\";\nimport type { ParamValues } from \"airplane/api\";\nimport { forwardRef, useState } from \"react\";\n\nimport { DefaultOutput, DefaultParams } from \"client\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport {\n  LatestRun,\n  SetLatestRunProps,\n  useSetLatestRunInTaskQuery,\n} from \"components/errorBoundary/LatestRunDetails\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\nimport { Loader } from \"components/loader/Loader\";\nimport { displayTaskBackedError } from \"errors/displayTaskBackedError\";\nimport { useRegisterFormInput } from \"state/components/form/useRegisterFormInput\";\nimport { useInput } from \"state/components/input/useInput\";\nimport {\n  MultiSelectState,\n  useMultiSelectState,\n} from \"state/components/multiselect\";\nimport { MultiSelectTValue } from \"state/components/multiselect/reducer\";\nimport { useComponentId } from \"state/components/useId\";\nimport { useTaskQuery } from \"state/tasks/useTaskQuery\";\n\nimport {\n  MultiSelectComponentProps,\n  MultiSelectItem,\n  ConnectedMultiSelectProps,\n  MultiSelectProps,\n  MultiSelectPropsWithTask,\n} from \"./MultiSelect.types\";\n\n// This prefix gets appended to numbers, so that we can represent them as strings\n// internally.\nconst NUMBER_PREFIX = \"__airplane_number__\";\n\nconst defaultProps: Partial<MultiSelectProps> = {\n  searchable: true,\n};\n\nexport const MultiSelect = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>(\n  props: MultiSelectProps<TParams, TOutput>,\n) => {\n  const [latestRun, setLatestRun] = useState<LatestRun>();\n\n  if (doesUseTask<TParams, TOutput>(props)) {\n    return (\n      <ComponentErrorBoundary\n        componentName={MultiSelect.displayName}\n        latestRun={latestRun}\n      >\n        <MultiSelectWithTask {...props} setLatestRun={setLatestRun} />\n      </ComponentErrorBoundary>\n    );\n  } else {\n    return (\n      <ComponentErrorBoundary componentName={MultiSelect.displayName}>\n        <ConnectedMultiSelect {...props} />\n      </ComponentErrorBoundary>\n    );\n  }\n};\n\nMultiSelect.displayName = \"MultiSelect\";\n\n/**\n * MultiSelectWithTask is a connected multiselect that can directly populate its data from a task.\n */\nconst MultiSelectWithTask = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>({\n  task,\n  outputTransform,\n  setLatestRun,\n  ...restProps\n}: MultiSelectPropsWithTask<TParams, TOutput> & SetLatestRunProps) => {\n  const fullQuery = useSetLatestRunInTaskQuery<TParams>(task, setLatestRun);\n  const { error, loading, output, runID } = useTaskQuery<TParams, TOutput>(\n    fullQuery,\n  );\n\n  const data = output\n    ? outputToData<TParams, TOutput>(output, outputTransform)\n    : [];\n\n  if (error) {\n    return displayTaskBackedError({\n      error,\n      taskSlug: fullQuery.slug,\n      runID,\n      componentName: \"MultiSelect\",\n    });\n  } else {\n    return (\n      <ConnectedMultiSelect {...restProps} loading={loading} data={data} />\n    );\n  }\n};\n\n/**\n * ConnectedMultiSelect is a multiselect that's connected to the global component state.\n */\nconst ConnectedMultiSelect = (props: ConnectedMultiSelectProps) => {\n  const id = useComponentId(props.id);\n  const { state, dispatch } = useMultiSelectState(id, {\n    initialState: {\n      disabled: props.disabled ?? props.defaultDisabled,\n      value: props.value ?? props.defaultValue,\n    },\n  });\n  const propsOnChange = props.onChange;\n  const { inputProps } = useInput<\n    MultiSelectTValue,\n    MultiSelectState,\n    string[]\n  >(\n    {\n      ...props,\n      onChange:\n        propsOnChange &&\n        ((v) =>\n          propsOnChange(\n            v.map((vs) => convertMultiSelectStringToOriginalType(vs)),\n          )),\n    },\n    state,\n    dispatch,\n    (v) => v.map((vs) => convertMultiSelectStringToOriginalType(vs)),\n  );\n\n  useRegisterFormInput(id, \"multi-select\");\n\n  const {\n    data,\n    validate: _,\n    onChange: __,\n    defaultDisabled: ___,\n    defaultValue: ____,\n    error: propsError,\n    ...restProps\n  } = props;\n\n  const error = propsError || inputProps.error;\n\n  const newData = data.map((item) => {\n    if (typeof item === \"string\") {\n      return item;\n    } else if (typeof item === \"number\") {\n      return numberToMultiSelectItem(item);\n    } else {\n      return multiSelectItemToMantine(item);\n    }\n  });\n  return (\n    <MultiSelectComponent\n      data={newData}\n      {...defaultProps}\n      {...inputProps}\n      {...restProps}\n      error={error}\n    />\n  );\n};\n\n/**\n * Presentational multiselect component.\n */\nexport const MultiSelectComponent = forwardRef(\n  (props: MultiSelectComponentProps, ref: React.Ref<HTMLInputElement>) => (\n    <MultiSelectComponentWithoutRef {...props} innerRef={ref} />\n  ),\n);\nMultiSelectComponent.displayName = \"MultiSelectComponent\";\n\nexport const MultiSelectComponentWithoutRef = ({\n  loading,\n  data,\n  value,\n  defaultValue,\n  filter,\n  withinPortal,\n  innerRef,\n  unstyled,\n  ItemComponent,\n  itemComponent,\n  disabled,\n  className,\n  style,\n  width,\n  height,\n  grow,\n  ...restProps\n}: MultiSelectComponentProps & { innerRef: React.Ref<HTMLInputElement> }) => {\n  const { classes: layoutClasses, cx } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  const newProps = {\n    data: data as MantineMultiSelectItem[],\n    value: value?.map((vs) => convertMultiSelectValueToString(vs)),\n    defaultValue: defaultValue?.map((vs) =>\n      convertMultiSelectValueToString(vs),\n    ),\n    filter: filter\n      ? (value: string, selected: boolean, item: MantineMultiSelectItem) => {\n          return filter(value, selected, mantineToMultiSelectItem(item));\n        }\n      : undefined,\n  };\n  return (\n    <MantineMultiSelect\n      withinPortal={withinPortal}\n      ref={innerRef}\n      variant={unstyled ? \"unstyled\" : undefined}\n      className={cx(layoutClasses.style, className)}\n      style={style}\n      itemComponent={ItemComponent || itemComponent}\n      {...newProps}\n      {...restProps}\n      icon={loading && <Loader size=\"xs\" color=\"secondary\" />}\n      disabled={disabled || loading}\n    />\n  );\n};\n\n/**\n * outputToData converts task output to MultiSelect data.\n */\nfunction outputToData<TParams extends ParamValues | undefined, TOutput>(\n  output: TOutput,\n  dataTransform?: MultiSelectPropsWithTask<TParams, TOutput>[\"outputTransform\"],\n): MultiSelectComponentProps[\"data\"] {\n  if (!output) {\n    return [];\n  }\n  if (dataTransform) {\n    return dataTransform(output);\n  }\n  if (Array.isArray(output)) {\n    return output;\n  }\n  const unwrappedOutput = unwrapOutput(output);\n  if (unwrappedOutput) {\n    return unwrappedOutput;\n  }\n  return [];\n}\n\nfunction doesUseTask<TParams extends ParamValues | undefined, TOutput>(\n  props: MultiSelectProps<TParams, TOutput>,\n): props is MultiSelectPropsWithTask<TParams, TOutput> {\n  return Boolean((props as MultiSelectPropsWithTask<TParams, TOutput>).task);\n}\n\n/**\n * Unwrap object with one string array entry, e.g. {key: [\"a\", \"b\"]}.\n * @returns The unwrapped object or undefined if the object is not unwrappable\n */\nconst unwrapOutput = (\n  data: unknown,\n): string[] | MultiSelectItem[] | undefined => {\n  if (data && !Array.isArray(data) && typeof data === \"object\") {\n    const keys = Object.keys(data);\n    if (keys.length === 1) {\n      const value = (data as Record<string, unknown>)[keys[0]];\n      if (\n        Array.isArray(value) &&\n        value.every(\n          (item: unknown) =>\n            typeof item === \"string\" || isMultiSelectItem(item),\n        )\n      ) {\n        return value;\n      }\n    }\n  }\n  return undefined;\n};\n\nconst isMultiSelectItem = (item: unknown): item is MultiSelectItem =>\n  !Array.isArray(item) &&\n  typeof item === \"object\" &&\n  typeof (item as Record<string, unknown>).value === \"string\";\n\nconst numberToMultiSelectItem = (value: number) => {\n  return {\n    value: convertMultiSelectValueToString(value),\n    label: String(value),\n  };\n};\n\n/**\n * Converts a value that the user wants to put in the multiselect to an internal\n * string representation. Non-strings are converted to strings with special\n * strings prepended.\n */\nconst convertMultiSelectValueToString = (value: string | number): string => {\n  if (typeof value === \"number\") {\n    return NUMBER_PREFIX + String(value);\n  } else {\n    return value;\n  }\n};\n\n/**\n * Converts our internal representation, which is always a string that can be\n * passed to Mantine, back to the original type.\n */\nconst convertMultiSelectStringToOriginalType = (s: string): string | number => {\n  if (s.startsWith(NUMBER_PREFIX)) {\n    return Number(s.substring(NUMBER_PREFIX.length));\n  } else {\n    return s;\n  }\n};\n\n/**\n * The following functions convert between our MultiSelectItem type and Mantine's\n * MultiSelectItem type.\n */\nconst multiSelectItemToMantine = (\n  item: MultiSelectItem,\n): MantineMultiSelectItem => {\n  const { value, ...restFields } = item;\n  return { value: convertMultiSelectValueToString(value), ...restFields };\n};\nconst mantineToMultiSelectItem = (\n  item: MantineMultiSelectItem,\n): MultiSelectItem => {\n  const { value, ...restFields } = item;\n  return {\n    value: convertMultiSelectStringToOriginalType(value),\n    ...restFields,\n  };\n};\n"],"names":["NUMBER_PREFIX","defaultProps","searchable","MultiSelect","props","latestRun","setLatestRun","useState","doesUseTask","displayName","MultiSelectWithTask","task","outputTransform","restProps","fullQuery","useSetLatestRunInTaskQuery","error","loading","output","runID","useTaskQuery","data","outputToData","displayTaskBackedError","taskSlug","slug","componentName","ConnectedMultiSelect","id","useComponentId","state","dispatch","useMultiSelectState","initialState","disabled","defaultDisabled","value","defaultValue","propsOnChange","onChange","inputProps","useInput","v","map","vs","convertMultiSelectStringToOriginalType","useRegisterFormInput","validate","_","__","___","____","propsError","newData","item","numberToMultiSelectItem","multiSelectItemToMantine","MultiSelectComponent","ref","MultiSelectComponentWithoutRef","filter","withinPortal","innerRef","unstyled","ItemComponent","itemComponent","className","style","width","height","grow","classes","layoutClasses","cx","useCommonLayoutStyle","newProps","convertMultiSelectValueToString","selected","mantineToMultiSelectItem","undefined","MantineMultiSelect","dataTransform","Array","isArray","unwrappedOutput","unwrapOutput","Boolean","keys","Object","length","every","isMultiSelectItem","label","String","s","startsWith","Number","substring","restFields"],"mappings":"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"}