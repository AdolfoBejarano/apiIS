{"version":3,"file":"ChartComponent.js","sources":["../../../src/components/chart/ChartComponent.tsx"],"sourcesContent":["import { createStyles } from \"@mantine/core\";\nimport Plotly, { Data } from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nimport { Heading } from \"components/heading/Heading\";\nimport { Loader } from \"components/loader/Loader\";\nimport { Label } from \"components/text/Text\";\n\nimport { buildLayout } from \"./buildLayout\";\nimport { ChartProps } from \"./Chart.types\";\nimport { useCommonLayoutStyle } from \"../layout/useCommonLayoutStyle\";\n\nconst Plot = createPlotlyComponent(Plotly);\n\ntype ChartComponentProps = ChartProps & {\n  normalizedData: Data[];\n  onSelected?: (event: Plotly.PlotSelectionEvent) => void;\n  onDeselect?: () => void;\n};\nconst DEFAULT_HEIGHT = \"384px\";\n\nconst useStyles = createStyles(\n  (\n    _theme,\n    {\n      width,\n      height,\n    }: {\n      width: ChartComponentProps[\"width\"];\n      height: ChartComponentProps[\"height\"];\n    },\n  ) => ({\n    wrapper: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      rowGap: \"0.5rem\",\n      width: \"100%\",\n    },\n    plot: {\n      width: \"100%\",\n      height: \"100%\",\n    },\n    loadingContainer: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      // If the container's width is set, fill it. If not, use a fixed width.\n      width: width != null ? \"100%\" : 500,\n      height: \"100%\",\n      // If the container's height is not set, use a fixed height.\n      minHeight: height != null ? undefined : DEFAULT_HEIGHT,\n    },\n    errorLabel: {\n      // If the container's width/height is set, fill it. If not, use a fixed width/height.\n      width: width != null ? \"100%\" : 500,\n      height: \"100%\",\n      // If the container's height is not set, use a fixed height.\n      minHeight: height != null ? undefined : DEFAULT_HEIGHT,\n    },\n  }),\n);\n\n/**\n * Presentational component. Assumes data fetching, wrangling, etc. has been handled.\n */\nconst ChartComponent = ({\n  onSelected,\n  onDeselect,\n  title,\n  normalizedData,\n  className,\n  style,\n  width,\n  height = DEFAULT_HEIGHT,\n  grow,\n  loading,\n  error,\n  ...restProps\n}: ChartComponentProps) => {\n  const { classes, cx } = useStyles({ width, height });\n  const { classes: layoutClasses } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  // Layout controls the visual aspects of the chart.\n  const layout = buildLayout(restProps);\n\n  return (\n    <div style={style} className={cx(classes.wrapper, layoutClasses.style)}>\n      {\n        // Render title using our own component, instead of Plotly's.\n        title ? <Heading level={2}>{title}</Heading> : null\n      }\n      {loading && (\n        <div className={classes.loadingContainer}>\n          <Loader />\n        </div>\n      )}\n      {error && (\n        <Label className={classes.errorLabel} color=\"red\">\n          {error}\n        </Label>\n      )}\n      {!loading && !error && (\n        <Plot\n          onDeselect={onDeselect}\n          onSelected={onSelected}\n          data={normalizedData}\n          layout={layout}\n          useResizeHandler\n          config={{\n            modeBarButtonsToRemove: [\"select2d\", \"lasso2d\"],\n          }}\n          className={classes.plot}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ChartComponent;\n"],"names":["Plot","createPlotlyComponent","Plotly","DEFAULT_HEIGHT","useStyles","createStyles","_theme","width","height","wrapper","display","flexDirection","alignItems","rowGap","plot","loadingContainer","justifyContent","minHeight","undefined","errorLabel","ChartComponent","onSelected","onDeselect","title","normalizedData","className","style","grow","loading","error","restProps","classes","cx","layoutClasses","useCommonLayoutStyle","layout","buildLayout","modeBarButtonsToRemove"],"mappings":";;;;;;;;;AAYA,MAAMA,OAAOC,sBAAsBC,MAAM;AAOzC,MAAMC,iBAAiB;AAEvB,MAAMC,YAAYC,aAChB,CACEC,QACA;AAAA,EACEC;AAAAA,EACAC;AAIF,OACI;AAAA,EACJC,SAAS;AAAA,IACPC,SAAS;AAAA,IACTC,eAAe;AAAA,IACfC,YAAY;AAAA,IACZC,QAAQ;AAAA,IACRN,OAAO;AAAA,EACT;AAAA,EACAO,MAAM;AAAA,IACJP,OAAO;AAAA,IACPC,QAAQ;AAAA,EACV;AAAA,EACAO,kBAAkB;AAAA,IAChBL,SAAS;AAAA,IACTM,gBAAgB;AAAA,IAChBJ,YAAY;AAAA;AAAA,IAEZL,OAAOA,SAAS,OAAO,SAAS;AAAA,IAChCC,QAAQ;AAAA;AAAA,IAERS,WAAWT,UAAU,OAAOU,SAAYf;AAAAA,EAC1C;AAAA,EACAgB,YAAY;AAAA;AAAA,IAEVZ,OAAOA,SAAS,OAAO,SAAS;AAAA,IAChCC,QAAQ;AAAA;AAAA,IAERS,WAAWT,UAAU,OAAOU,SAAYf;AAAAA,EAC1C;AACF,EACF;AAKA,MAAMiB,iBAAiBA,CAAC;AAAA,EACtBC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAnB;AAAAA,EACAC,SAASL;AAAAA,EACTwB;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,GAAGC;AACgB,MAAM;AACnB,QAAA;AAAA,IAAEC;AAAAA,IAASC;AAAAA,MAAO5B,UAAU;AAAA,IAAEG;AAAAA,IAAOC;AAAAA,EAAAA,CAAQ;AAC7C,QAAA;AAAA,IAAEuB,SAASE;AAAAA,MAAkBC,qBAAqB;AAAA,IACtD3B;AAAAA,IACAC;AAAAA,IACAmB;AAAAA,EAAAA,CACD;AAEKQ,QAAAA,SAASC,YAAYN,SAAS;AAEpC,SACG,qBAAA,OAAA;AAAA,IAAI;AAAA,IAAc,WAAWE,GAAGD,QAAQtB,SAASwB,cAAcP,KAAK;AAAA;AAAA,IAGjEH,UAAAA;AAAAA,MAAAA,QAAS,oBAAA,SAAA,EAAQ,OAAO,GAAIA,gBAAM,CAAA,IAAa;AAAA,MAEhDK,+BACE,OAAI,EAAA,WAAWG,QAAQhB,kBACtB,UAAA,oBAAC,UAAM,EACT,CAAA;AAAA,MAEDc,6BACE,OAAM,EAAA,WAAWE,QAAQZ,YAAY,OAAM,OACzCU,UACH,MAAA,CAAA;AAAA,MAED,CAACD,WAAW,CAACC,SACX,oBAAA,MAAA,EACC,YACA,YACA,MAAML,gBACN,QACA,kBAAgB,MAChB,QAAQ;AAAA,QACNa,wBAAwB,CAAC,YAAY,SAAS;AAAA,MAAA,GAEhD,WAAWN,QAAQjB,MAEtB;AAAA,IAAA;AAAA,EAAA,CACH;AAEJ;"}