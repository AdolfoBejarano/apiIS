{"version":3,"file":"useNormalizedData.js","sources":["../../../src/components/chart/useNormalizedData.ts"],"sourcesContent":["import { MantineTheme, useMantineTheme } from \"@mantine/core\";\nimport { Data } from \"plotly.js-basic-dist\";\n\nimport { ChartData, ConnectedChartProps } from \"./Chart.types\";\nimport { Color } from \"../theme/colors\";\n\n/**\n * Imposes an opinionated ordering on the colors to use.\n */\nconst DEFAULT_COLORS: Color[] = [\n  \"blue\",\n  \"lime\",\n  \"orange\",\n  \"teal\",\n  \"yellow\",\n  \"cyan\",\n  \"violet\",\n  \"red\",\n];\n\n/**\n * useNormalizedData accepts multiple input types and returns a standardized Plotly Array<Data>.\n */\nexport const useNormalizedData = (\n  props: ConnectedChartProps,\n  selectionIndexes: Map<string, number[]> = new Map<string, number[]>(),\n): Data[] => {\n  const theme = useMantineTheme();\n  if (!props.data || (Array.isArray(props.data) && props.data.length === 0)) {\n    return [];\n  }\n  switch (props.type) {\n    case \"line\":\n      return seriesData(\n        props,\n        {\n          type: \"scatter\",\n          mode: \"lines+markers\",\n        },\n        selectionIndexes,\n        theme,\n      );\n    case \"scatter\":\n      return seriesData(\n        props,\n        {\n          type: \"scatter\",\n          mode: \"markers\",\n        },\n        selectionIndexes,\n        theme,\n      );\n    case \"bar\":\n      return seriesData(\n        props,\n        {\n          type: \"bar\",\n        },\n        selectionIndexes,\n        theme,\n      );\n    case \"pie\":\n      return pieData(props, theme);\n  }\n};\n\n/**\n * seriesData handles the common x+y charts: bar, line, scatter\n */\nconst seriesData = (\n  props: ConnectedChartProps & { type: \"scatter\" | \"line\" | \"bar\" },\n  plotlyDataOptions: Partial<Data & { type: \"scatter\" | \"bar\" }>,\n  selectionIndexes: Map<string, number[]>,\n  theme: MantineTheme,\n): Data[] => {\n  const xAxis = props.xAxis ?? firstField(props.data);\n  const dataSets = props.datasets ?? fields(props.data).slice(1);\n  const x = pluck(props.data, xAxis);\n  const hasSelection = selectionIndexes.size > 0;\n\n  return dataSets.map((dataSet, idx) => {\n    const colorProp = props.colors?.[dataSet];\n    const color = resolveColor(theme, idx, colorProp);\n    return {\n      type: plotlyDataOptions.type,\n      mode: plotlyDataOptions.mode,\n      x,\n      y: pluck(props.data, dataSet),\n      name: dataSet,\n      selectedpoints: hasSelection\n        ? selectionIndexes.get(dataSet) ?? []\n        : undefined,\n      marker: {\n        color,\n      },\n    };\n  });\n};\n\nconst pieData = (\n  props: ConnectedChartProps & { type: \"pie\" },\n  theme: MantineTheme,\n): Data[] => {\n  // Unlike e.g. line charts, for pieData we only care about one dataset.\n  const dataSet = props.dataset ?? firstField(props.data);\n\n  const colors = (props.colors ?? DEFAULT_COLORS).map((color, idx) =>\n    resolveColor(theme, idx, color),\n  );\n  return [\n    {\n      type: \"pie\",\n      name: dataSet,\n      values: pluck(props.data, dataSet),\n      labels: props.labels,\n      marker: { colors },\n    },\n  ];\n};\n\nconst pluck = <T>(d: ChartData<T>, prop: string) => {\n  if (Array.isArray(d)) {\n    return d.map((v) => v[prop]);\n  } else {\n    return d[prop];\n  }\n};\n\nexport const firstField = <T>(data: ChartData<T>) => {\n  return fields(data)[0];\n};\n\nconst fields = <T>(data: ChartData<T>) =>\n  Array.isArray(data) ? Object.keys(data[0]) : Object.keys(data);\n\nconst resolveColor = (\n  theme: MantineTheme,\n  idx: number,\n  color?: string,\n): string => {\n  const colorIndex = 6;\n  if (!color) {\n    return theme.colors[DEFAULT_COLORS[idx]][colorIndex];\n  }\n  if (!theme.colors[color]) {\n    // Assume this is a custom color like rgb(1, 2, 3)\n    return color;\n  }\n  return theme.colors[color][colorIndex];\n};\n"],"names":["DEFAULT_COLORS","useNormalizedData","props","selectionIndexes","Map","theme","useMantineTheme","data","Array","isArray","length","type","seriesData","mode","pieData","plotlyDataOptions","xAxis","firstField","dataSets","datasets","fields","slice","x","pluck","hasSelection","size","map","dataSet","idx","colorProp","colors","color","resolveColor","y","name","selectedpoints","get","undefined","marker","dataset","values","labels","d","prop","v","Object","keys","colorIndex"],"mappings":"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"}