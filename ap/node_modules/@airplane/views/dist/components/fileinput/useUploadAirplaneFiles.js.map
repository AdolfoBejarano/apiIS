{"version":3,"file":"useUploadAirplaneFiles.js","sources":["../../../src/components/fileinput/useUploadAirplaneFiles.tsx"],"sourcesContent":["import { AirplaneFile } from \"airplane\";\nimport { useCallback, useState } from \"react\";\n\nimport {\n  PICK_ZONE,\n  UPLOADS_CREATE,\n  AGENT_UPLOADS_CREATE,\n} from \"client/endpoints\";\nimport { AIRPLANE_USE_SELF_HOSTED_INPUTS } from \"client/env\";\nimport { Fetcher } from \"client/fetcher\";\n\n/**\n * This hook manages the state of a set of file uploads. It returns an object\n * containing `onDrop`, which accepts a list of `File`, and `uploads`, which\n * contains information about the upload progress and the resulting `AirplaneFile`\n * objects. Callbacks that fire during different stages of the upload can be\n * passed as arguments to the hook.\n */\nexport const useUploadAirplaneFiles = ({\n  onChange,\n  onLoad,\n  onLoadEnd,\n  onError,\n  getUploadURL,\n}: {\n  onChange: (v: AirplaneFile[]) => void;\n  onLoad?: (f: File) => void;\n  onLoadEnd?: (f: File) => void;\n  onError?: (f: File, e: unknown) => void;\n  getUploadURL?: (\n    filename: string,\n    sizeBytes: number,\n  ) => Promise<{ uploadID: string; readURL: string; writeURL: string }>;\n}): {\n  onDrop: (files: File[]) => void;\n  uploads: { percent: number; file: AirplaneFile }[];\n} => {\n  const [uploads, setUploads] = useState<\n    { percent: number; file: AirplaneFile }[]\n  >([]);\n\n  const onDrop = useCallback(\n    async (files: File[]) => {\n      setUploads(\n        files.map((file) => {\n          return {\n            percent: 0,\n            file: new AirplaneFile(file, {\n              id: \"\",\n              url: \"\",\n              name: file.name,\n            }),\n          };\n        }),\n      );\n      const fetcher = new Fetcher();\n      const onChangeInput = await Promise.all(\n        files.map(async (file, i) => {\n          try {\n            let uploadID, readOnlyURL, writeOnlyURL: string;\n            if (getUploadURL) {\n              ({\n                uploadID,\n                readURL: readOnlyURL,\n                writeURL: writeOnlyURL,\n              } = await getUploadURL(file.name, file.size));\n            } else {\n              const pickZoneResp = AIRPLANE_USE_SELF_HOSTED_INPUTS\n                ? await fetcher.get<{\n                    zone?: {\n                      id: string;\n                      dataPlaneURL: string;\n                      accessToken: string;\n                    };\n                  }>(PICK_ZONE)\n                : null;\n\n              if (pickZoneResp && pickZoneResp.zone?.dataPlaneURL) {\n                // Save the upload in the zone\n                const agentResp = await fetcher.post<{\n                  readOnlyURL: string;\n                  writeOnlyURL: string;\n                  upload: { zoneToken: string };\n                }>(\n                  AGENT_UPLOADS_CREATE,\n                  {\n                    fileName: file.name,\n                    sizeBytes: file.size,\n                  },\n                  {\n                    headers: {\n                      \"X-Airplane-Dataplane-Token\":\n                        pickZoneResp.zone?.accessToken,\n                    },\n                    host: pickZoneResp.zone?.dataPlaneURL,\n                  },\n                );\n\n                // Register the upload in the Airplane API\n                const uploadResp = await fetcher.post<{\n                  upload: { id: string };\n                }>(UPLOADS_CREATE, {\n                  fileName: file.name,\n                  sizeBytes: file.size,\n                  zoneID: pickZoneResp.zone.id,\n                  zoneToken: agentResp.upload.zoneToken,\n                });\n\n                uploadID = uploadResp.upload.id;\n                readOnlyURL = agentResp.readOnlyURL;\n                writeOnlyURL = agentResp.writeOnlyURL;\n              } else {\n                // Just save the upload in the Airplane API\n                ({\n                  upload: { id: uploadID },\n                  readOnlyURL,\n                  writeOnlyURL,\n                } = await fetcher.post<{\n                  upload: { id: string };\n                  readOnlyURL: string;\n                  writeOnlyURL: string;\n                }>(UPLOADS_CREATE, {\n                  fileName: file.name,\n                  sizeBytes: file.size,\n                }));\n              }\n            }\n\n            await new Promise<void>((resolve, reject) => {\n              const xhr = new XMLHttpRequest();\n              xhr.addEventListener(\"load\", (e) => {\n                setUploads((u) => [\n                  ...u.slice(0, i),\n                  { percent: 100, file: u[i].file },\n                  ...u.slice(i + 1),\n                ]);\n                onLoad?.(file);\n                resolve();\n              });\n              // Kludge for testing. xhr.upload is {} for MSW\n              if (xhr.upload.addEventListener) {\n                xhr.upload.addEventListener(\"progress\", (e) => {\n                  setUploads((u) => [\n                    ...u.slice(0, i),\n                    {\n                      percent: Math.trunc((e.loaded / file.size) * 1000) / 10,\n                      file: u[i].file,\n                    },\n                    ...u.slice(i + 1),\n                  ]);\n                });\n              }\n              xhr.addEventListener(\"error\", (e) => {\n                reject();\n              });\n              xhr.addEventListener(\"abort\", (e) => {\n                resolve();\n              });\n              xhr.addEventListener(\"loadend\", (e) => {\n                onLoadEnd?.(file);\n              });\n              xhr.open(\"PUT\", writeOnlyURL);\n\n              const parsedURL = new URL(writeOnlyURL);\n              if (parsedURL.hostname.endsWith(\".windows.net\")) {\n                // Need to set extra header for Azure PUTs\n                xhr.setRequestHeader(\"x-ms-blob-type\", \"BlockBlob\");\n              } else {\n                xhr.setRequestHeader(\n                  \"X-Goog-Content-Length-Range\",\n                  `0,${file.size}`,\n                );\n              }\n\n              xhr.send(file);\n            });\n\n            const airplaneFile = new AirplaneFile(file, {\n              id: uploadID,\n              url: readOnlyURL,\n              name: file.name,\n            });\n            setUploads((u) => [\n              ...u.slice(0, i),\n              { percent: u[i].percent, file: airplaneFile },\n              ...u.slice(i + 1),\n            ]);\n            return airplaneFile;\n          } catch (e) {\n            onError?.(file, e);\n            return new AirplaneFile(file, {\n              id: \"\",\n              url: \"\",\n              name: file.name,\n            });\n          }\n        }),\n      );\n      onChange(onChangeInput);\n      setUploads([]);\n    },\n    [onChange, onLoad, onLoadEnd, onError, getUploadURL],\n  );\n\n  return {\n    onDrop,\n    uploads,\n  };\n};\n"],"names":["useUploadAirplaneFiles","onChange","onLoad","onLoadEnd","onError","getUploadURL","uploads","setUploads","useState","onDrop","useCallback","files","map","file","percent","AirplaneFile","id","url","name","fetcher","Fetcher","onChangeInput","Promise","all","i","uploadID","readOnlyURL","writeOnlyURL","readURL","writeURL","size","pickZoneResp","AIRPLANE_USE_SELF_HOSTED_INPUTS","get","PICK_ZONE","zone","dataPlaneURL","agentResp","post","AGENT_UPLOADS_CREATE","fileName","sizeBytes","headers","accessToken","host","uploadResp","UPLOADS_CREATE","zoneID","zoneToken","upload","resolve","reject","xhr","XMLHttpRequest","addEventListener","e","u","slice","Math","trunc","loaded","open","parsedURL","URL","hostname","endsWith","setRequestHeader","send","airplaneFile"],"mappings":";;;;;AAkBO,MAAMA,yBAAyBA,CAAC;AAAA,EACrCC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAUF,MAGK;AACH,QAAM,CAACC,SAASC,UAAU,IAAIC,SAE5B,CAAE,CAAA;AAEEC,QAAAA,SAASC,YACb,OAAOC,UAAkB;AAErBA,eAAAA,MAAMC,IAAKC,CAAS,SAAA;AACX,aAAA;AAAA,QACLC,SAAS;AAAA,QACTD,MAAM,IAAIE,aAAaF,MAAM;AAAA,UAC3BG,IAAI;AAAA,UACJC,KAAK;AAAA,UACLC,MAAML,KAAKK;AAAAA,QAAAA,CACZ;AAAA,MAAA;AAAA,IAEJ,CAAA,CACH;AACMC,UAAAA,UAAU,IAAIC;AACdC,UAAAA,gBAAgB,MAAMC,QAAQC,IAClCZ,MAAMC,IAAI,OAAOC,MAAMW,MAAM;;AACvB,UAAA;AACF,YAAIC,UAAUC,aAAaC;AAC3B,YAAItB,cAAc;AACf,WAAA;AAAA,YACCoB;AAAAA,YACAG,SAASF;AAAAA,YACTG,UAAUF;AAAAA,UAAAA,IACR,MAAMtB,aAAaQ,KAAKK,MAAML,KAAKiB,IAAI;AAAA,QAAA,OACtC;AACL,gBAAMC,eAAeC,kCACjB,MAAMb,QAAQc,IAMXC,SAAS,IACZ;AAEAH,cAAAA,kBAAgBA,kBAAaI,SAAbJ,mBAAmBK,eAAc;AAEnD,kBAAMC,YAAY,MAAMlB,QAAQmB,KAK9BC,sBACA;AAAA,cACEC,UAAU3B,KAAKK;AAAAA,cACfuB,WAAW5B,KAAKiB;AAAAA,YAAAA,GAElB;AAAA,cACEY,SAAS;AAAA,gBACP,+BACEX,kBAAaI,SAAbJ,mBAAmBY;AAAAA,cACvB;AAAA,cACAC,OAAMb,kBAAaI,SAAbJ,mBAAmBK;AAAAA,YAAAA,CAE7B;AAGA,kBAAMS,aAAa,MAAM1B,QAAQmB,KAE9BQ,gBAAgB;AAAA,cACjBN,UAAU3B,KAAKK;AAAAA,cACfuB,WAAW5B,KAAKiB;AAAAA,cAChBiB,QAAQhB,aAAaI,KAAKnB;AAAAA,cAC1BgC,WAAWX,UAAUY,OAAOD;AAAAA,YAAAA,CAC7B;AAEDvB,uBAAWoB,WAAWI,OAAOjC;AAC7BU,0BAAcW,UAAUX;AACxBC,2BAAeU,UAAUV;AAAAA,UAAAA,OACpB;AAEJ,aAAA;AAAA,cACCsB,QAAQ;AAAA,gBAAEjC,IAAIS;AAAAA,cAAS;AAAA,cACvBC;AAAAA,cACAC;AAAAA,YAAAA,IACE,MAAMR,QAAQmB,KAIfQ,gBAAgB;AAAA,cACjBN,UAAU3B,KAAKK;AAAAA,cACfuB,WAAW5B,KAAKiB;AAAAA,YAAAA,CACjB;AAAA,UACH;AAAA,QACF;AAEA,cAAM,IAAIR,QAAc,CAAC4B,SAASC,WAAW;AACrCC,gBAAAA,MAAM,IAAIC;AACZC,cAAAA,iBAAiB,QAASC,CAAM,MAAA;AAClChD,uBAAYiD,OAAM,CAChB,GAAGA,EAAEC,MAAM,GAAGjC,CAAC,GACf;AAAA,cAAEV,SAAS;AAAA,cAAKD,MAAM2C,EAAEhC,CAAC,EAAEX;AAAAA,YAAAA,GAC3B,GAAG2C,EAAEC,MAAMjC,IAAI,CAAC,CAAC,CAClB;AACDtB,6CAASW;AACD;UAAA,CACT;AAEGuC,cAAAA,IAAIH,OAAOK,kBAAkB;AAC3BL,gBAAAA,OAAOK,iBAAiB,YAAaC,CAAM,MAAA;AAC7ChD,yBAAYiD,OAAM,CAChB,GAAGA,EAAEC,MAAM,GAAGjC,CAAC,GACf;AAAA,gBACEV,SAAS4C,KAAKC,MAAOJ,EAAEK,SAAS/C,KAAKiB,OAAQ,GAAI,IAAI;AAAA,gBACrDjB,MAAM2C,EAAEhC,CAAC,EAAEX;AAAAA,cAAAA,GAEb,GAAG2C,EAAEC,MAAMjC,IAAI,CAAC,CAAC,CAClB;AAAA,YAAA,CACF;AAAA,UACH;AACI8B,cAAAA,iBAAiB,SAAUC,CAAM,MAAA;AAC5B;UAAA,CACR;AACGD,cAAAA,iBAAiB,SAAUC,CAAM,MAAA;AAC3B;UAAA,CACT;AACGD,cAAAA,iBAAiB,WAAYC,CAAM,MAAA;AACrCpD,mDAAYU;AAAAA,UAAI,CACjB;AACGgD,cAAAA,KAAK,OAAOlC,YAAY;AAEtBmC,gBAAAA,YAAY,IAAIC,IAAIpC,YAAY;AACtC,cAAImC,UAAUE,SAASC,SAAS,cAAc,GAAG;AAE3CC,gBAAAA,iBAAiB,kBAAkB,WAAW;AAAA,UAAA,OAC7C;AACLd,gBAAIc,iBACF,+BACC,KAAIrD,KAAKiB,IAAK,EACjB;AAAA,UACF;AAEAsB,cAAIe,KAAKtD,IAAI;AAAA,QAAA,CACd;AAEKuD,cAAAA,eAAe,IAAIrD,aAAaF,MAAM;AAAA,UAC1CG,IAAIS;AAAAA,UACJR,KAAKS;AAAAA,UACLR,MAAML,KAAKK;AAAAA,QAAAA,CACZ;AACDX,mBAAYiD,OAAM,CAChB,GAAGA,EAAEC,MAAM,GAAGjC,CAAC,GACf;AAAA,UAAEV,SAAS0C,EAAEhC,CAAC,EAAEV;AAAAA,UAASD,MAAMuD;AAAAA,QAAAA,GAC/B,GAAGZ,EAAEC,MAAMjC,IAAI,CAAC,CAAC,CAClB;AACM4C,eAAAA;AAAAA,eACAb,GAAG;AACVnD,2CAAUS,MAAM0C;AACT,eAAA,IAAIxC,aAAaF,MAAM;AAAA,UAC5BG,IAAI;AAAA,UACJC,KAAK;AAAA,UACLC,MAAML,KAAKK;AAAAA,QAAAA,CACZ;AAAA,MACH;AAAA,IACD,CAAA,CACH;AACAjB,aAASoB,aAAa;AACtBd,eAAW,CAAE,CAAA;AAAA,EAAA,GAEf,CAACN,UAAUC,QAAQC,WAAWC,SAASC,YAAY,CACrD;AAEO,SAAA;AAAA,IACLI;AAAAA,IACAH;AAAAA,EAAAA;AAEJ;"}