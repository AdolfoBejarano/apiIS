{"version":3,"file":"Text.js","sources":["../../../src/components/text/Text.tsx"],"sourcesContent":["import { Text as MantineText } from \"@mantine/core\";\nimport { forwardRef, Ref } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport { Code } from \"components/code/Code\";\nimport { Props as CodeProps } from \"components/code/Code.types\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport { Heading } from \"components/heading/Heading\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\n\nimport {\n  useParagraphStyles,\n  useRawTextStyles,\n  useTextWeight,\n} from \"./Text.styles\";\nimport { LabelProps, TextProps } from \"./Text.types\";\nimport { fontWeight } from \"../theme/typography\";\n\n/**\n * Text component.\n *\n * Renders text but also supports Markdown.\n */\nexport const Text = forwardRef<HTMLDivElement, TextProps>((props, ref) => (\n  <ComponentErrorBoundary componentName={DISPLAY_NAME}>\n    <TextWithoutRef {...props} innerRef={ref} />\n  </ComponentErrorBoundary>\n));\nconst DISPLAY_NAME = \"Text\";\nText.displayName = DISPLAY_NAME;\n\ntype TextWithoutRefProps = TextProps & { innerRef: Ref<HTMLDivElement> };\n/**\n * Text component without ref forwarding.\n *\n * This component is exported for documentation purposes. It should not be used.\n * */\nexport const TextWithoutRef = ({\n  disableMarkdown,\n  children,\n  size = \"md\",\n  innerRef,\n  ...props\n}: TextWithoutRefProps) => {\n  const { classes } = useParagraphStyles({ size });\n  const rawTextProps = {\n    size,\n    className: classes.paragraph,\n    ...props,\n  };\n  if (disableMarkdown || typeof children !== \"string\") {\n    return (\n      // Note that we only apply the ref to a label because the ref crashes\n      // when used with markdown.\n      <Label {...rawTextProps} ref={innerRef}>\n        {children}\n      </Label>\n    );\n  }\n  const markdownHeadingProps = {\n    color: props.color,\n    weight: props.weight,\n    transform: props.transform,\n    align: props.align,\n    italic: props.italic,\n    underline: props.underline,\n    strikethrough: props.strikethrough,\n    sx: props.sx,\n    className: props.className,\n    style: props.style,\n    width: props.width,\n  };\n  return (\n    <ReactMarkdown\n      components={{\n        h1: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={1}>\n            {componentProps.children}\n          </Heading>\n        ),\n        h2: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={2}>\n            {componentProps.children}\n          </Heading>\n        ),\n        h3: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={3}>\n            {componentProps.children}\n          </Heading>\n        ),\n        h4: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={4}>\n            {componentProps.children}\n          </Heading>\n        ),\n        h5: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={5}>\n            {componentProps.children}\n          </Heading>\n        ),\n        h6: (componentProps) => (\n          <Heading {...markdownHeadingProps} level={6}>\n            {componentProps.children}\n          </Heading>\n        ),\n        p: (componentProps) => (\n          <Label {...rawTextProps}>{componentProps.children}</Label>\n        ),\n        ul: (componentProps) => (\n          <ul>\n            <Label {...rawTextProps}>{componentProps.children}</Label>\n          </ul>\n        ),\n        ol: (componentProps) => (\n          <ol>\n            <Label {...rawTextProps}>{componentProps.children}</Label>\n          </ol>\n        ),\n        li: (componentProps) => (\n          <li>\n            <Label {...rawTextProps}>{componentProps.children}</Label>\n          </li>\n        ),\n        code({ node, inline, className, children, ...componentProps }) {\n          const match = /language-(\\w+)/.exec(className || \"\");\n          return !inline && match ? (\n            <Code\n              language={match[1] as CodeProps[\"language\"]}\n              {...componentProps}\n            >\n              {String(children)}\n            </Code>\n          ) : (\n            <code className={className} {...componentProps}>\n              {children}\n            </code>\n          );\n        },\n      }}\n    >\n      {children}\n    </ReactMarkdown>\n  );\n};\n\n/** Text without automatic formatting like Markdown and paragraph-like margins **/\nexport const Label = forwardRef<HTMLDivElement, LabelProps>((props, ref) => (\n  <LabelWithoutRef {...props} innerRef={ref} />\n));\nLabel.displayName = \"Label\";\n\ntype LabelWithoutRefProps = LabelProps & { innerRef: Ref<HTMLDivElement> };\n/**\n * Label component without ref forwarding.\n *\n * This component is exported for documentation purposes. It should not be used.\n */\nexport const LabelWithoutRef = ({\n  className,\n  style,\n  size = \"md\",\n  innerRef,\n  children,\n  color = \"gray.7\",\n  weight,\n  width,\n  height,\n  grow,\n  ...props\n}: LabelWithoutRefProps) => {\n  const textWeight = useTextWeight(size);\n  const { classes, cx } = useRawTextStyles({ size });\n  const { classes: layoutClasses } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  return (\n    <MantineText\n      className={cx(classes.root, layoutClasses.style, className)}\n      style={style}\n      color={color}\n      weight={weight ? fontWeight[weight] : textWeight}\n      ref={innerRef}\n      {...props}\n    >\n      {children}\n    </MantineText>\n  );\n};\n"],"names":["Text","props","ref","DISPLAY_NAME","displayName","TextWithoutRef","disableMarkdown","children","size","innerRef","classes","useParagraphStyles","rawTextProps","className","paragraph","markdownHeadingProps","color","weight","transform","align","italic","underline","strikethrough","sx","style","width","h1","componentProps","h2","h3","h4","h5","h6","p","ul","ol","li","code","node","inline","match","exec","String","Label","LabelWithoutRef","height","grow","textWeight","useTextWeight","cx","useRawTextStyles","layoutClasses","useCommonLayoutStyle","MantineText","root","fontWeight"],"mappings":";;;;;;;;;;AAuBO,MAAMA,OAA6C,2BAAA,CAACC,OAAOC,4BAC/D,wBAAuB,EAAA,eAAeC,cACrC,UAAA,oBAAC,kBAAmBF,GAAAA,OAAO,UAAUC,IAAAA,CAAI,GAC3C,CACD;AACD,MAAMC,eAAe;AACrBH,KAAKI,cAAcD;AAQZ,MAAME,iBAAiBA,CAAC;AAAA,EAC7BC;AAAAA,EACAC;AAAAA,EACAC,OAAO;AAAA,EACPC;AAAAA,EACA,GAAGR;AACgB,MAAM;AACnB,QAAA;AAAA,IAAES;AAAAA,MAAYC,mBAAmB;AAAA,IAAEH;AAAAA,EAAAA,CAAM;AAC/C,QAAMI,eAAe;AAAA,IACnBJ;AAAAA,IACAK,WAAWH,QAAQI;AAAAA,IACnB,GAAGb;AAAAA,EAAAA;AAEDK,MAAAA,mBAAmB,OAAOC,aAAa,UAAU;AACnD;AAAA;AAAA;AAAA,0BAGG,OAAM,EAAA,GAAIK,cAAc,KAAKH,UAC3BF,UACH;AAAA;AAAA,EAEJ;AACA,QAAMQ,uBAAuB;AAAA,IAC3BC,OAAOf,MAAMe;AAAAA,IACbC,QAAQhB,MAAMgB;AAAAA,IACdC,WAAWjB,MAAMiB;AAAAA,IACjBC,OAAOlB,MAAMkB;AAAAA,IACbC,QAAQnB,MAAMmB;AAAAA,IACdC,WAAWpB,MAAMoB;AAAAA,IACjBC,eAAerB,MAAMqB;AAAAA,IACrBC,IAAItB,MAAMsB;AAAAA,IACVV,WAAWZ,MAAMY;AAAAA,IACjBW,OAAOvB,MAAMuB;AAAAA,IACbC,OAAOxB,MAAMwB;AAAAA,EAAAA;AAGb,SAAA,oBAAC,iBACC,YAAY;AAAA,IACVC,IAAKC,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEFqB,IAAKD,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEFsB,IAAKF,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEFuB,IAAKH,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEFwB,IAAKJ,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEFyB,IAAKL,oBACF,oBAAA,SAAA,EAAQ,GAAIZ,sBAAsB,OAAO,GACvCY,UAAAA,eAAepB,SAClB,CAAA;AAAA,IAEF0B,GAAIN,CACF,mBAAA,oBAAC,SAAUf,GAAAA,cAAee,yBAAepB,UAAS;AAAA,IAEpD2B,IAAKP,CACH,mBAAA,oBAAC,MACC,EAAA,UAAA,oBAAC,SAAM,GAAIf,cAAee,UAAepB,eAAAA,SAAAA,CAAS,EACpD,CAAA;AAAA,IAEF4B,IAAKR,CACH,mBAAA,oBAAC,MACC,EAAA,UAAA,oBAAC,SAAM,GAAIf,cAAee,UAAepB,eAAAA,SAAAA,CAAS,EACpD,CAAA;AAAA,IAEF6B,IAAKT,CACH,mBAAA,oBAAC,MACC,EAAA,UAAA,oBAAC,SAAM,GAAIf,cAAee,UAAepB,eAAAA,SAAAA,CAAS,EACpD,CAAA;AAAA,IAEF8B,KAAK;AAAA,MAAEC;AAAAA,MAAMC;AAAAA,MAAQ1B;AAAAA,MAAWN,UAAAA;AAAAA,MAAU,GAAGoB;AAAAA,IAAAA,GAAkB;AAC7D,YAAMa,QAAQ,iBAAiBC,KAAK5B,aAAa,EAAE;AAC5C,aAAA,CAAC0B,UAAUC,QAChB,oBAAC,QACC,UAAUA,MAAM,CAAC,GACbb,GAAAA,gBAEHe,UAAOnC,OAAAA,SAAQ,GAClB,IAEA,oBAAC,UAAK,WAAsB,GAAIoB,gBAC7BpB,UAAAA,UACH,CAAA;AAAA,IAEJ;AAAA,EAAA,GAGDA,SACH,CAAA;AAEJ;AAGaoC,MAAAA,QAA+C,2BAAA,CAAC1C,OAAOC,QACjE,oBAAA,iBAAA,EAAoBD,GAAAA,OAAO,UAAUC,IAAI,CAAA,CAC3C;AACDyC,MAAMvC,cAAc;AAQb,MAAMwC,kBAAkBA,CAAC;AAAA,EAC9B/B;AAAAA,EACAW;AAAAA,EACAhB,OAAO;AAAA,EACPC;AAAAA,EACAF;AAAAA,EACAS,QAAQ;AAAA,EACRC;AAAAA,EACAQ;AAAAA,EACAoB;AAAAA,EACAC;AAAAA,EACA,GAAG7C;AACiB,MAAM;AACpB8C,QAAAA,aAAaC,cAAcxC,IAAI;AAC/B,QAAA;AAAA,IAAEE;AAAAA,IAASuC;AAAAA,MAAOC,iBAAiB;AAAA,IAAE1C;AAAAA,EAAAA,CAAM;AAC3C,QAAA;AAAA,IAAEE,SAASyC;AAAAA,MAAkBC,qBAAqB;AAAA,IACtD3B;AAAAA,IACAoB;AAAAA,IACAC;AAAAA,EAAAA,CACD;AAEC,SAAA,oBAACO,UACC,WAAWJ,GAAGvC,QAAQ4C,MAAMH,cAAc3B,OAAOX,SAAS,GAC1D,OACA,OACA,QAAQI,SAASsC,WAAWtC,MAAM,IAAI8B,YACtC,KAAKtC,UACDR,GAAAA,OAEHM,SACH,CAAA;AAEJ;"}