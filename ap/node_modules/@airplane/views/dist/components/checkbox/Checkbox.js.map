{"version":3,"file":"Checkbox.js","sources":["../../../src/components/checkbox/Checkbox.tsx"],"sourcesContent":["import { Checkbox as MantineCheckbox } from \"@mantine/core\";\nimport * as React from \"react\";\nimport { ChangeEvent, forwardRef, useCallback } from \"react\";\n\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport { useCheckboxState } from \"state/components/boolean/useBooleanState\";\nimport { useRegisterFormInput } from \"state/components/form/useRegisterFormInput\";\nimport { useInput } from \"state/components/input/useInput\";\nimport { useComponentId } from \"state/components/useId\";\n\nimport { CheckboxComponentProps, CheckboxProps } from \"./Checkbox.types\";\n\n/** Presentational checkbox component */\nexport const CheckboxComponent = forwardRef(\n  (\n    { width, ...props }: CheckboxComponentProps,\n    ref: React.Ref<HTMLInputElement>,\n  ) => {\n    const propsOnChange = props.onChange;\n    const onChange = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        propsOnChange?.(e.currentTarget.checked);\n      },\n      [propsOnChange],\n    );\n    return <MantineCheckbox {...props} ref={ref} onChange={onChange} />;\n  },\n);\nCheckboxComponent.displayName = \"CheckboxComponent\";\n\nexport const Checkbox = forwardRef(\n  (props: CheckboxProps, ref: React.Ref<HTMLInputElement>) => (\n    <ComponentErrorBoundary componentName={DISPLAY_NAME}>\n      <CheckboxWithoutRef {...props} innerRef={ref} />\n    </ComponentErrorBoundary>\n  ),\n);\nconst DISPLAY_NAME = \"Checkbox\";\nCheckbox.displayName = DISPLAY_NAME;\n\n/** Exported for documentation purposes */\nexport const CheckboxWithoutRef = (\n  props: CheckboxProps & { innerRef: React.Ref<HTMLInputElement> },\n) => {\n  const id = useComponentId(props.id);\n  const { state, dispatch } = useCheckboxState(id, {\n    initialState: {\n      value: props.checked ?? props.defaultChecked,\n      disabled: props.disabled ?? props.defaultDisabled,\n    },\n  });\n  const { inputProps } = useInput(props, state, dispatch, (v: boolean) => v);\n  useRegisterFormInput(id, \"checkbox\");\n\n  const { value: checked, ...restInputProps } = inputProps;\n  const { innerRef, validate: _, onChange: __, ...restProps } = props;\n  return (\n    <CheckboxComponent\n      checked={checked}\n      ref={innerRef}\n      {...restInputProps}\n      {...restProps}\n    />\n  );\n};\n"],"names":["CheckboxComponent","width","props","ref","propsOnChange","onChange","useCallback","e","currentTarget","checked","MantineCheckbox","displayName","Checkbox","DISPLAY_NAME","CheckboxWithoutRef","id","useComponentId","state","dispatch","useCheckboxState","initialState","value","defaultChecked","disabled","defaultDisabled","inputProps","useInput","v","useRegisterFormInput","restInputProps","innerRef","validate","_","__","restProps"],"mappings":";;;;;;;;AAaaA,MAAAA,+CACX,CACE;AAAA,EAAEC;AAAAA,EAAO,GAAGC;AAA8B,GAC1CC,QACG;AACH,QAAMC,gBAAgBF,MAAMG;AACtBA,QAAAA,WAAWC,YACf,CAACC,MAAqC;AACpBA,mDAAAA,EAAEC,cAAcC;AAAAA,EAAO,GAEzC,CAACL,aAAa,CAChB;AACA,SAAQ,oBAAAM,YAAA,KAAoBR,OAAO,KAAU,SAAsB,CAAA;AACrE,CACF;AACAF,kBAAkBW,cAAc;AAEzB,MAAMC,WACX,2BAAA,CAACV,OAAsBC,4BACpB,wBAAuB,EAAA,eAAeU,cACrC,UAAA,oBAAC,sBAAuBX,GAAAA,OAAO,UAAUC,IAAAA,CAAI,GAC/C,CAEJ;AACA,MAAMU,eAAe;AACrBD,SAASD,cAAcE;AAGVC,MAAAA,qBAAqBA,CAChCZ,UACG;AACGa,QAAAA,KAAKC,eAAed,MAAMa,EAAE;AAC5B,QAAA;AAAA,IAAEE;AAAAA,IAAOC;AAAAA,EAAAA,IAAaC,iBAAiBJ,IAAI;AAAA,IAC/CK,cAAc;AAAA,MACZC,OAAOnB,MAAMO,WAAWP,MAAMoB;AAAAA,MAC9BC,UAAUrB,MAAMqB,YAAYrB,MAAMsB;AAAAA,IACpC;AAAA,EAAA,CACD;AACK,QAAA;AAAA,IAAEC;AAAAA,EAAAA,IAAeC,SAASxB,OAAOe,OAAOC,UAAU,CAACS,MAAeA,CAAC;AACzEC,uBAAqBb,IAAI,UAAU;AAE7B,QAAA;AAAA,IAAEM,OAAOZ;AAAAA,IAAS,GAAGoB;AAAAA,EAAmBJ,IAAAA;AACxC,QAAA;AAAA,IAAEK;AAAAA,IAAUC,UAAUC;AAAAA,IAAG3B,UAAU4B;AAAAA,IAAI,GAAGC;AAAAA,EAAchC,IAAAA;AAE5D,SAAA,oBAAC,qBACC,SACA,KAAK4B,UACDD,GAAAA,gBACJ,GAAIK,UACJ,CAAA;AAEN;"}