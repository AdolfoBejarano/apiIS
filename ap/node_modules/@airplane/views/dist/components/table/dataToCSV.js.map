{"version":3,"file":"dataToCSV.js","sources":["../../../src/components/table/dataToCSV.ts"],"sourcesContent":["import { isActionColumn } from \"./Column\";\n\nexport type CSVColumn = {\n  id: string;\n  label?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  valueToString?: (value: any) => string;\n};\n\nexport type CSVRow = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  values: Record<string, any>;\n};\n\nexport function dataToCSVLink(columns: CSVColumn[], rows: CSVRow[]): string {\n  return (\n    \"data:text/csv;charset=utf-8,\" +\n    encodeURIComponent(dataToCSV(columns, rows))\n  );\n}\n\nexport function dataToCSV(columns: CSVColumn[], rows: CSVRow[]): string {\n  const realCols = columns.filter((c) => !isActionColumn(c));\n  const csvHeader = realCols\n    .map((c) => escapeCSVString(String(c.label || c.id || \"\")))\n    .join(\",\");\n  const csvRows = rows.map((row) =>\n    realCols\n      .map((col) => {\n        return toCSVCell({\n          value: row.values[col.id],\n          valueToString: col.valueToString,\n        });\n      })\n      .join(\",\"),\n  );\n  return [csvHeader, ...csvRows].join(\"\\n\");\n}\n\nfunction toCSVCell<Value>({\n  value,\n  valueToString,\n}: {\n  value: Value;\n  valueToString?: (value: Value) => string;\n}): string {\n  const str =\n    value != null && valueToString != null\n      ? valueToString(value)\n      : defaultToString(value);\n  return escapeCSVString(str);\n}\n\n/**\n * escapeCSVString escapes a string for use in a CSV file.\n *\n * To escape CSV strings that might contain commas, we need to surround them by quotes,\n * e.g. `\"abc,def\",ghi`. So we always surround by quotes for simplicity.\n *\n * When we surround by quotes, we also need to convert quotes into double-quotes, e.g.\n * `abc\"def,ghi` => `\"abc\"\"def\",\"ghi\"` are equivalent CSV strings.\n */\nfunction escapeCSVString(str: string): string {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n}\n\nfunction defaultToString<TData>(datum: TData): string {\n  if (datum == null) {\n    return \"\";\n  }\n  if (typeof datum === \"string\") {\n    return datum;\n  }\n  return JSON.stringify(datum);\n}\n"],"names":["dataToCSVLink","columns","rows","encodeURIComponent","dataToCSV","realCols","filter","c","isActionColumn","csvHeader","map","escapeCSVString","String","label","id","join","csvRows","row","col","toCSVCell","value","values","valueToString","str","defaultToString","replace","datum","JSON","stringify"],"mappings":";AAcgBA,SAAAA,cAAcC,SAAsBC,MAAwB;AAC1E,SACE,iCACAC,mBAAmBC,UAAUH,SAASC,IAAI,CAAC;AAE/C;AAEgBE,SAAAA,UAAUH,SAAsBC,MAAwB;AACtE,QAAMG,WAAWJ,QAAQK,OAAQC,OAAM,CAACC,eAAeD,CAAC,CAAC;AACzD,QAAME,YAAYJ,SACfK,IAAKH,CAAAA,MAAMI,gBAAgBC,OAAOL,EAAEM,SAASN,EAAEO,MAAM,EAAE,CAAC,CAAC,EACzDC,KAAK,GAAG;AACX,QAAMC,UAAUd,KAAKQ,IAAKO,CACxBZ,QAAAA,SACGK,IAAKQ,CAAQ,QAAA;AACZ,WAAOC,UAAU;AAAA,MACfC,OAAOH,IAAII,OAAOH,IAAIJ,EAAE;AAAA,MACxBQ,eAAeJ,IAAII;AAAAA,IAAAA,CACpB;AAAA,EAAA,CACF,EACAP,KAAK,GAAG,CACb;AACA,SAAO,CAACN,WAAW,GAAGO,OAAO,EAAED,KAAK,IAAI;AAC1C;AAEA,SAASI,UAAiB;AAAA,EACxBC;AAAAA,EACAE;AAIF,GAAW;AACHC,QAAAA,MACJH,SAAS,QAAQE,iBAAiB,OAC9BA,cAAcF,KAAK,IACnBI,gBAAgBJ,KAAK;AAC3B,SAAOT,gBAAgBY,GAAG;AAC5B;AAWA,SAASZ,gBAAgBY,KAAqB;AAC5C,SAAO,MAAMA,IAAIE,QAAQ,MAAM,IAAI,IAAI;AACzC;AAEA,SAASD,gBAAuBE,OAAsB;AACpD,MAAIA,SAAS,MAAM;AACV,WAAA;AAAA,EACT;AACI,MAAA,OAAOA,UAAU,UAAU;AACtBA,WAAAA;AAAAA,EACT;AACOC,SAAAA,KAAKC,UAAUF,KAAK;AAC7B;"}