{"version":3,"file":"TableComponent.js","sources":["../../../src/components/table/TableComponent.tsx"],"sourcesContent":["import { ActionIcon, createStyles, Menu } from \"@mantine/core\";\nimport { isEqual } from \"lodash-es\";\nimport {\n  Ref,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Hooks,\n  Row,\n  useFlexLayout,\n  useGlobalFilter,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useTable,\n  Column as ReactTableColumn,\n  TableHeaderProps,\n  TableCellProps,\n} from \"react-table\";\nimport { useSticky } from \"react-table-sticky\";\n\nimport { Button } from \"components/button/Button\";\nimport { CheckboxComponent as Checkbox } from \"components/checkbox/Checkbox\";\nimport { Heading } from \"components/heading/Heading\";\nimport {\n  PencilSquareIconOutline,\n  ArrowUpIconMini,\n  ArrowDownIconMini,\n  ArrowDownTrayIconMini,\n  EllipsisVerticalIconSolid,\n} from \"components/icon\";\nimport { useCommonLayoutStyle } from \"components/layout/useCommonLayoutStyle\";\nimport { Skeleton } from \"components/Skeleton\";\nimport { Stack } from \"components/stack/Stack\";\nimport { Tooltip } from \"components/tooltip/Tooltip\";\n\nimport { Cell, dateTimeSort, getDefaultCellType } from \"./Cell\";\nimport { CHECKBOX_ACTION_COLUMN_ID, ROW_ACTION_COLUMN_ID } from \"./Column\";\nimport { dataToCSVLink } from \"./dataToCSV\";\nimport Filter from \"./Filter\";\nimport { Pagination } from \"./Pagination\";\nimport { useStyles } from \"./Table.styles\";\nimport { Column, ComponentRowAction, TableComponentProps } from \"./Table.types\";\nimport { OverflowText } from \"./useIsOverflow\";\nimport { useResizeColumns } from \"./useResizeColumns\";\n\nconst LOADING_ROW_COUNT = 10;\nconst LOADING_COL_COUNT = 4;\nconst DEFAULT_ROW_MENU_WIDTH = 160;\n\nexport type TableComponentElement = {\n  toggleAllRowsSelected: (select?: boolean) => void;\n};\n\nexport function TableComponent<TRowData extends object>({\n  columns,\n  data,\n  onRowSelectionChanged,\n  onToggleAllRows,\n  onToggleRow,\n  loading,\n  error,\n  noData = \"No data\",\n  rowSelection,\n  rowActions,\n  rowActionsMenu,\n  rowActionsWidth,\n  rowActionsMenuWidth,\n  defaultPageSize = 10,\n  title,\n  hiddenColumns,\n  tableRef,\n  showFilter = true,\n  selectAll = true,\n  rowID,\n  isSelectedRow,\n  isDefaultSelectedRow,\n  freezeRowActions = true,\n  enableCSVDownload,\n  className,\n  style,\n  width,\n  height,\n  grow,\n}: TableComponentProps<TRowData> & { tableRef: Ref<TableComponentElement> }) {\n  const rowActionRef = useRef<HTMLDivElement>(null);\n  const { classes, cx } = useStyles();\n  // dirtyCells is a map of row IDs to a set of column IDs that have been edited.\n  const [dirtyCells, setDirtyCells] = useState<Record<string, Set<string>>>({});\n  const { classes: layoutClasses } = useCommonLayoutStyle({\n    width,\n    height,\n    grow,\n  });\n  const [tableData, setData] = useState<typeof data>([]);\n  const [columnTypes, setColumnTypes] = useState<\n    Record<string, Column[\"type\"]>\n  >({});\n  useEffect(() => {\n    if (loading) {\n      setData(Array(LOADING_ROW_COUNT).fill({}));\n    } else {\n      setData(data);\n    }\n  }, [loading, data]);\n  const [skipDirtyColumnIDReset, setSkipDirtyColumnIDReset] = useState(false);\n  // After data changes, we turn this flag back off\n  // so that if data actually changes when we're not\n  // editing it, the state is reset.\n  useEffect(() => {\n    setSkipDirtyColumnIDReset(false);\n  }, [tableData]);\n\n  const [tableColumns, setTableColumns] = useState<\n    ReactTableColumn<TRowData>[]\n  >([]);\n  useEffect(() => {\n    const hiddenSet = new Set(hiddenColumns);\n    const newTableColumns = columns\n      .filter(\n        (c) => typeof c.accessor === \"string\" && !hiddenSet.has(c.accessor),\n      )\n      .map((c) => {\n        const id = c.accessor as string;\n        let type = c.type;\n        if (!type && id && columnTypes[id]) {\n          type = columnTypes[id];\n        }\n\n        const col: ReactTableColumn<TRowData> = {\n          ...c,\n          id,\n          type,\n          // Pass in the accessor as a string to know if the columns have changed\n          _accessor: c.accessor,\n          accessor: (data) => data[c.accessor],\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          Component: c.Component as any,\n        };\n\n        if (type === \"boolean\") {\n          col.sortType = \"basic\";\n        } else if (type === \"date\" || type === \"datetime\") {\n          col.sortType = dateTimeSort;\n        }\n\n        return col;\n      });\n    if (loading || error || !columns.length) {\n      const cs = columns.length\n        ? newTableColumns\n        : Array.from({ length: LOADING_COL_COUNT }, (_, i) => ({\n            id: String(i),\n          }));\n      const loadingColumns = cs.map((column) => ({\n        ...column,\n        Cell: <Skeleton height={8} mt={16} mx={16} width=\"25%\" radius=\"sm\" />,\n      }));\n      setTableColumns(loadingColumns);\n    } else if (didColumnsChange(newTableColumns, tableColumns)) {\n      setTableColumns(newTableColumns);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading, columns, error, columnTypes, hiddenColumns]); // Don't include tableColumns to avoid an unnecessary re-render\n\n  const getRowId = useCallback(\n    (row: TRowData, relativeIndex: number): string => {\n      const id = rowID ?? \"id\";\n      if (id in row) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return String((row as any)[id]);\n      } else if (rowID) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Row ID ${rowID} not found in row data. Falling back to the row's index.`,\n        );\n      }\n      return relativeIndex.toString();\n    },\n    [rowID],\n  );\n\n  const updateData = useCallback(\n    (row: Row<TRowData>, columnId: string, value: unknown) => {\n      const rowIndex = row.index;\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const initialValue = (data[rowIndex] as any)[columnId];\n      let dirty = !isEqual(value, initialValue);\n      if (typeof value === \"boolean\" && !value && !initialValue) {\n        // For boolean values, treat all falsy values the same.\n        dirty = false;\n      }\n      const dirtyCellsCopy = new Set(dirtyCells[row.id] ?? []);\n      if (dirty) {\n        dirtyCellsCopy.add(columnId);\n      } else {\n        dirtyCellsCopy.delete(columnId);\n      }\n      setDirtyCells({ ...dirtyCells, [row.id]: dirtyCellsCopy });\n      setSkipDirtyColumnIDReset(true);\n\n      setData((old) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const currentVal = (old[rowIndex] as any)[columnId];\n        if (currentVal === value) {\n          // Nothing changed\n          return old;\n        }\n        const oldCopy = [...old];\n        oldCopy[rowIndex] = {\n          ...oldCopy[rowIndex],\n          [columnId]: value,\n        };\n        return oldCopy;\n      });\n    },\n    [data, dirtyCells],\n  );\n  const defaultColumn = useMemo(\n    () => ({\n      Cell,\n      minWidth: 50, // minWidth is only used as a limit for resizing\n      width: 150, // width is used for both the flex-basis and flex-grow\n      maxWidth: 300, // maxWidth is only used as a limit for resizing\n    }),\n    [],\n  );\n\n  function addCheckboxSelection(hooks: Hooks<TRowData>) {\n    if (rowSelection === \"checkbox\" && !loading) {\n      hooks.visibleColumns.push((columns) => [\n        {\n          id: CHECKBOX_ACTION_COLUMN_ID,\n          width: \"auto\",\n          disableResizing: true,\n          Header: ({ getToggleAllRowsSelectedProps, onToggleAllRows, rows }) =>\n            selectAll && (!isSelectedRow || onToggleAllRows) ? (\n              <Checkbox\n                {...getToggleAllRowsSelectedProps()}\n                onChange={(value: boolean) => {\n                  toggleAllRowsSelected(value);\n                  if (onToggleAllRows) {\n                    onToggleAllRows(value);\n                  }\n                }}\n                className={classes.checkbox}\n              />\n            ) : null,\n          Cell: ({\n            row,\n            onToggleRow,\n          }: {\n            row: Row<TRowData>;\n            onToggleRow?: (row: TRowData, idx: number) => void;\n          }) => {\n            const toggleRowSelectedProps = row.getToggleRowSelectedProps();\n            return (\n              <Checkbox\n                {...toggleRowSelectedProps}\n                onChange={(checked) => {\n                  row.toggleRowSelected(checked);\n                  onToggleRow?.(row.original, row.index);\n                }}\n                className={classes.checkbox}\n              />\n            );\n          },\n        },\n        ...columns,\n      ]);\n    }\n  }\n\n  function addActions(hooks: Hooks<TRowData>) {\n    if (rowActions?.length || (rowActionsMenu?.length && !loading)) {\n      const contentWidth = rowActionRef.current?.offsetWidth;\n      const actionsColumn = {\n        id: ROW_ACTION_COLUMN_ID,\n        width: rowActionsWidth || contentWidth,\n        sticky: freezeRowActions ? \"right\" : undefined,\n        // Overwrite maxWidth for actions column with arbitrarily large value\n        maxWidth: 10000,\n        Cell: ({ row }: { row: Row<TRowData> }) => {\n          return (\n            <div className={classes.actionContainer} ref={rowActionRef}>\n              {rowActions?.map((RowActionComponent, i) => (\n                <RowActionComponent key={i} row={row.original} />\n              ))}\n              {!!rowActionsMenu?.length && (\n                <RowActionsMenu\n                  width={Math.max(\n                    DEFAULT_ROW_MENU_WIDTH,\n                    rowActionsMenuWidth || 0,\n                  )}\n                  rowActionsMenu={rowActionsMenu}\n                  row={row}\n                />\n              )}\n            </div>\n          );\n        },\n      };\n      hooks.visibleColumns.push((columns) => [...columns, actionsColumn]);\n    }\n  }\n\n  function rowSelectorToRowIds(\n    data: TRowData[],\n    rowSelector?: (row: TRowData, rowIndex: number) => boolean,\n  ): Record<string, boolean> {\n    if (rowSelector === undefined) {\n      return {};\n    }\n\n    const rowIds = data\n      .map((row, idx): [TRowData, number] => [row, idx])\n      .filter(([row, idx]) => rowSelector(row, idx))\n      .map(([row, idx]) => getRowId(row, idx));\n\n    const ret: Record<string, boolean> = {};\n    if (rowSelection === \"single\" && rowIds.length) {\n      ret[rowIds[0]] = true;\n    } else {\n      rowIds.forEach((rowId) => {\n        ret[rowId] = true;\n      });\n    }\n    return ret;\n  }\n\n  const defaultSelectedRowIds = useMemo(() => {\n    if (loading) {\n      return {};\n    }\n    return rowSelectorToRowIds(data, isDefaultSelectedRow);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading]); // We only want to update the row selection state when the table stops loading.\n\n  const headerGroupOffsetWidths = useRef<Array<number>>([]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    // rows,\n    prepareRow,\n    rows: allRows,\n    // pagination\n    page: rows,\n    gotoPage,\n    canPreviousPage,\n    canNextPage,\n    nextPage,\n    previousPage,\n    // filtering\n    setGlobalFilter,\n    state: { pageIndex, pageSize, globalFilter },\n    // row selection\n    selectedFlatRows,\n    toggleAllRowsSelected,\n    visibleColumns,\n  } = useTable<TRowData>(\n    {\n      columns: tableColumns,\n      data: tableData,\n      initialState: {\n        pageIndex: 0,\n        pageSize: defaultPageSize,\n        selectedRowIds: defaultSelectedRowIds,\n      },\n      defaultColumn,\n      autoResetPage: false,\n      autoResetSortBy: false,\n      autoResetGlobalFilter: false,\n      autoResetSelectedRows: false,\n      getRowId,\n      // updateData and dirtyCells aren't part of the API, but anything we put into these options will\n      // be available to call on our cell renderer\n      updateData,\n      dirtyCells,\n      rowOffsetWidth:\n        headerGroupOffsetWidths.current?.reduce(\n          (sum, width) => sum + width,\n          0,\n        ) ?? 0,\n      // onToggleRow and onToggleAllRows are passed so that checkbox-based\n      // row selection can use them if needed.\n      onToggleRow,\n      onToggleAllRows,\n      useControlledState: (state) =>\n        useMemo(() => {\n          if (!isSelectedRow) {\n            return state;\n          }\n\n          return {\n            ...state,\n            selectedRowIds: rowSelectorToRowIds(data, isSelectedRow),\n          };\n          // Here, react-table's documentation suggests doing it this way, even though the\n          // linter complains that data and isSelectedRow are not locally in the hook.\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [state, data, isSelectedRow]),\n    },\n    useFlexLayout,\n    useResizeColumns,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useSticky,\n    (hooks) => {\n      addCheckboxSelection(hooks);\n      addActions(hooks);\n    },\n  );\n\n  const setFilter = useCallback(\n    (val: unknown) => {\n      setGlobalFilter(val);\n      gotoPage(0);\n    },\n    [setGlobalFilter, gotoPage],\n  );\n\n  useEffect(() => {\n    // Infer column types from the row data.\n    let cTypes = columnTypes; // Set cTypes to columnTypes so that if no types change, the reference is the same.\n    allRows.forEach((r) => {\n      r.allCells?.forEach((c) => {\n        const cid = c.column.id;\n        let cellType =\n          c.column.type || getDefaultCellType(c.value, c.column.typeOptions);\n        if (cid in cTypes && cellType !== cTypes[cid]) {\n          // The columnType is mismatched. Default it to string as we don't know\n          // what type the column is.\n          cellType = \"string\";\n        }\n\n        if (cTypes[cid] !== cellType) {\n          // The column type changed.\n          cTypes = { ...cTypes, [cid]: cellType };\n        }\n      });\n    });\n\n    setColumnTypes(cTypes);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allRows]); // Don't include columnTypes to avoid an unnecessary re-render\n\n  useEffect(() => {\n    if (onRowSelectionChanged) {\n      onRowSelectionChanged(selectedFlatRows.map((r) => r.original));\n    }\n  }, [selectedFlatRows, onRowSelectionChanged]);\n\n  useImperativeHandle(tableRef, () => ({\n    toggleAllRowsSelected,\n  }));\n\n  const dataAsCSVLink = useMemo(() => {\n    if (!enableCSVDownload) {\n      return \"\";\n    }\n    return dataToCSVLink(visibleColumns, allRows);\n  }, [allRows, visibleColumns, enableCSVDownload]);\n\n  // We shrink the list of header group offsetWidths here, just in case the number\n  // of header groups reduces (e.g. if data changes and the number of inferred\n  // header groups shrinks).\n  useEffect(() => {\n    headerGroupOffsetWidths.current = headerGroupOffsetWidths.current.slice(\n      0,\n      headerGroups.length,\n    );\n  }, [headerGroups.length]);\n\n  useEffect(() => {\n    // When the table data updates, reset the dirtyCells.\n    // We do this because edits are wiped away when the table data changes.\n    // We may want to change this behavior to avoid blowing away edits\n    // when the data changes—this would require tracking the editted data separately\n    // and providing a way to merge the two.\n    if (!skipDirtyColumnIDReset) {\n      setDirtyCells({});\n    }\n\n    // If the data changes so that the current page is empty, go back to the first page.\n    if (pageIndex > 0) {\n      const startItemNum = pageIndex * pageSize + 1;\n      if (startItemNum > allRows.length) {\n        gotoPage(0);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Only run this when tableData changes.\n  }, [tableData]);\n\n  const hasPagination = canNextPage || canPreviousPage;\n  return (\n    <div\n      style={style}\n      className={cx(classes.tableContainer, layoutClasses.style, className)}\n    >\n      {(title || showFilter) && (\n        <div className={classes.tableChrome}>\n          <Heading level={6} style={{ fontWeight: 600 }}>\n            {title}\n          </Heading>\n          <div className={classes.tableActions}>\n            {showFilter && (\n              <Filter initialValue={globalFilter} setValue={setFilter} />\n            )}\n          </div>\n        </div>\n      )}\n      <div\n        {...getTableProps((props) => ({\n          ...props,\n          // Override the calculated minWidth to prevent double scroll bars. See AIR-4272 for more details.\n          style: { ...props.style, minWidth: 0 },\n        }))}\n        className=\"table\"\n      >\n        <div className=\"thead\">\n          {headerGroups.map((headerGroup, headerGroupIdx) => (\n            // eslint-disable-next-line react/jsx-key\n            <div\n              {...headerGroup.getHeaderGroupProps({})}\n              className=\"tr\"\n              ref={(elem) =>\n                (headerGroupOffsetWidths.current[headerGroupIdx] =\n                  elem?.offsetWidth ?? 0)\n              }\n            >\n              {headerGroup.headers.map((column, i) => {\n                const columnProps = fixActionCol(\n                  column.getHeaderProps(\n                    column.getSortByToggleProps({ title: undefined }),\n                  ),\n                );\n                const nextColumn = headerGroup.headers[i + 1];\n                return (\n                  // eslint-disable-next-line react/jsx-key\n                  <div\n                    {...columnProps}\n                    className={cx(\"th\", {\n                      [classes.headerWithLabel]: !!column.label,\n                    })}\n                  >\n                    <OverflowText weight=\"medium\" value={column.label} />\n                    {column.isSorted && (\n                      <div className=\"sortIcon\">\n                        {column.isSortedDesc ? (\n                          <ArrowDownIconMini />\n                        ) : (\n                          <ArrowUpIconMini />\n                        )}\n                      </div>\n                    )}\n                    {column.canEdit && <EditIcon />}\n                    {column.canResize &&\n                      nextColumn?.id !== ROW_ACTION_COLUMN_ID && (\n                        <div\n                          {...column.getResizerProps()}\n                          className={cx(\"resizer\", {\n                            isResizing: column.isResizing,\n                          })}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                          }}\n                        />\n                      )}\n                    {!column.label && column.render(\"Header\")}\n                  </div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n        <div {...getTableBodyProps()} className=\"tbody\">\n          {!error && allRows.length === 0 && !loading && (\n            <div className={classes.noData}>{noData}</div>\n          )}\n          {error && <div className={classes.noData}>{error}</div>}\n          {rows.map((row) => {\n            prepareRow(row);\n            return (\n              // eslint-disable-next-line react/jsx-key\n              <div\n                {...row.getRowProps()}\n                onClick={() => {\n                  if (rowSelection === \"single\") {\n                    const wasRowSelected = row.isSelected;\n                    toggleAllRowsSelected(false);\n                    if (!wasRowSelected) {\n                      row.toggleRowSelected();\n                    }\n                    onToggleRow?.(row.original, row.index);\n                  }\n                }}\n                className={cx(\"tr\", {\n                  [classes.selectableRow]: rowSelection === \"single\",\n                  [classes.selectedRow]: row.isSelected,\n                })}\n              >\n                {row.cells.map((cell) => {\n                  const cellProps = fixActionCol(cell.getCellProps());\n                  return (\n                    // eslint-disable-next-line react/jsx-key\n                    <div\n                      {...cellProps}\n                      className={cx(\"td\", {\n                        [classes.cellEditIcon]: !row.isSelected,\n                        [classes.cellEditIconSelected]: row.isSelected,\n                      })}\n                    >\n                      {cell.render(\"Cell\")}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      {(hasPagination || enableCSVDownload) && (\n        <div className={classes.tableFooter}>\n          <div>\n            {!!enableCSVDownload && (\n              <a\n                href={dataAsCSVLink}\n                download={getCSVFileName(enableCSVDownload)}\n                data-testid=\"csvDownload\"\n              >\n                <ActionIcon size=\"sm\">\n                  <ArrowDownTrayIconMini />\n                </ActionIcon>\n              </a>\n            )}\n          </div>\n          <div className={classes.paginationContainer}>\n            {hasPagination && (\n              <Pagination\n                hasPrevPage={canPreviousPage}\n                hasNextPage={canNextPage}\n                onNext={nextPage}\n                onPrev={previousPage}\n                pageIndex={pageIndex}\n                total={allRows.length}\n                pageSize={pageSize}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst EditIcon = () => {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.headerEditIcon}>\n      <Tooltip position=\"right\" label={<EditTooltip />}>\n        <PencilSquareIconOutline />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst useTooltipStyles = createStyles((theme) => {\n  return {\n    info: {\n      color: theme.colors.dark[2],\n    },\n    header: {\n      background: theme.colors.dark[7],\n      // Negative margin to compensate for the padding on the tooltip\n      margin: \"-4px -8px 0 -8px\",\n      padding: \"4px 8px\",\n    },\n    shortcut: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n    },\n    command: {\n      backgroundColor: theme.colors.gray[6],\n      borderRadius: 2,\n      padding: \"0 4px\",\n    },\n  };\n});\n\nconst EditTooltip = () => {\n  const { classes } = useTooltipStyles();\n  return (\n    <Stack spacing=\"xs\">\n      <span className={classes.header}>This column is editable</span>\n      <div className={classes.shortcut}>\n        <span>Save</span>\n        <span className={classes.command}>⇧ + ⏎</span>\n      </div>\n      <div className={classes.shortcut}>\n        <span>Cancel</span>\n        <kbd className={classes.command}>Esc</kbd>\n      </div>\n    </Stack>\n  );\n};\n\nconst RowActionsMenu = <TRowData extends object>({\n  width,\n  rowActionsMenu,\n  row,\n}: {\n  width: number;\n  rowActionsMenu: ComponentRowAction<TRowData>[];\n  row: Row<TRowData>;\n}) => {\n  const { classes } = useStyles();\n  return (\n    <Menu\n      width={width}\n      position=\"bottom-end\"\n      classNames={{ dropdown: classes.dropdown }}\n      zIndex={150}\n      withinPortal\n    >\n      <Menu.Target>\n        <Button\n          variant=\"subtle\"\n          compact\n          radius=\"xs\"\n          disableFocusRing\n          className={classes.ellipsisMenuButton}\n          stopPropagation\n        >\n          <EllipsisVerticalIconSolid size=\"lg\" color=\"gray.4\" />\n        </Button>\n      </Menu.Target>\n      <Menu.Dropdown onClick={(e) => e.stopPropagation()}>\n        {rowActionsMenu?.map((RowActionComponent, i) => (\n          <div role=\"button\" key={i}>\n            <RowActionComponent row={row.original} />\n          </div>\n        ))}\n      </Menu.Dropdown>\n    </Menu>\n  );\n};\n\nconst didColumnsChange = <TRowData extends object>(\n  currColumns: ReactTableColumn<TRowData>[],\n  newColumns: ReactTableColumn<TRowData>[],\n) => {\n  if (currColumns.length !== newColumns.length) {\n    return true;\n  }\n  for (let i = 0; i < currColumns.length; i++) {\n    const currColumn = { ...currColumns[i] };\n    const newColumn = { ...newColumns[i] };\n    // Don't compare the accessor function since that will always be different.\n    delete currColumn.accessor;\n    delete newColumn.accessor;\n    if (!isEqual(currColumn, newColumn)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * fixActionCol prevents the action column from being resized.\n *\n * This is a hack to override the flex grow set by useFlexLayout.\n */\nconst fixActionCol = (props: TableHeaderProps | TableCellProps) => {\n  if (props.key.toString().endsWith(ROW_ACTION_COLUMN_ID) && props.style) {\n    // useFlexLayout sets the flex grow in proportion to its width.\n    // This prevents the action column from growing.\n    props.style.flex = \"0 0 auto\";\n  }\n  return props;\n};\n\nconst getCSVFileName = (enableCSVDownload: string | boolean) => {\n  if (typeof enableCSVDownload === \"boolean\") {\n    return \"table_data.csv\";\n  }\n  if (enableCSVDownload.endsWith(\".csv\")) {\n    return enableCSVDownload;\n  }\n  return `${enableCSVDownload}.csv`;\n};\n"],"names":["LOADING_ROW_COUNT","LOADING_COL_COUNT","DEFAULT_ROW_MENU_WIDTH","TableComponent","columns","data","onRowSelectionChanged","onToggleAllRows","onToggleRow","loading","error","noData","rowSelection","rowActions","rowActionsMenu","rowActionsWidth","rowActionsMenuWidth","defaultPageSize","title","hiddenColumns","tableRef","showFilter","selectAll","rowID","isSelectedRow","isDefaultSelectedRow","freezeRowActions","enableCSVDownload","className","style","width","height","grow","rowActionRef","useRef","classes","cx","useStyles","dirtyCells","setDirtyCells","useState","layoutClasses","useCommonLayoutStyle","tableData","setData","columnTypes","setColumnTypes","useEffect","Array","fill","skipDirtyColumnIDReset","setSkipDirtyColumnIDReset","tableColumns","setTableColumns","hiddenSet","Set","newTableColumns","filter","c","accessor","has","map","id","type","col","_accessor","Component","sortType","dateTimeSort","length","cs","from","_","i","String","loadingColumns","column","Cell","didColumnsChange","getRowId","useCallback","row","relativeIndex","warn","toString","updateData","columnId","value","rowIndex","index","initialValue","dirty","isEqual","dirtyCellsCopy","add","delete","old","currentVal","oldCopy","defaultColumn","useMemo","minWidth","maxWidth","addCheckboxSelection","hooks","visibleColumns","push","CHECKBOX_ACTION_COLUMN_ID","disableResizing","Header","getToggleAllRowsSelectedProps","rows","Checkbox","toggleAllRowsSelected","checkbox","toggleRowSelectedProps","getToggleRowSelectedProps","checked","toggleRowSelected","original","addActions","contentWidth","current","offsetWidth","actionsColumn","ROW_ACTION_COLUMN_ID","sticky","undefined","actionContainer","RowActionComponent","Math","max","rowSelectorToRowIds","rowSelector","rowIds","idx","ret","forEach","rowId","defaultSelectedRowIds","headerGroupOffsetWidths","getTableProps","getTableBodyProps","headerGroups","prepareRow","allRows","page","gotoPage","canPreviousPage","canNextPage","nextPage","previousPage","setGlobalFilter","state","pageIndex","pageSize","globalFilter","selectedFlatRows","useTable","initialState","selectedRowIds","autoResetPage","autoResetSortBy","autoResetGlobalFilter","autoResetSelectedRows","rowOffsetWidth","reduce","sum","useControlledState","useFlexLayout","useResizeColumns","useGlobalFilter","useSortBy","usePagination","useRowSelect","useSticky","setFilter","val","cTypes","r","allCells","cid","cellType","getDefaultCellType","typeOptions","useImperativeHandle","dataAsCSVLink","dataToCSVLink","slice","startItemNum","hasPagination","tableContainer","tableChrome","fontWeight","tableActions","props","headerGroup","headerGroupIdx","getHeaderGroupProps","elem","headers","columnProps","fixActionCol","getHeaderProps","getSortByToggleProps","nextColumn","headerWithLabel","label","isSorted","isSortedDesc","canEdit","canResize","getResizerProps","isResizing","e","stopPropagation","render","getRowProps","wasRowSelected","isSelected","selectableRow","selectedRow","cells","cell","cellProps","getCellProps","cellEditIcon","cellEditIconSelected","tableFooter","getCSVFileName","paginationContainer","EditIcon","headerEditIcon","useTooltipStyles","createStyles","theme","info","color","colors","dark","header","background","margin","padding","shortcut","display","justifyContent","command","backgroundColor","gray","borderRadius","EditTooltip","RowActionsMenu","dropdown","ellipsisMenuButton","currColumns","newColumns","currColumn","newColumn","key","endsWith","flex"],"mappings":"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"}