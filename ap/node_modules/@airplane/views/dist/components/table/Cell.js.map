{"version":3,"file":"Cell.js","sources":["../../../src/components/table/Cell.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { JsonInput, JsonInputProps, useMantineTheme } from \"@mantine/core\";\nimport { useCallback, useState } from \"react\";\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { CellProps, Column, Row } from \"react-table\";\n\nimport { assertNever } from \"assertNever\";\nimport { CheckboxComponent as Checkbox } from \"components/checkbox/Checkbox\";\nimport { Code } from \"components/code/Code\";\nimport { DatePickerComponent as DatePicker } from \"components/datepicker/DatePicker\";\nimport {\n  DateTimePickerComponent as DateTimePicker,\n  formatDatetime,\n} from \"components/datepicker/DateTimePicker\";\nimport { PencilSquareIconOutline } from \"components/icon\";\nimport { Link } from \"components/link/Link\";\nimport { NumberInputComponent as NumberInput } from \"components/number/NumberInput\";\nimport { SelectComponent as Select } from \"components/select/Select\";\nimport { TextareaComponent } from \"components/textarea/Textarea\";\n\nimport { useStyles } from \"./Cell.styles\";\nimport { useClickOutside } from \"./useClickOutside\";\nimport { OverflowText } from \"./useIsOverflow\";\nimport useKeyPress, { KeyPressProps } from \"./useKeyPress\";\n\nexport type CellType =\n  | \"boolean\"\n  | \"number\"\n  | \"date\"\n  | \"datetime\"\n  | \"string\"\n  | \"json\"\n  | \"select\"\n  | \"link\";\n\nconst CellComponent = <TRowData extends object>({\n  value: initialValue,\n  row,\n  column: { id, canEdit, type, wrap, Component, typeOptions, EditComponent },\n  updateData,\n  dirtyCells,\n}: CellProps<TRowData> & {\n  updateData: (row: Row<TRowData>, columnId: string, value: unknown) => void;\n  dirtyCells: Record<string, Set<string>>;\n}) => {\n  const [value, setValue] = useState(initialValue);\n  const [editing, setEditing] = useState(false);\n  const { classes, cx } = useStyles();\n\n  // If the initialValue is changed external, sync it up with our state\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n\n  const onChange = useCallback(\n    (v: any, shouldUpdateTable?: boolean) => {\n      setValue(v);\n      // Usually we only update the external data when editing is finished.\n      // We can optionally update it without this for inputs where editing\n      // is always enabled like a checkbox.\n      if (shouldUpdateTable) {\n        updateData(row, id, v);\n      }\n    },\n    [id, row, updateData],\n  );\n\n  const startEditing = useCallback(() => setEditing(true), [setEditing]);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const finishEditing = useCallback(\n    (newValue: any) => {\n      setEditing(false);\n      updateData(row, id, newValue);\n    },\n    [setEditing, updateData, id, row],\n  );\n\n  if (Component && !editing) {\n    return (\n      <div className={cx(classes.cellPadding, classes.cell)}>\n        <Component\n          value={value}\n          row={row.original}\n          startEditing={canEdit ? startEditing : undefined}\n        />\n      </div>\n    );\n  }\n\n  const cellType = type || getDefaultCellType(value, typeOptions);\n\n  const cancelEdit = () => setValue(initialValue);\n\n  if (editing || (canEdit && alwaysEditingCellTypes.includes(cellType))) {\n    if (EditComponent) {\n      return (\n        <div className={cx(classes.cellPadding, classes.cell)}>\n          <EditComponent defaultValue={value} finishEditing={finishEditing} />\n        </div>\n      );\n    }\n    return (\n      <EditableCell\n        value={value}\n        onChange={onChange}\n        type={cellType}\n        typeOptions={typeOptions}\n        isDirty={dirtyCells[row.id]?.has(id)}\n        onStopEditing={(cancel?: boolean) => {\n          setEditing(false);\n          if (cancel) {\n            cancelEdit();\n          } else {\n            updateData(row, id, value);\n          }\n        }}\n      />\n    );\n  }\n\n  return (\n    <StaticCell\n      value={value}\n      type={cellType}\n      typeOptions={typeOptions}\n      wrap={wrap}\n      onEdit={canEdit ? () => setEditing(true) : undefined}\n      isDirty={dirtyCells[row.id]?.has(id)}\n    />\n  );\n};\n\nexport const Cell = React.memo(\n  CellComponent,\n  (\n    {\n      value: prevValue,\n      row: prevRow,\n      column: prevColumn,\n      updateData: prevUpdateData,\n      dirtyCells: prevDirtyCells,\n    },\n    { value, row, column, updateData, dirtyCells },\n  ) => {\n    // We must check equality for all props that we are using in CellComponent.\n    const { id, canEdit, type, wrap, Component } = column;\n    const {\n      id: prevID,\n      canEdit: prevCanEdit,\n      type: prevType,\n      wrap: prevWrap,\n      Component: PrevComponent,\n    } = prevColumn;\n    return (\n      value === prevValue &&\n      updateData === prevUpdateData &&\n      id === prevID &&\n      canEdit === prevCanEdit &&\n      wrap === prevWrap &&\n      Component === PrevComponent &&\n      type === prevType &&\n      row === prevRow &&\n      dirtyCells === prevDirtyCells\n    );\n  },\n);\n\ntype StaticCellProps = {\n  value: any;\n  type: CellType;\n  typeOptions?: Column[\"typeOptions\"];\n  wrap?: boolean;\n  onEdit?: () => void;\n  isDirty?: boolean;\n};\n\nconst StaticCell = (props: StaticCellProps) => {\n  const { onEdit, isDirty } = props;\n  const { classes, cx } = useStyles();\n\n  return (\n    <div\n      className={cx(classes.cell, {\n        [classes.dirty]: isDirty,\n      })}\n      data-testid={`static-cell${isDirty ? \"-dirty\" : \"\"}`}\n    >\n      <StaticCellValue {...props} />\n      {onEdit && (\n        <div className=\"cellEditIcon\">\n          <PencilSquareIconOutline\n            onClick={(e) => {\n              onEdit();\n              e.stopPropagation();\n            }}\n            style={{ cursor: \"pointer\" }}\n            data-testid=\"edit-icon\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst StaticCellValue = ({\n  type,\n  typeOptions,\n  wrap,\n  value,\n  onEdit,\n}: StaticCellProps) => {\n  const { classes } = useStyles();\n  const canEdit = !!onEdit;\n  if (type === \"string\") {\n    return (\n      <OverflowText\n        className={classes.cellPadding}\n        wrap={wrap}\n        value={value != null ? String(value) : value}\n      />\n    );\n  } else if (type === \"link\") {\n    if (!value) return null;\n    return (\n      <OverflowText\n        className={classes.cellPadding}\n        wrap={wrap}\n        value={\n          <Link size=\"sm\" href={value} className={classes.link}>\n            <span className={classes.linkSpan}>{value}</span>\n          </Link>\n        }\n      />\n    );\n  } else if (type === \"number\") {\n    return (\n      <OverflowText className={classes.cellPadding} wrap={wrap} value={value} />\n    );\n  } else if (type === \"boolean\") {\n    return <CheckboxCell value={value} />;\n  } else if (type === \"date\") {\n    let v;\n    if (value != null) {\n      const d = new Date(value);\n      v = d.toLocaleDateString(\"en-us\", {\n        month: \"short\",\n        day: \"2-digit\",\n        year: \"numeric\",\n      });\n    }\n    return (\n      <OverflowText className={classes.cellPadding} wrap={wrap} value={v} />\n    );\n  } else if (type === \"datetime\") {\n    let v;\n    if (value != null) {\n      v = formatDatetime(value);\n    }\n    return (\n      <OverflowText className={classes.cellPadding} wrap={wrap} value={v} />\n    );\n  } else if (type === \"json\") {\n    return (\n      <Code\n        language=\"json\"\n        copy={!canEdit}\n        theme=\"light\"\n        style={{\n          width: \"100%\",\n          cursor: \"default\",\n        }}\n        radius={0}\n      >\n        {formatJSON(value)}\n      </Code>\n    );\n  } else if (type === \"select\") {\n    if (!typeOptions?.selectData) {\n      throw new Error(\"Missing selectData in column.typeOptions\");\n    }\n    return (\n      <Select\n        className={classes.cellPadding}\n        value={value}\n        data={typeOptions.selectData}\n        clearable={false}\n        size=\"sm\"\n        readOnly\n        withinPortal\n        unstyled\n      />\n    );\n  } else {\n    assertNever(type);\n    return null;\n  }\n};\n\nconst textareaEditCompleteKeys = [[\"Enter\", \"Shift\"], \"Tab\"];\nconst editCompleteKeys = [\"Enter\", \"Tab\"];\nconst editCancelKeys = [\"Escape\"];\nconst alwaysEditingCellTypes: Column[\"type\"][] = [\"boolean\"];\n\ntype EditableCellProps = {\n  value: any;\n  type: CellType;\n  typeOptions?: Column[\"typeOptions\"];\n  onChange: (value: any, shouldUpdateTable?: boolean) => void;\n  onStopEditing: (cancel?: boolean) => void;\n  isDirty?: boolean;\n};\n\nconst EditableCell = (props: EditableCellProps) => {\n  const { value, type, typeOptions, onChange, onStopEditing, isDirty } = props;\n  const { classes, cx } = useStyles();\n  const ref = useClickOutside(onStopEditing);\n  let targetCompleteKeys: KeyPressProps[\"targetKeys\"] = editCompleteKeys;\n  let listenToWindow = true;\n  switch (type) {\n    case \"string\":\n    case \"json\":\n    case \"link\":\n      targetCompleteKeys = textareaEditCompleteKeys;\n      listenToWindow = false;\n      break;\n    case \"boolean\":\n      targetCompleteKeys = \"\";\n      listenToWindow = false;\n      break;\n  }\n  const editComplete = useKeyPress({\n    targetKeys: targetCompleteKeys,\n    listenToWindow,\n  });\n  const editCancelKeyPressed = useKeyPress({\n    targetKeys: editCancelKeys,\n    listenToWindow: true,\n  });\n  const [hover, setHover] = useState(false);\n\n  useEffect(() => {\n    if (editComplete.keyPressed) {\n      onStopEditing();\n    }\n  }, [type, editComplete.keyPressed, onStopEditing]);\n\n  useEffect(() => {\n    if (editCancelKeyPressed.keyPressed) {\n      onStopEditing(true);\n    }\n  }, [editCancelKeyPressed.keyPressed, onStopEditing]);\n\n  let cell: React.ReactNode;\n  switch (type) {\n    case \"string\":\n    case \"link\":\n      cell = (\n        <TextareaComponent\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          onClick={(e) => e.stopPropagation()}\n          data-cy=\"cell-text-input\"\n          size=\"sm\"\n          variant=\"unstyled\"\n          autoFocus\n          onFocus={(e) => {\n            // Moves cursor to end of input.\n            const val = e.target.value;\n            e.target.value = \"\";\n            e.target.value = val;\n          }}\n          autosize\n          onKeyDown={(e) => {\n            const isPressed = editComplete.downHandler(e);\n            if (isPressed) {\n              e.preventDefault();\n            }\n          }}\n          onKeyUp={editComplete.upHandler}\n          classNames={{\n            input: classes.textareaInput,\n            wrapper: classes.textareaWrapper,\n            root: classes.textareaRoot,\n          }}\n          ref={ref}\n        />\n      );\n      break;\n    case \"number\":\n      cell = (\n        <NumberInput\n          value={value}\n          onChange={(v) => {\n            if (v != null && typeOptions?.numberMin != null) {\n              v = Math.max(typeOptions.numberMin, v);\n            }\n            if (v != null && typeOptions?.numberMax != null) {\n              v = Math.min(typeOptions.numberMax, v);\n            }\n            onChange(v);\n          }}\n          onClick={(e) => e.stopPropagation()}\n          autoFocus\n          ref={ref}\n          variant=\"unstyled\"\n          size=\"sm\"\n          className={classes.cellPadding}\n        />\n      );\n      break;\n    case \"boolean\":\n      cell = (\n        <CheckboxCell\n          value={value}\n          onChange={onChange}\n          hoveringOnCell={hover}\n        />\n      );\n      break;\n    case \"date\":\n      cell = (\n        <DatePicker\n          value={value == null ? new Date() : new Date(value)}\n          onChange={onChange}\n          initiallyOpened\n          onDropdownClose={onStopEditing}\n          clearable={false}\n          closeCalendarOnChange={false}\n          variant=\"unstyled\"\n          size=\"sm\"\n          withinPortal\n          autoFocus\n          className={classes.cellPadding}\n        />\n      );\n      break;\n    case \"datetime\":\n      cell = (\n        <DateTimePicker\n          value={value == null ? new Date() : new Date(value)}\n          onChange={onChange}\n          initiallyOpened\n          onDropdownClose={onStopEditing}\n          clearable={false}\n          variant=\"unstyled\"\n          size=\"sm\"\n          withinPortal\n          autoFocus\n          className={classes.cellPadding}\n        />\n      );\n      break;\n    case \"json\": {\n      cell = (\n        <EditableJSON\n          onChange={onChange}\n          onStopEditing={onStopEditing}\n          ref={ref}\n          value={value}\n          onKeyDown={(e) => {\n            const isPressed = editComplete.downHandler(e);\n            if (isPressed) {\n              e.preventDefault();\n            }\n          }}\n          onKeyUp={editComplete.upHandler}\n        />\n      );\n      break;\n    }\n    case \"select\":\n      if (!typeOptions?.selectData) {\n        throw new Error(\"Missing selectData in column.typeOptions\");\n      }\n      cell = (\n        <Select\n          value={value}\n          data={typeOptions.selectData}\n          initiallyOpened\n          clearable={false}\n          size=\"sm\"\n          onChange={onChange}\n          ref={ref}\n          withinPortal\n          unstyled\n          classNames={{ root: classes.cellPadding }}\n        />\n      );\n      break;\n    default:\n      assertNever(type);\n  }\n\n  return (\n    <div\n      className={cx(classes.cell, {\n        [classes.editingCell]: type !== \"boolean\" && type !== \"json\",\n        // Only set dirty for boolean cells because it looks weird when editing cells\n        // of other types.\n        [classes.dirty]: isDirty && type === \"boolean\",\n      })}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      data-testid={`editable-cell${isDirty ? \"-dirty\" : \"\"}`}\n    >\n      {cell}\n    </div>\n  );\n};\n\ntype EditableJSONProps = {\n  value: any;\n  onChange: (value: any, shouldUpdateTable?: boolean) => void;\n  onStopEditing: (cancel?: boolean) => void;\n};\n\nconst EditableJSON = React.forwardRef<\n  HTMLTextAreaElement,\n  EditableJSONProps & Pick<JsonInputProps, \"onKeyDown\" | \"onKeyUp\">\n>(({ value, onChange, onStopEditing: _, ...props }, ref) => {\n  const [previousValue, setPreviousValue] = useState(\"\");\n  useEffect(() => {\n    if (previousValue != value) {\n      setPreviousValue(\"\");\n    }\n  }, [value, setPreviousValue, previousValue]);\n\n  let v = value;\n  if (previousValue !== value) {\n    // Only reformat when the value has changed.\n    v = formatJSON(value);\n  }\n\n  return (\n    // TODO: replace with Views component\n    <JsonInput\n      value={v}\n      onChange={(v) => {\n        onChange(v);\n        setPreviousValue(v);\n      }}\n      onClick={(e) => e.stopPropagation()}\n      minRows={8}\n      autoFocus\n      ref={ref}\n      sx={{ width: \"100%\" }}\n      {...props}\n    />\n  );\n});\nEditableJSON.displayName = \"JsonInput\";\n\ntype CheckboxCellProps = {\n  value: any;\n  onChange?: (value: any, shouldUpdateTable: boolean) => void;\n  hoveringOnCell?: boolean;\n};\n\nconst CheckboxCell = ({\n  value,\n  onChange,\n  hoveringOnCell,\n}: CheckboxCellProps) => {\n  const theme = useMantineTheme();\n  const { classes } = useStyles();\n  return (\n    <Checkbox\n      aria-label=\"toggle\"\n      checked={value === true || value === \"true\"}\n      onChange={(checked) => onChange?.(checked, true)}\n      onClick={(e) => e.stopPropagation()}\n      data-cy=\"cell-checkbox\"\n      size=\"md\"\n      styles={{\n        input: {\n          backgroundColor: \"white !important\",\n          border: hoveringOnCell && onChange ? undefined : \"none\",\n          borderColor: `${theme.colors.dark[0]} !important`,\n          cursor: onChange ? undefined : \"default\",\n        },\n        icon: {\n          color: `${theme.colors.primary[5]} !important`,\n        },\n      }}\n      className={classes.checkboxCellPadding}\n    />\n  );\n};\n\nfunction formatJSON(value: any): string {\n  let v = value;\n  if (typeof value === \"string\") {\n    try {\n      v = JSON.stringify(JSON.parse(value), null, 2);\n    } catch (e) {\n      // Nothing\n    }\n  } else if (value == null) {\n    return \"\";\n  } else {\n    try {\n      v = JSON.stringify(value, null, 2);\n    } catch (e) {\n      // Nothing\n    }\n  }\n  return String(v);\n}\n\n// https://stackoverflow.com/a/37563868\nconst ISO_8601_FULL =\n  /^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/i;\n\nexport function getDefaultCellType(\n  value: unknown,\n  typeOptions: Column[\"typeOptions\"],\n): CellType {\n  if (typeof value === \"boolean\") {\n    return \"boolean\";\n  } else if (typeof value === \"number\") {\n    return \"number\";\n  } else if (value instanceof Date) {\n    return \"datetime\";\n  } else if (value && typeof value === \"object\") {\n    return \"json\";\n  } else if (typeof value === \"string\" && ISO_8601_FULL.test(value)) {\n    return \"datetime\";\n  } else if (typeOptions?.selectData) {\n    return \"select\";\n  }\n  return \"string\";\n}\n\nexport const dateTimeSort = (\n  rowA: Row<any>,\n  rowB: Row<any>,\n  columnID: string,\n) => {\n  const diff =\n    new Date(rowA.values[columnID]).getTime() -\n    new Date(rowB.values[columnID]).getTime();\n  if (!diff) return 0;\n  return diff > 0 ? 1 : -1;\n};\n"],"names":["CellComponent","value","initialValue","row","column","id","canEdit","type","wrap","Component","typeOptions","EditComponent","updateData","dirtyCells","setValue","useState","editing","setEditing","classes","cx","useStyles","useEffect","onChange","useCallback","v","shouldUpdateTable","startEditing","finishEditing","newValue","cellPadding","cell","original","undefined","cellType","getDefaultCellType","cancelEdit","alwaysEditingCellTypes","includes","has","cancel","Cell","React","memo","prevValue","prevRow","prevColumn","prevUpdateData","prevDirtyCells","prevID","prevCanEdit","prevType","prevWrap","PrevComponent","StaticCell","props","onEdit","isDirty","dirty","e","stopPropagation","cursor","StaticCellValue","String","link","linkSpan","d","Date","toLocaleDateString","month","day","year","formatDatetime","width","formatJSON","selectData","Error","Select","assertNever","textareaEditCompleteKeys","editCompleteKeys","editCancelKeys","EditableCell","onStopEditing","ref","useClickOutside","targetCompleteKeys","listenToWindow","editComplete","useKeyPress","targetKeys","editCancelKeyPressed","hover","setHover","keyPressed","target","val","isPressed","downHandler","preventDefault","upHandler","input","textareaInput","wrapper","textareaWrapper","root","textareaRoot","NumberInput","numberMin","Math","max","numberMax","min","DatePicker","DateTimePicker","editingCell","EditableJSON","forwardRef","_","previousValue","setPreviousValue","displayName","CheckboxCell","hoveringOnCell","theme","useMantineTheme","Checkbox","checked","backgroundColor","border","borderColor","colors","dark","icon","color","primary","checkboxCellPadding","JSON","stringify","parse","ISO_8601_FULL","test","dateTimeSort","rowA","rowB","columnID","diff","values","getTime"],"mappings":"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"}