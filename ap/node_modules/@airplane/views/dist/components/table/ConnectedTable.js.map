{"version":3,"file":"ConnectedTable.js","sources":["../../../src/components/table/ConnectedTable.tsx"],"sourcesContent":["import type { RunStatus } from \"airplane/api\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\nimport { DefaultParams } from \"client\";\nimport { UnconnectedButton } from \"components/button/Button\";\nimport { getFullMutation, getSlug } from \"components/query\";\nimport { fontFamily } from \"components/theme/typography\";\nimport { useTableState } from \"state/components/table\";\nimport { useComponentId } from \"state/components/useId\";\nimport { MutationState } from \"state/tasks/useTaskMutation\";\n\nimport {\n  BasicRowAction,\n  Column,\n  ComponentRowAction,\n  ConnectedTableProps,\n  TaskRowAction,\n} from \"./Table.types\";\nimport { TableComponent, TableComponentElement } from \"./TableComponent\";\n\n/**\n * ConnectedTable is a table that's connected to the global component state.\n */\nexport const ConnectedTable = <TRowData extends object>(\n  props: ConnectedTableProps<TRowData>,\n) => {\n  const tableComponentRef = useRef<TableComponentElement>(null);\n  const clearSelection = useCallback(\n    () => tableComponentRef.current!.toggleAllRowsSelected(false),\n    [tableComponentRef],\n  );\n  const id = useComponentId(props.id);\n  const { changeRowSelection, setRowActionResult } = useTableState<TRowData>(\n    id,\n    {\n      singleSelect: props.rowSelection === \"single\",\n      clearSelection,\n    },\n  );\n\n  // Used to approximate the width of text on screen\n  const canvas = useMemo(() => document.createElement(\"canvas\"), []);\n\n  const rowActions = getRowActions(props.rowActions, setRowActionResult);\n  const rowActionsMenu = getRowActions(\n    props.rowActionsMenu,\n    setRowActionResult,\n    true,\n  );\n  const rowActionsMenuWidth = getRowActionsMenuWidth(\n    props.rowActionsMenu,\n    canvas,\n  );\n\n  const columns = useColumns(props.data, props.columns, props.columnsTransform);\n\n  return (\n    <TableComponent\n      {...props}\n      columns={columns}\n      rowActions={rowActions}\n      rowActionsMenu={rowActionsMenu}\n      rowActionsMenuWidth={rowActionsMenuWidth}\n      onRowSelectionChanged={changeRowSelection}\n      tableRef={tableComponentRef}\n    />\n  );\n};\n\nfunction getRowActions<TRowData extends object>(\n  rowActions: ConnectedTableProps<TRowData>[\"rowActions\"],\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setRowActionResult: (mutation: MutationState<any>) => void,\n  inMenu?: boolean,\n): ComponentRowAction<TRowData>[] | undefined {\n  if (rowActions === undefined) {\n    return undefined;\n  }\n  const arrayRowActions = Array.isArray(rowActions) ? rowActions : [rowActions];\n\n  return arrayRowActions.map((rowAction) => {\n    if (typeof rowAction === \"function\") {\n      return rowAction;\n    }\n    if (\n      typeof rowAction !== \"string\" &&\n      !(\"slug\" in rowAction) &&\n      !(\"fn\" in rowAction)\n    ) {\n      const WrappedButton: ComponentRowAction<TRowData> = ({ row }) => {\n        return (\n          <RowActionButton<TRowData>\n            rowAction={rowAction}\n            row={row}\n            inMenu={inMenu}\n          />\n        );\n      };\n      return WrappedButton;\n    }\n    const WrappedButton: ComponentRowAction<TRowData> = ({ row }) => {\n      return (\n        <RowActionButtonWithTask<TRowData>\n          rowAction={rowAction}\n          setRowActionResult={setRowActionResult}\n          row={row}\n          inMenu={inMenu}\n        />\n      );\n    };\n    return WrappedButton;\n  });\n}\n\nfunction getRowActionsMenuWidth<TRowData extends object>(\n  rowActions: ConnectedTableProps<TRowData>[\"rowActionsMenu\"],\n  canvas: HTMLCanvasElement,\n): number | undefined {\n  if (rowActions === undefined) {\n    return undefined;\n  }\n  const arrayRowActions = Array.isArray(rowActions) ? rowActions : [rowActions];\n\n  if (\n    arrayRowActions.some((rowAction) => typeof rowAction === \"function\") ||\n    arrayRowActions.length === 0\n  ) {\n    return undefined;\n  }\n\n  const context = canvas.getContext(\"2d\");\n  if (context) {\n    context.font = `14px ${fontFamily}`;\n  }\n\n  const getTextWidth = (text: string) => {\n    if (context) {\n      return context.measureText(text).width;\n    }\n    // This shouldn't happen, but fall back to a default width per character\n    return 10 * text.length;\n  };\n\n  const widths = arrayRowActions.map((rowAction) => {\n    if (typeof rowAction === \"function\") {\n      throw new Error(\"component row action has no width\");\n    }\n    let label = \"\";\n    if (\n      typeof rowAction !== \"string\" &&\n      !(\"slug\" in rowAction) &&\n      !(\"fn\" in rowAction)\n    ) {\n      label = rowAction.label;\n    } else {\n      const fullMutation = getFullMutation(rowAction);\n      const slug = getSlug(fullMutation);\n      label = rowAction.label ?? slug;\n    }\n    // Account for 10px of padding on the left and right, and 5% error margin\n    return getTextWidth(label) * 1.05 + 20;\n  });\n  // maximum width plus padding\n  return widths.reduce((a, b) => Math.max(a, b)) + 8;\n}\n\nconst RowActionButton = <TRowData extends object>({\n  rowAction,\n  row,\n  inMenu,\n}: {\n  rowAction: BasicRowAction<TRowData>;\n  row: TRowData;\n  inMenu?: boolean;\n}) => {\n  const label = rowAction.label;\n  const buttonDisplayProps = getButtonDisplayProps(rowAction, inMenu);\n\n  if (\"href\" in rowAction && rowAction.href) {\n    return (\n      <UnconnectedButton\n        href={rowAction.href(row)}\n        newTab={rowAction.newTab}\n        stopPropagation\n        {...buttonDisplayProps}\n      >\n        {label}\n      </UnconnectedButton>\n    );\n  } else {\n    return (\n      <UnconnectedButton\n        confirm={\n          typeof rowAction.confirm === \"function\"\n            ? rowAction.confirm(row)\n            : rowAction.confirm\n        }\n        onClick={() => {\n          rowAction.onClick(row);\n        }}\n        stopPropagation\n        {...buttonDisplayProps}\n      >\n        {label}\n      </UnconnectedButton>\n    );\n  }\n};\n\nconst RowActionButtonWithTask = <TRowData extends object>({\n  rowAction,\n  setRowActionResult,\n  row,\n  inMenu,\n}: {\n  rowAction: TaskRowAction<TRowData>;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setRowActionResult: (mutation: MutationState<any>) => void;\n  row: TRowData;\n  inMenu?: boolean;\n}) => {\n  const fullMutation = getFullMutation(rowAction);\n  const slug = getSlug(fullMutation);\n  const label = rowAction.label ?? slug;\n  const { onSuccess: fullMutationOnSuccess, onError: fullMutationOnError } =\n    fullMutation;\n  const onSuccess = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (output: any, runID: string) => {\n      setRowActionResult({\n        output,\n      });\n      fullMutationOnSuccess?.(output, runID);\n    },\n    [setRowActionResult, fullMutationOnSuccess],\n  );\n  const onError = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (output: any, error: any, runID?: string, status?: RunStatus) => {\n      setRowActionResult({\n        output,\n        error,\n      });\n      fullMutationOnError?.(output, error, runID);\n    },\n    [setRowActionResult, fullMutationOnError],\n  );\n  let getParamsFromRow = (row: TRowData): DefaultParams => row;\n  if (rowAction.getParamsFromRow) {\n    getParamsFromRow = rowAction.getParamsFromRow;\n  } else if (rowAction.rowTransform) {\n    // rowTransform is the deprecated version of getParamsFromRow.\n    getParamsFromRow = rowAction.rowTransform;\n  }\n  const r = getParamsFromRow(row);\n  const m: typeof fullMutation = {\n    ...fullMutation,\n    params: {\n      ...r,\n      ...fullMutation?.params,\n    },\n    onSuccess,\n    onError,\n  };\n  const buttonDisplayProps = getButtonDisplayProps(rowAction, inMenu);\n  return (\n    <UnconnectedButton\n      task={m}\n      confirm={\n        typeof rowAction.confirm === \"function\"\n          ? rowAction.confirm(row)\n          : rowAction.confirm\n      }\n      stopPropagation\n      {...buttonDisplayProps}\n    >\n      {label}\n    </UnconnectedButton>\n  );\n};\n\nconst getButtonDisplayProps = <TRowData extends object>(\n  rowAction: TaskRowAction<TRowData, DefaultParams> | BasicRowAction<TRowData>,\n  inMenu: boolean | undefined,\n) => {\n  const buttonProps: Record<string, unknown> = {\n    compact: true,\n    size: \"sm\",\n    preset: rowAction.preset,\n    variant: rowAction.variant || (rowAction.preset ? undefined : \"subtle\"),\n    color: rowAction.color,\n  };\n  if (rowAction.disabled !== undefined) {\n    buttonProps.disabled = rowAction.disabled;\n  }\n  if (inMenu) {\n    buttonProps.fullWidth = true;\n    buttonProps.leftAlign = true;\n    buttonProps.disableFocusRing = true;\n    buttonProps.radius = \"sm\";\n  }\n  return buttonProps;\n};\n\n/**\n * useColumns is a hook that intelligently gets the columns for the table.\n *\n * This hook...\n * 1. Infers columns from the data\n * 2. Applies column transforms\n */\nconst useColumns = <TRowData extends object>(\n  data: TRowData[],\n  columns?: (Column<TRowData> | keyof TRowData)[],\n  columnsTransform?: ConnectedTableProps<TRowData>[\"columnsTransform\"],\n) => {\n  return useMemo(() => {\n    const outputColumns = columns\n      ? createColumns(columns)\n      : tryInferColumns(data);\n    if (columnsTransform) {\n      return columnsTransform(outputColumns);\n    }\n    return outputColumns;\n  }, [data, columns, columnsTransform]);\n};\n\nconst createColumns = <TRowData extends object>(\n  columns: (Column<TRowData> | keyof TRowData)[],\n): Column<TRowData>[] => {\n  return columns.map((colOrAccessor) => {\n    if (isColumn(colOrAccessor)) {\n      return {\n        ...colOrAccessor,\n        label:\n          colOrAccessor.label === undefined\n            ? colOrAccessor.accessor.toString()\n            : colOrAccessor.label,\n      };\n    } else {\n      return {\n        accessor: colOrAccessor,\n        label: colOrAccessor.toString(),\n      };\n    }\n  });\n};\n\nconst isColumn = <TRowData extends object>(\n  colOrAccessor: Column<TRowData> | keyof TRowData,\n): colOrAccessor is Column<TRowData> => {\n  return typeof colOrAccessor === \"object\";\n};\n\nconst tryInferColumns = <TRowData extends object>(\n  data: ConnectedTableProps<TRowData>[\"data\"],\n): Column<TRowData>[] => {\n  if (data.length) {\n    const keySet = new Set<keyof TRowData>();\n    const keys: (keyof TRowData)[] = [];\n    for (const row of data) {\n      // The type assertion assumes that the data generic type\n      // is an exact type (i.e. no extra properties) of the generic.\n      for (const key of Object.keys(row) as Array<keyof TRowData>) {\n        if (!keySet.has(key)) {\n          keys.push(key);\n          keySet.add(key);\n        }\n      }\n    }\n    return keys.map((key) => ({\n      label: key.toString(),\n      accessor: key,\n    }));\n  }\n  return [];\n};\n"],"names":["ConnectedTable","props","tableComponentRef","useRef","clearSelection","useCallback","current","toggleAllRowsSelected","id","useComponentId","changeRowSelection","setRowActionResult","useTableState","singleSelect","rowSelection","canvas","useMemo","document","createElement","rowActions","getRowActions","rowActionsMenu","rowActionsMenuWidth","getRowActionsMenuWidth","columns","useColumns","data","columnsTransform","inMenu","undefined","arrayRowActions","Array","isArray","map","rowAction","WrappedButton","row","some","length","context","getContext","font","fontFamily","getTextWidth","text","measureText","width","widths","Error","label","fullMutation","getFullMutation","slug","getSlug","reduce","a","b","Math","max","RowActionButton","buttonDisplayProps","getButtonDisplayProps","href","newTab","confirm","onClick","RowActionButtonWithTask","onSuccess","fullMutationOnSuccess","onError","fullMutationOnError","output","runID","error","status","getParamsFromRow","rowTransform","r","m","params","buttonProps","compact","size","preset","variant","color","disabled","fullWidth","leftAlign","disableFocusRing","radius","outputColumns","createColumns","tryInferColumns","colOrAccessor","isColumn","accessor","toString","keySet","Set","keys","key","Object","has","push","add"],"mappings":"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"}