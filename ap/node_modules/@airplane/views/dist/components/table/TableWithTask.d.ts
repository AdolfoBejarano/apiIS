import { DefaultParams, ParamValues } from "../../client";
import { SetLatestRunProps } from "../../components/errorBoundary/LatestRunDetails";
import { TableProps, TableWithTaskProps } from "./Table.types";
/**
 * TableWithTask is a connected table that can directly populate its data from a task.
 */
export declare const TableWithTask: <TRowData extends object, TParams extends ParamValues | undefined = DefaultParams, TOutput = any>({ outputTransform, task, rowActions, rowActionsMenu, setLatestRun, ...tableProps }: {
    task: import("../../components/query").TaskQuery<TParams, TOutput>;
    outputTransform?: ((output: TOutput) => TRowData[]) | undefined;
    data?: undefined;
} & {
    id?: string | undefined;
    rowActions?: import("./Table.types").ComponentRowAction<TRowData> | import("./Table.types").TaskRowAction<TRowData, DefaultParams> | import("./Table.types").BasicRowAction<TRowData> | (import("./Table.types").ComponentRowAction<TRowData> | import("./Table.types").TaskRowAction<TRowData, DefaultParams> | import("./Table.types").BasicRowAction<TRowData>)[] | undefined;
    rowActionsMenu?: import("./Table.types").TaskRowAction<TRowData, DefaultParams> | import("./Table.types").BasicRowAction<TRowData> | (import("./Table.types").TaskRowAction<TRowData, DefaultParams> | import("./Table.types").BasicRowAction<TRowData>)[] | undefined;
    columns?: (keyof TRowData | import("./Table.types").Column<TRowData>)[] | undefined;
    columnsTransform?: ((columns: import("./Table.types").Column<TRowData>[]) => import("./Table.types").Column<TRowData>[]) | undefined;
} & {
    rowSelection?: import("./Table.types").RowSelectionMode | undefined;
    selectAll?: boolean | undefined;
    loading?: boolean | undefined;
    defaultPageSize?: number | undefined;
    error?: string | undefined;
    noData?: string | undefined;
    title?: string | undefined;
    hiddenColumns?: string[] | undefined;
    showFilter?: boolean | undefined;
    rowID?: string | undefined;
    isDefaultSelectedRow?: ((row: TRowData, rowIndex: number) => boolean) | undefined;
    isSelectedRow?: ((row: TRowData, rowIndex: number) => boolean) | undefined;
    freezeRowActions?: boolean | undefined;
    rowActionsWidth?: number | undefined;
    enableCSVDownload?: string | boolean | undefined;
    onToggleRow?: ((row: TRowData, idx: number) => void) | undefined;
    onToggleAllRows?: ((value: boolean) => void) | undefined;
} & import("../layout/layout.types").CommonLayoutProps & import("../styling.types").CommonStylingProps & SetLatestRunProps) => import("react/jsx-runtime").JSX.Element;
export declare function doesUseTask<TRowData extends object, TParams extends ParamValues | undefined, TOutput>(props: TableProps<TRowData, TParams, TOutput>): props is TableWithTaskProps<TRowData, TParams, TOutput>;
