{"version":3,"file":"useIsOverflow.js","sources":["../../../src/components/table/useIsOverflow.tsx"],"sourcesContent":["import { createStyles, HoverCard } from \"@mantine/core\";\nimport { useState, useLayoutEffect, RefObject, useRef } from \"react\";\n\nimport { Label } from \"components/text/Text\";\nimport { FontWeight } from \"components/theme/typography\";\n\n// Modified from https://www.robinwieruch.de/react-custom-hook-check-if-overflow/\nexport const useIsOverflow = (ref: RefObject<HTMLElement>) => {\n  const [isOverflow, setIsOverflow] = useState<boolean | undefined>(undefined);\n\n  useLayoutEffect(() => {\n    const { current } = ref;\n\n    const trigger = () => {\n      const hasOverflow = current!.scrollWidth > current!.clientWidth;\n      setIsOverflow(hasOverflow);\n    };\n\n    if (current) {\n      trigger();\n      if (\"ResizeObserver\" in window) {\n        new ResizeObserver(trigger).observe(current);\n        new ResizeObserver(trigger).observe(document.body);\n      }\n    }\n  }, [ref]);\n\n  return isOverflow;\n};\n\nconst useStyles = createStyles(() => {\n  return {\n    truncate: {\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n    },\n    wrap: {\n      overflowWrap: \"break-word\",\n      overflow: \"hidden\",\n    },\n  };\n});\n\ntype OverflowTextProps = {\n  className?: string;\n  wrap?: boolean;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n  weight?: FontWeight;\n};\n\nexport const OverflowText = ({\n  className,\n  value,\n  wrap,\n  weight,\n}: OverflowTextProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const isOverflow = useIsOverflow(ref);\n  const { classes, cx } = useStyles();\n  const target = (\n    <Label\n      ref={ref}\n      size=\"md\"\n      className={cx(wrap ? classes.wrap : classes.truncate, className)}\n      weight={weight}\n    >\n      {value}\n    </Label>\n  );\n  return (\n    <HoverCard\n      position=\"right-start\"\n      shadow=\"sm\"\n      radius={4}\n      transitionDuration={300}\n      openDelay={300}\n      withinPortal\n    >\n      <HoverCard.Target>{target}</HoverCard.Target>\n      {isOverflow && (\n        <HoverCard.Dropdown>\n          <Label size=\"sm\">{value}</Label>\n        </HoverCard.Dropdown>\n      )}\n    </HoverCard>\n  );\n};\n"],"names":["useIsOverflow","ref","isOverflow","setIsOverflow","useState","undefined","useLayoutEffect","current","trigger","hasOverflow","scrollWidth","clientWidth","window","ResizeObserver","observe","document","body","useStyles","createStyles","truncate","textOverflow","whiteSpace","overflow","wrap","overflowWrap","OverflowText","className","value","weight","useRef","classes","cx","target"],"mappings":";;;;AAOaA,MAAAA,gBAAgBA,CAACC,QAAgC;AAC5D,QAAM,CAACC,YAAYC,aAAa,IAAIC,SAA8BC,MAAS;AAE3EC,kBAAgB,MAAM;AACd,UAAA;AAAA,MAAEC;AAAAA,IAAYN,IAAAA;AAEpB,UAAMO,UAAUA,MAAM;AACdC,YAAAA,cAAcF,QAASG,cAAcH,QAASI;AACpDR,oBAAcM,WAAW;AAAA,IAAA;AAG3B,QAAIF,SAAS;AACH;AACR,UAAI,oBAAoBK,QAAQ;AAC9B,YAAIC,eAAeL,OAAO,EAAEM,QAAQP,OAAO;AAC3C,YAAIM,eAAeL,OAAO,EAAEM,QAAQC,SAASC,IAAI;AAAA,MACnD;AAAA,IACF;AAAA,EAAA,GACC,CAACf,GAAG,CAAC;AAEDC,SAAAA;AACT;AAEA,MAAMe,YAAYC,aAAa,MAAM;AAC5B,SAAA;AAAA,IACLC,UAAU;AAAA,MACRC,cAAc;AAAA,MACdC,YAAY;AAAA,MACZC,UAAU;AAAA,IACZ;AAAA,IACAC,MAAM;AAAA,MACJC,cAAc;AAAA,MACdF,UAAU;AAAA,IACZ;AAAA,EAAA;AAEJ,CAAC;AAUM,MAAMG,eAAeA,CAAC;AAAA,EAC3BC;AAAAA,EACAC;AAAAA,EACAJ;AAAAA,EACAK;AACiB,MAAM;AACjB3B,QAAAA,MAAM4B,OAAuB,IAAI;AACjC3B,QAAAA,aAAaF,cAAcC,GAAG;AAC9B,QAAA;AAAA,IAAE6B;AAAAA,IAASC;AAAAA,MAAOd,UAAU;AAClC,QAAMe,SACH,oBAAA,OAAA,EACC,KACA,MAAK,MACL,WAAWD,GAAGR,OAAOO,QAAQP,OAAOO,QAAQX,UAAUO,SAAS,GAC/D,QAECC,UACH,MAAA,CAAA;AAEF,SACG,qBAAA,WAAA,EACC,UAAS,eACT,QAAO,MACP,QAAQ,GACR,oBAAoB,KACpB,WAAW,KACX,cAAY,MAEZ,UAAA;AAAA,IAAC,oBAAA,UAAU,QAAV,EAAkBK,UAAO,OAAA,CAAA;AAAA,IACzB9B,cACE,oBAAA,UAAU,UAAV,EACC,8BAAC,OAAM,EAAA,MAAK,MAAMyB,UAAAA,MAAAA,CAAM,EAC1B,CAAA;AAAA,EAEJ,EAAA,CAAA;AAEJ;"}