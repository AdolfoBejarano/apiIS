{"version":3,"file":"useResizeColumns.js","sources":["../../../src/components/table/useResizeColumns.js"],"sourcesContent":["// Based on src/plugin-hooks/useResizeColumn.js in github.com/TanStack/table (v7 branch)\n//\n// The main approach is that we store the total offsetWidth (i.e. actual pixel width) of\n// the row (in rowOffsetWidth) and the total flex width of the row (i.e. sum of flex\n// widths of each column, in totalFlexWidth). Then, given how many pixels the mouse has\n// moved while dragging the resizer, we can compute how much the flex width of a column\n// needs to change for the column pixel width to be set to the correct amount.\n//\n// Changes from the original are marked with CHANGE comments.\nimport React from \"react\";\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from \"react-table\";\n\n// Default Column\ndefaultColumn.canResize = true;\n\n// Actions\nactions.columnStartResizing = \"columnStartResizing\";\nactions.columnResizing = \"columnResizing\";\nactions.columnDoneResizing = \"columnDoneResizing\";\nactions.resetResize = \"resetResize\";\n\nexport const useResizeColumns = (hooks) => {\n  hooks.getResizerProps = [defaultGetResizerProps];\n  hooks.getHeaderProps.push({\n    style: {\n      position: \"relative\",\n    },\n  });\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n};\n\n// CHANGE: getFirstDefined and passiveEventSupported are from table/src/utils.js in the above repo.\nfunction getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== \"undefined\") {\n      return args[i];\n    }\n  }\n}\n\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === \"boolean\") return passiveSupported;\n\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      },\n    };\n\n    window.addEventListener(\"test\", null, options);\n    window.removeEventListener(\"test\", null, options);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  // CHANGE: rowOffsetWidth (i.e. the actual row width) is expected to be passed into `instance`,\n  // so is pulled out here.\n  const { dispatch, visibleColumns, rowOffsetWidth } = instance;\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false;\n    if (e.type === \"touchstart\") {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n      isTouchEvent = true;\n    }\n    const headersToResize = getLeafHeaders(header);\n    const headerIdWidths = headersToResize.map((d) => [d.id, d.totalWidth]);\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n\n    let raf;\n    let mostRecentClientX;\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf);\n      raf = null;\n      dispatch({ type: actions.columnDoneResizing });\n    };\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf);\n      raf = null;\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX });\n    };\n\n    const scheduleDispatchMoveOnNextAnimationFrame = (clientXPos) => {\n      mostRecentClientX = clientXPos;\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove);\n      }\n    };\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: \"mousemove\",\n        moveHandler: (e) => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: \"mouseup\",\n        upHandler: (e) => {\n          document.removeEventListener(\n            \"mousemove\",\n            handlersAndEvents.mouse.moveHandler,\n          );\n          document.removeEventListener(\n            \"mouseup\",\n            handlersAndEvents.mouse.upHandler,\n          );\n          dispatchEnd();\n        },\n      },\n      touch: {\n        moveEvent: \"touchmove\",\n        moveHandler: (e) => {\n          if (e.cancelable) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX);\n          return false;\n        },\n        upEvent: \"touchend\",\n        upHandler: (e) => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler,\n          );\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler,\n          );\n          dispatchEnd();\n        },\n      },\n    };\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse;\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false;\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported,\n    );\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported,\n    );\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n      // CHANGE: we dispatch the start-resizing event including both the real\n      // row width, as well as the sum of the flex width (to compute the ratio between them).\n      rowOffsetWidth,\n      totalFlexWidth: visibleColumns.reduce(\n        (sum, col) => sum + col.totalFlexWidth,\n        0,\n      ),\n    });\n  };\n\n  return [\n    props,\n    {\n      onMouseDown: (e) => e.persist() || onResizeStart(e, header),\n      onTouchStart: (e) => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: \"col-resize\",\n      },\n      draggable: false,\n      role: \"separator\",\n    },\n  ];\n};\n\nuseResizeColumns.pluginName = \"useResizeColumns\";\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    };\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    };\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const {\n      clientX,\n      columnId,\n      columnWidth,\n      headerIdWidths,\n      rowOffsetWidth,\n      totalFlexWidth,\n    } = action;\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n        rowOffsetWidth,\n        totalFlexWidth,\n      },\n    };\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action;\n    const {\n      startX,\n      columnWidth,\n      headerIdWidths = [],\n      rowOffsetWidth,\n    } = state.columnResizing;\n\n    // CHANGE: here, we do a different computation to figure out the new column width (see below)\n    // so that the resizer moves by deltaX pixels.\n    const deltaX = clientX - startX;\n    const actualColumnWidth =\n      state.columnResizing.totalFlexWidth !== 0\n        ? (columnWidth * rowOffsetWidth) / state.columnResizing.totalFlexWidth\n        : columnWidth;\n\n    const targetColumnWidth = deltaX + actualColumnWidth;\n\n    // Solution to the equation:\n    // real column width + delta X = real row width (flex width + d) / (total flex width + d)\n    // d = ...\n    const columnWidthDelta =\n      rowOffsetWidth !== targetColumnWidth\n        ? (targetColumnWidth * state.columnResizing.totalFlexWidth -\n            rowOffsetWidth * columnWidth) /\n          (rowOffsetWidth - targetColumnWidth)\n        : deltaX;\n\n    const newColumnWidths = {};\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(headerWidth + columnWidthDelta, 0);\n    });\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    };\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    };\n  }\n}\n\nconst useInstanceBeforeDimensions = (instance) => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance;\n\n  const getInstance = useGetLatest(instance);\n\n  flatHeaders.forEach((header) => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true,\n    );\n\n    header.canResize = canResize;\n    // CHANGE: here we differentiate between trying to set a column width to\n    // 0 (in which case we should try the minimum width) versus having an\n    // undefined resize-width (which means we haven't tried resizing this\n    // column, so we shouldn't try min-width).\n    if (columnResizing.columnWidths[header.id] > 0) {\n      header.width = columnResizing.columnWidths[header.id];\n    } else if (columnResizing.columnWidths[header.id] === 0) {\n      header.width = header.minWidth || header.originalWidth || header.width;\n    } else {\n      header.width = header.originalWidth || header.width;\n    }\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      });\n    }\n  });\n};\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance;\n\n  ensurePluginOrder(plugins, [\"useAbsoluteLayout\"], \"useResizeColumns\");\n\n  const getAutoResetResize = useGetLatest(autoResetResize);\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize });\n    }\n  }, [columns]);\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch],\n  );\n\n  Object.assign(instance, {\n    resetResizing,\n  });\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = [];\n  const recurseHeader = (header) => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n    leafHeaders.push(header);\n  };\n  recurseHeader(header);\n  return leafHeaders;\n}\n"],"names":["defaultColumn","canResize","actions","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","hooks","getResizerProps","defaultGetResizerProps","getHeaderProps","push","style","position","stateReducers","reducer","useInstance","useInstanceBeforeDimensions","getFirstDefined","args","i","length","passiveSupported","passiveEventSupported","supported","options","passive","window","addEventListener","removeEventListener","err","props","instance","header","dispatch","visibleColumns","rowOffsetWidth","onResizeStart","e","isTouchEvent","type","touches","headersToResize","getLeafHeaders","headerIdWidths","map","d","id","totalWidth","clientX","Math","round","raf","mostRecentClientX","dispatchEnd","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","columnId","columnWidth","totalFlexWidth","reduce","sum","col","onMouseDown","persist","onTouchStart","cursor","draggable","role","pluginName","state","action","init","columnWidths","startX","isResizingColumn","deltaX","actualColumnWidth","targetColumnWidth","columnWidthDelta","newColumnWidths","forEach","headerId","headerWidth","max","flatHeaders","disableResizing","getHooks","getInstance","useGetLatest","undefined","width","minWidth","originalWidth","isResizing","makePropGetter","plugins","autoResetResize","columns","ensurePluginOrder","getAutoResetResize","useMountedLayoutEffect","resetResizing","React","useCallback","Object","assign","leafHeaders","recurseHeader"],"mappings":"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"}