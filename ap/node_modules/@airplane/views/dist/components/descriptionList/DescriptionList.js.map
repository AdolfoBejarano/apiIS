{"version":3,"file":"DescriptionList.js","sources":["../../../src/components/descriptionList/DescriptionList.tsx"],"sourcesContent":["import { createStyles } from \"@mantine/core\";\nimport type { ParamValues } from \"airplane/api\";\nimport React, { useState } from \"react\";\n\nimport { DefaultOutput, DefaultParams } from \"client\";\nimport { ComponentErrorBoundary } from \"components/errorBoundary/ComponentErrorBoundary\";\nimport {\n  LatestRun,\n  SetLatestRunProps,\n  useSetLatestRunInTaskQuery,\n} from \"components/errorBoundary/LatestRunDetails\";\nimport { Skeleton } from \"components/Skeleton\";\nimport { Stack } from \"components/stack/Stack\";\nimport { Text } from \"components/text/Text\";\nimport { displayTaskBackedError } from \"errors/displayTaskBackedError\";\nimport { useTaskQuery } from \"state\";\n\nimport {\n  DescriptionListComponentProps,\n  DescriptionListPropsWithTask,\n  DescriptionListProps,\n} from \"./DescriptionList.types\";\n\nexport const useStyles = createStyles((theme) => ({\n  item: {\n    borderTop: theme.other.borderStyles.light,\n    paddingTop: theme.spacing.md,\n    paddingBottom: theme.spacing.md,\n    \"&:first-child\": {\n      borderTop: \"none\",\n      paddingTop: 0,\n    },\n    \"&:last-child\": {\n      paddingBottom: 0,\n    },\n  },\n  term: {\n    fontWeight: 500,\n    color: theme.colors.gray[5],\n    paddingRight: theme.spacing.sm,\n  },\n  description: {\n    paddingLeft: theme.spacing.sm,\n  },\n}));\n\nexport const DescriptionListComponent = ({\n  items,\n  align = \"start\",\n  loading,\n  ...restProps\n}: DescriptionListComponentProps) => {\n  const { classes } = useStyles();\n  const itemsToRender = loading ? [...Array(4)] : items;\n  return (\n    <Stack {...restProps} spacing={0}>\n      {itemsToRender.map((item, idx) => (\n        <Stack\n          direction=\"row\"\n          key={idx}\n          spacing={0}\n          className={classes.item}\n          align={align}\n        >\n          {loading ? (\n            <>\n              <Skeleton height={16} mx={16} width=\"33%\" radius=\"sm\" />\n              <Skeleton height={16} mx={16} width=\"33%\" radius=\"sm\" />\n            </>\n          ) : (\n            <>\n              <Text className={classes.term} width=\"1/3\">\n                {item.term}\n              </Text>\n              <Text className={classes.description} width=\"2/3\">\n                {item.description}\n              </Text>\n            </>\n          )}\n        </Stack>\n      ))}\n    </Stack>\n  );\n};\n\nexport const DescriptionListWithTask = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>({\n  task,\n  outputTransform,\n  setLatestRun,\n  ...restProps\n}: DescriptionListPropsWithTask<TParams, TOutput> & SetLatestRunProps) => {\n  const fullQuery = useSetLatestRunInTaskQuery<TParams>(task, setLatestRun);\n  const { error, loading, output, runID } = useTaskQuery<TParams, TOutput>(\n    fullQuery,\n  );\n\n  const items = output\n    ? outputToItems<TParams, TOutput>(output, outputTransform)\n    : [];\n\n  if (error) {\n    return displayTaskBackedError({\n      error,\n      taskSlug: fullQuery.slug,\n      runID,\n      componentName: \"DescriptionList\",\n    });\n  } else {\n    return (\n      <DescriptionListComponent\n        loading={loading}\n        items={items}\n        {...restProps}\n      />\n    );\n  }\n};\n\nexport const DescriptionList = <\n  TParams extends ParamValues | undefined = DefaultParams,\n  TOutput = DefaultOutput,\n>(\n  props: DescriptionListProps<TParams, TOutput>,\n) => {\n  const [latestRun, setLatestRun] = useState<LatestRun>();\n  if (doesUseTask<TParams, TOutput>(props)) {\n    return (\n      <ComponentErrorBoundary\n        componentName={DescriptionList.displayName}\n        latestRun={latestRun}\n      >\n        <DescriptionListWithTask {...props} setLatestRun={setLatestRun} />\n      </ComponentErrorBoundary>\n    );\n  } else {\n    return (\n      <ComponentErrorBoundary componentName={DescriptionList.displayName}>\n        <DescriptionListComponent {...props} />\n      </ComponentErrorBoundary>\n    );\n  }\n};\n\nDescriptionList.displayName = \"DescriptionList\";\n\n/**\n * outputToItems converts task output to DescriptionList items.\n */\nfunction outputToItems<TParams extends ParamValues | undefined, TOutput>(\n  output: TOutput,\n  outputTransform?: DescriptionListPropsWithTask<\n    TParams,\n    TOutput\n  >[\"outputTransform\"],\n): DescriptionListComponentProps[\"items\"] {\n  if (!output) {\n    return [];\n  }\n  const unwrappedOutput = unwrapOutput<TOutput>(output);\n  let items = outputTransform\n    ? outputTransform(unwrappedOutput)\n    : unwrappedOutput;\n\n  // If items is an object, convert it to an array of {term, description} objects.\n  // e.g. {foo: \"bar\"} -> [{term: \"foo\", description: \"bar\"}]\n  if (items && typeof items === \"object\" && !Array.isArray(items)) {\n    items = Object.keys(items).map((key) => ({\n      term: key,\n      description: (items as Record<string, React.ReactNode>)[key],\n    }));\n  }\n  if (!validateItems(items)) {\n    throw new Error(`Task output must be type Array<{\n      term: React.ReactNode;\n      description: React.ReactNode;\n    }>. Got ${JSON.stringify(items)}`);\n  }\n  return items;\n}\n\n/**\n * Unwrap object with one object entry, e.g. {key: [{\"a\": \"A\", \"b\": \"B\"}]}.\n * @returns The unwrapped object or undefined if the object is not unwrappable\n */\nfunction unwrapOutput<TOutput>(data: unknown): TOutput {\n  if (data && !Array.isArray(data) && typeof data === \"object\") {\n    const keys = Object.keys(data);\n    if (keys.length === 1) {\n      const value = (data as Record<string, unknown>)[keys[0]];\n      if (Array.isArray(value)) {\n        return value as TOutput;\n      }\n    }\n  }\n  return data as TOutput;\n}\n\nfunction doesUseTask<TParams extends ParamValues | undefined, TOutput>(\n  props: DescriptionListProps<TParams, TOutput>,\n): props is DescriptionListPropsWithTask<TParams, TOutput> {\n  return Boolean(\n    (props as DescriptionListPropsWithTask<TParams, TOutput>).task,\n  );\n}\n\nfunction validateItems(\n  items: unknown[] | unknown,\n): items is DescriptionListComponentProps[\"items\"] {\n  if (!Array.isArray(items)) return false;\n  return items.every((item) => {\n    if (!item || typeof item !== \"object\") return false;\n    return \"term\" in item && \"description\" in item;\n  });\n}\n"],"names":["useStyles","createStyles","theme","item","borderTop","other","borderStyles","light","paddingTop","spacing","md","paddingBottom","term","fontWeight","color","colors","gray","paddingRight","sm","description","paddingLeft","DescriptionListComponent","items","align","loading","restProps","classes","itemsToRender","Array","map","idx","DescriptionListWithTask","task","outputTransform","setLatestRun","fullQuery","useSetLatestRunInTaskQuery","error","output","runID","useTaskQuery","outputToItems","displayTaskBackedError","taskSlug","slug","componentName","DescriptionList","props","latestRun","useState","doesUseTask","displayName","unwrappedOutput","unwrapOutput","isArray","Object","keys","key","validateItems","Error","JSON","stringify","data","length","value","Boolean","every"],"mappings":"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"}