{"version":3,"file":"RequestRunnableDialog.js","sources":["../../../src/components/requestDialog/RequestRunnableDialog.tsx"],"sourcesContent":["import { Button, MultiSelect } from \"@mantine/core\";\nimport { useQueries, useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { useState, useRef } from \"react\";\nimport * as React from \"react\";\n\nimport { DefaultParams, ParamValues } from \"client\";\nimport {\n  ENTITIES_SEARCH,\n  GROUPS_GET,\n  REQUESTS_CREATE,\n  RUNBOOKS_GET,\n  TASKS_GET_TASK_REVIEWERS,\n  USERS_GET,\n} from \"client/endpoints\";\nimport { Fetcher } from \"client/fetcher\";\nimport {\n  EntitiesResponse,\n  Group,\n  TaskOrRunbookReviewersResponse,\n  User,\n  UserGroup,\n} from \"client/types\";\nimport { Avatar, getInitials } from \"components/avatar/Avatar\";\nimport { DialogComponent } from \"components/dialog/Dialog\";\nimport { UserGroupIcon } from \"components/icon\";\nimport { Loader } from \"components/loader/Loader\";\nimport { showNotification } from \"components/notification/showNotification\";\nimport { Stack } from \"components/stack/Stack\";\nimport { useAsyncDebounce } from \"components/table/useAsyncDebounce\";\nimport { Text } from \"components/text/Text\";\nimport { Textarea } from \"components/textarea/Textarea\";\n\nexport type RequestRunnableDialogProps<TParams> = {\n  opened: boolean;\n  onSubmit: () => void;\n  onClose: () => void;\n  taskSlug?: string;\n  runbookSlug?: string;\n  paramValues: TParams;\n};\n\ninterface ItemProps extends React.ComponentPropsWithoutRef<\"div\"> {\n  label: string;\n  ug: UserGroup;\n}\n\nconst ResultRow = React.forwardRef<HTMLDivElement, ItemProps>(\n  ({ label, ug, ...others }: ItemProps, ref) => {\n    return (\n      <div ref={ref} {...others}>\n        {ug.user && (\n          <Stack spacing=\"sm\" direction=\"row\" align=\"center\">\n            <Avatar size=\"sm\" src={ug.user.avatarURL}>\n              {getInitials(label)}\n            </Avatar>\n            <Text disableMarkdown>{label}</Text>\n          </Stack>\n        )}\n        {ug.group && (\n          <Stack spacing=\"sm\" direction=\"row\" align=\"center\">\n            <Avatar size=\"sm\">\n              <UserGroupIcon />\n            </Avatar>\n            <Text disableMarkdown>{label}</Text>\n          </Stack>\n        )}\n      </div>\n    );\n  },\n);\nResultRow.displayName = \"ResultRow\";\n\ntype UserOrGroup = { groupID?: string; userID?: string };\ntype ReviewerForSelect = {\n  label: string;\n  value: string;\n  ug: UserGroup;\n};\ntype HydratedReviewers = UseQueryResult<\n  { user: User } | { group: Group },\n  unknown\n>[];\n\nexport function RequestRunnableDialog<\n  TParams extends ParamValues | undefined = DefaultParams,\n>(props: RequestRunnableDialogProps<TParams>) {\n  const [selections, setSelections] = useState<string[]>([]);\n  const [reason, setReason] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n  const reviewersForSelect = useRef<ReviewerForSelect[]>([]);\n\n  if (props.runbookSlug && props.taskSlug) {\n    throw new Error(\"cannot specify both runbookSlug and taskSlug\");\n  }\n  const slug = props.runbookSlug ?? props.taskSlug;\n  if (slug === undefined) {\n    throw new Error(\"must specify runbookSlug or taskSlug\");\n  }\n\n  const getRunnableEndpoint = props.runbookSlug\n    ? RUNBOOKS_GET\n    : TASKS_GET_TASK_REVIEWERS;\n\n  const { data: runnableData, isLoading: runnableDataIsLoading } = useQuery(\n    [getRunnableEndpoint, slug],\n    async () => {\n      const fetcher = new Fetcher();\n      return await fetcher.get<TaskOrRunbookReviewersResponse>(\n        getRunnableEndpoint,\n        {\n          taskSlug: props.taskSlug,\n          runbookSlug: props.runbookSlug,\n        },\n      );\n    },\n  );\n\n  const { data: entities } = useQuery(\n    [ENTITIES_SEARCH, searchQuery],\n    async () => {\n      const fetcher = new Fetcher();\n      return await fetcher.get<EntitiesResponse>(ENTITIES_SEARCH, {\n        q: searchQuery,\n        scope: \"all\",\n      });\n    },\n    { staleTime: Infinity, enabled: !hasExplicitPermissions(runnableData) },\n  );\n\n  const hydratedReviewers = useQueries({\n    queries: (runnableData?.reviewers || []).map((reviewer) => {\n      if (reviewer.userID) {\n        return {\n          queryKey: [USERS_GET, reviewer.userID],\n          queryFn: async () => {\n            const fetcher = new Fetcher();\n            return await fetcher.get<{ user: User }>(USERS_GET, {\n              userID: reviewer.userID,\n            });\n          },\n        };\n      }\n      if (reviewer.groupID) {\n        return {\n          queryKey: [GROUPS_GET, reviewer.groupID],\n          queryFn: async () => {\n            const fetcher = new Fetcher();\n            return await fetcher.get<{ group: Group }>(GROUPS_GET, {\n              groupID: reviewer.groupID,\n            });\n          },\n        };\n      }\n      throw new Error(\"expected userID or groupID\");\n    }),\n  });\n  const reviewersLoading =\n    runnableDataIsLoading || hydratedReviewers.some((res) => res.isLoading);\n\n  const { triggerID, reviewersForSelect: newReviewersForSelect } =\n    processQueryOutputs(hydratedReviewers, runnableData, entities);\n  // Add to the list of reviewers that we've already fetched instead of replacing.\n  const reviewersToAdd = newReviewersForSelect.filter(\n    (newReviewer) =>\n      !reviewersForSelect.current.some(\n        (reviewer) => reviewer.value === newReviewer.value,\n      ),\n  );\n  reviewersForSelect.current.push(...reviewersToAdd);\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!triggerID) {\n      throw new Error(\"no trigger to execute\");\n    }\n    setSubmitting(true);\n    const reviewers: UserOrGroup[] = selections.map(getUserOrGroupFromValue);\n    try {\n      const fetcher = new Fetcher();\n      await fetcher.post<{ triggerRequestID: string }>(REQUESTS_CREATE, {\n        triggerID,\n        requestData: {\n          ...(props.taskSlug && {\n            taskData: {\n              paramValues: props.paramValues,\n            },\n          }),\n          ...(props.runbookSlug && {\n            runbookData: {\n              paramValues: props.paramValues,\n            },\n          }),\n        },\n        reason,\n        reviewers,\n      });\n      showNotification({\n        message: \"Request successful\",\n        type: \"success\",\n      });\n      props.onSubmit();\n      setSelections([]);\n      setReason(\"\");\n    } catch (e) {\n      showNotification({\n        title: \"Request unsuccessful\",\n        message: e instanceof Error ? e.message : \"\",\n        type: \"error\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  const onSearchChange = useAsyncDebounce((value: string) => {\n    setSearchQuery(value);\n  }, 200);\n\n  return (\n    <DialogComponent\n      title={\n        \"Request execution of \" +\n        (runnableData?.task?.name ||\n          runnableData?.runbook?.name ||\n          props.taskSlug ||\n          props.runbookSlug)\n      }\n      padding={20}\n      opened={props.opened}\n      onClose={props.onClose}\n    >\n      <form onSubmit={onSubmit}>\n        <Stack>\n          <Textarea\n            label=\"Reason\"\n            value={reason}\n            onChange={(event) => setReason(event.currentTarget.value)}\n            description=\"Extra context sent to the reviewers below\"\n          />\n\n          {/* Once we have our own MultiSelect, this should be swapped out */}\n          {!reviewersLoading && (\n            <MultiSelect\n              data={reviewersForSelect.current}\n              placeholder=\"Select users or groups\"\n              label=\"Reviewers\"\n              itemComponent={ResultRow}\n              searchable\n              value={selections}\n              onChange={setSelections}\n              onSearchChange={onSearchChange}\n              description=\"Request approval from users or groups\"\n            />\n          )}\n\n          {reviewersLoading && <Loader variant=\"dots\" />}\n\n          <Stack direction=\"row\" justify=\"end\">\n            <Button\n              type=\"submit\"\n              disabled={reviewersLoading}\n              loading={submitting}\n            >\n              Request\n            </Button>\n          </Stack>\n        </Stack>\n      </form>\n    </DialogComponent>\n  );\n}\n\n/**\n * Transforms raw reviewer data into the format the components expect\n */\nfunction processQueryOutputs(\n  hydratedReviewers: HydratedReviewers,\n  runnableData: TaskOrRunbookReviewersResponse | undefined,\n  entities: EntitiesResponse | undefined,\n) {\n  let triggerID = \"\";\n  let reviewersForSelect: { label: string; value: string; ug: UserGroup }[] =\n    [];\n\n  if (runnableData != null) {\n    const allUsersAndGroupsFetched = hydratedReviewers.every(\n      (res) => res.status === \"success\",\n    );\n\n    const triggers =\n      runnableData.task?.triggers ?? runnableData.runbook?.triggers;\n    const formTrigger = triggers?.find((t) => t.kind === \"form\");\n    if (!formTrigger) {\n      throw new Error(\"unexpected api response: missing form trigger\");\n    }\n    triggerID = formTrigger.triggerID;\n\n    if (hasExplicitPermissions(runnableData)) {\n      if (allUsersAndGroupsFetched) {\n        reviewersForSelect = hydratedReviewers.map((queryResult, i) => {\n          const ret: { label: string; value: string; ug: UserGroup } = {\n            label: \"\",\n            value: \"\",\n            ug: {},\n          };\n          if (\"user\" in queryResult.data!) {\n            ret.ug.user = queryResult.data.user;\n            ret.label = getUserLabel(queryResult.data.user);\n            ret.value = getUserValue(queryResult.data.user);\n          }\n          if (\"group\" in queryResult.data!) {\n            ret.ug.group = queryResult.data.group;\n            ret.label = getGroupLabel(queryResult.data.group);\n            ret.value = getGroupValue(queryResult.data.group);\n          }\n          return ret;\n        });\n      }\n    } else {\n      if (entities != null) {\n        reviewersForSelect = entities.results.map((ug, i) => {\n          if (ug.user) {\n            return {\n              label: getUserLabel(ug.user),\n              value: getUserValue(ug.user),\n              ug,\n            };\n          }\n          if (ug.group) {\n            return {\n              label: getGroupLabel(ug.group),\n              value: getGroupValue(ug.group),\n              ug,\n            };\n          }\n          return { label: \"\", value: \"\", ug: {} };\n        });\n      }\n    }\n  }\n  return { triggerID, reviewersForSelect };\n}\n\nfunction getUserLabel(user: User) {\n  return user.name || user.email || user.userID;\n}\nfunction getGroupLabel(group: Group) {\n  return group.name || group.id;\n}\nfunction getUserValue(user: User) {\n  return `usr_${user.userID}`;\n}\nfunction getGroupValue(group: Group) {\n  return `grp_${group.id}`;\n}\nfunction getUserOrGroupFromValue(value: string): UserOrGroup {\n  if (value.startsWith(\"usr_\")) {\n    return { userID: value.substring(4) };\n  }\n  if (value.startsWith(\"grp_\")) {\n    return { groupID: value.substring(4) };\n  }\n  throw new Error(\"unexpected value: \" + value);\n}\nfunction hasExplicitPermissions(\n  taskOrRunbook?: TaskOrRunbookReviewersResponse,\n): boolean {\n  return !!(\n    taskOrRunbook?.task?.requireExplicitPermissions ||\n    taskOrRunbook?.runbook?.isPrivate\n  );\n}\n"],"names":["ResultRow","forwardRef","label","ug","others","ref","user","avatarURL","getInitials","group","displayName","RequestRunnableDialog","props","selections","setSelections","useState","reason","setReason","searchQuery","setSearchQuery","submitting","setSubmitting","reviewersForSelect","useRef","runbookSlug","taskSlug","Error","slug","undefined","getRunnableEndpoint","RUNBOOKS_GET","TASKS_GET_TASK_REVIEWERS","data","runnableData","isLoading","runnableDataIsLoading","useQuery","fetcher","Fetcher","get","entities","ENTITIES_SEARCH","q","scope","staleTime","Infinity","enabled","hasExplicitPermissions","hydratedReviewers","useQueries","queries","reviewers","map","reviewer","userID","queryKey","USERS_GET","queryFn","groupID","GROUPS_GET","reviewersLoading","some","res","triggerID","newReviewersForSelect","processQueryOutputs","reviewersToAdd","filter","newReviewer","current","value","push","onSubmit","e","preventDefault","getUserOrGroupFromValue","post","REQUESTS_CREATE","requestData","taskData","paramValues","runbookData","message","type","title","onSearchChange","useAsyncDebounce","task","name","runbook","opened","onClose","event","currentTarget","allUsersAndGroupsFetched","every","status","triggers","formTrigger","find","t","kind","queryResult","i","ret","getUserLabel","getUserValue","getGroupLabel","getGroupValue","results","email","id","startsWith","substring","taskOrRunbook","requireExplicitPermissions","isPrivate"],"mappings":"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"}