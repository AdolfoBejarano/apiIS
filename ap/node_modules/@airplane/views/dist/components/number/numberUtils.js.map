{"version":3,"file":"numberUtils.js","sources":["../../../src/components/number/numberUtils.ts"],"sourcesContent":["import getSymbolFromCurrency from \"currency-symbol-map\";\n\nconst REVERSED_CURRENCIES = [\"ARS\", \"BRL\", \"CHF\", \"DKK\", \"EUR\", \"ILS\", \"PLN\"];\n\nexport const currencyParser = (currency?: string) => (value?: string) => {\n  const c = currency ?? \"USD\";\n  if (REVERSED_CURRENCIES.includes(c)) {\n    return value?.replace(/[^0-9,]/g, \"\").replace(/,/, \".\");\n  }\n  return value?.replace(/[^0-9.]/g, \"\");\n};\n\nconst currencyFormatterStandard = (currency: string) => (value?: string) => {\n  const parts = value?.split(\".\");\n  const symbol = getSymbolFromCurrency(currency);\n  if (!parts?.length) {\n    return \"\";\n  }\n  // Add commas for every 3 digits before the decimal\n  const left = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.length > 1\n    ? `${symbol} ${left}.${parts.slice(1).join(\"\")}`\n    : `${symbol} ${left}`;\n};\n\nconst currencyFormatterReversed = (currency: string) => (value?: string) => {\n  const parts = value?.split(\".\");\n  const symbol = getSymbolFromCurrency(currency);\n  if (!parts?.length) {\n    return \"\";\n  }\n  // Add periods for every 3 digits before the decimal\n  const left = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n  return parts.length > 1\n    ? `${symbol} ${left},${parts.slice(1).join(\"\")}`\n    : `${symbol} ${left}`;\n};\n\nexport const currencyFormatter = (currency?: string) => {\n  const c = currency ?? \"USD\";\n  if (REVERSED_CURRENCIES.includes(c)) {\n    return currencyFormatterReversed(c);\n  }\n  return currencyFormatterStandard(c);\n};\n\nexport const percentParser = (value?: string) => {\n  const percent = value?.replace(\"%\", \"\") ?? \"\";\n  const parts = percent.split(\".\");\n  if (!parts.length) {\n    return \"\";\n  }\n  // Shift decimal 2 places to the left to get value\n  const padded = parts[0].padStart(2, \"0\");\n  return `${padded.slice(0, -2)}.${padded.slice(-2)}${parts.slice(1).join(\"\")}`;\n};\n\nexport const percentFormatter = (value?: string) => {\n  const parts = value?.split(\".\");\n  if (!parts?.length) {\n    return \"\";\n  }\n  // Shift decimal 2 places to the right\n  const padded = parts.slice(1).join(\"\").padEnd(2, \"0\");\n  const output = `${parts[0]}${padded.slice(0, 2)}.${padded.slice(2)}`;\n  // Remove unnecessary leading 0s and trailing period\n  return `${output\n    .replace(/^0+/, \"\")\n    .replace(/^\\./, \"0.\")\n    .replace(/\\.$/, \"\")}%`;\n};\n"],"names":["REVERSED_CURRENCIES","currencyParser","currency","value","c","includes","replace","currencyFormatterStandard","parts","split","symbol","getSymbolFromCurrency","length","left","slice","join","currencyFormatterReversed","currencyFormatter","percentParser","percent","padded","padStart","percentFormatter","padEnd","output"],"mappings":";AAEA,MAAMA,sBAAsB,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAErE,MAAMC,iBAAiBA,CAACC,aAAsB,CAACC,UAAmB;AACvE,QAAMC,IAAIF,YAAY;AAClBF,MAAAA,oBAAoBK,SAASD,CAAC,GAAG;AACnC,WAAOD,+BAAOG,QAAQ,YAAY,IAAIA,QAAQ,KAAK;AAAA,EACrD;AACOH,SAAAA,+BAAOG,QAAQ,YAAY;AACpC;AAEA,MAAMC,4BAA4BA,CAACL,aAAqB,CAACC,UAAmB;AACpEK,QAAAA,QAAQL,+BAAOM,MAAM;AACrBC,QAAAA,SAASC,sBAAsBT,QAAQ;AACzC,MAAA,EAACM,+BAAOI,SAAQ;AACX,WAAA;AAAA,EACT;AAEA,QAAMC,OAAOL,MAAM,CAAC,EAAEF,QAAQ,yBAAyB,GAAG;AAC1D,SAAOE,MAAMI,SAAS,IACjB,GAAEF,MAAO,IAAGG,IAAK,IAAGL,MAAMM,MAAM,CAAC,EAAEC,KAAK,EAAE,CAAE,KAC5C,GAAEL,MAAO,IAAGG,IAAK;AACxB;AAEA,MAAMG,4BAA4BA,CAACd,aAAqB,CAACC,UAAmB;AACpEK,QAAAA,QAAQL,+BAAOM,MAAM;AACrBC,QAAAA,SAASC,sBAAsBT,QAAQ;AACzC,MAAA,EAACM,+BAAOI,SAAQ;AACX,WAAA;AAAA,EACT;AAEA,QAAMC,OAAOL,MAAM,CAAC,EAAEF,QAAQ,yBAAyB,GAAG;AAC1D,SAAOE,MAAMI,SAAS,IACjB,GAAEF,MAAO,IAAGG,IAAK,IAAGL,MAAMM,MAAM,CAAC,EAAEC,KAAK,EAAE,CAAE,KAC5C,GAAEL,MAAO,IAAGG,IAAK;AACxB;AAEaI,MAAAA,oBAAoBA,CAACf,aAAsB;AACtD,QAAME,IAAIF,YAAY;AAClBF,MAAAA,oBAAoBK,SAASD,CAAC,GAAG;AACnC,WAAOY,0BAA0BZ,CAAC;AAAA,EACpC;AACA,SAAOG,0BAA0BH,CAAC;AACpC;AAEac,MAAAA,gBAAgBA,CAACf,UAAmB;AAC/C,QAAMgB,WAAUhB,+BAAOG,QAAQ,KAAK,QAAO;AACrCE,QAAAA,QAAQW,QAAQV,MAAM,GAAG;AAC3B,MAAA,CAACD,MAAMI,QAAQ;AACV,WAAA;AAAA,EACT;AAEA,QAAMQ,SAASZ,MAAM,CAAC,EAAEa,SAAS,GAAG,GAAG;AACvC,SAAQ,GAAED,OAAON,MAAM,GAAG,EAAE,CAAE,IAAGM,OAAON,MAAM,EAAE,CAAE,GAAEN,MAAMM,MAAM,CAAC,EAAEC,KAAK,EAAE,CAAE;AAC9E;AAEaO,MAAAA,mBAAmBA,CAACnB,UAAmB;AAC5CK,QAAAA,QAAQL,+BAAOM,MAAM;AACvB,MAAA,EAACD,+BAAOI,SAAQ;AACX,WAAA;AAAA,EACT;AAEMQ,QAAAA,SAASZ,MAAMM,MAAM,CAAC,EAAEC,KAAK,EAAE,EAAEQ,OAAO,GAAG,GAAG;AACpD,QAAMC,SAAU,GAAEhB,MAAM,CAAC,CAAE,GAAEY,OAAON,MAAM,GAAG,CAAC,CAAE,IAAGM,OAAON,MAAM,CAAC,CAAE;AAEnE,SAAQ,GAAEU,OACPlB,QAAQ,OAAO,EAAE,EACjBA,QAAQ,OAAO,IAAI,EACnBA,QAAQ,OAAO,EAAE,CAAE;AACxB;"}