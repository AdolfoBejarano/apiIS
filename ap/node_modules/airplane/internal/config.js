"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.view = exports.workflow = exports.task = void 0;
const humanize_string_1 = __importDefault(require("humanize-string"));
const ts_dedent_1 = require("ts-dedent");
const execute_1 = require("./execute");
const params_output_1 = require("./params/params_output");
const version_1 = require("./version");
/**
 * Airplane Tasks are functions that anyone on your team can execute via a simple Airplane-generated UI.
 *
 * A call to this method will declare a new task and register a function to call
 * whenever this task is executed. You can configure
 * [parameters](https://docs.airplane.dev/platform/parameters) for your task and the values will
 * be passed as the first argument to your function. Your function can return
 * [output](https://docs.airplane.dev/tasks/output) that will be rendered in the Airplane UI.
 *
 * If the function throws an error, that error will be automatically caught and serialized as
 * an error output.
 *
 * This method returns a wrapped version of your task's function. This can be called from
 * within other tasks to trigger an execution of your task. It will return the execution's
 * output. To learn more, see [executing other tasks](https://docs.airplane.dev/workflows/js-tasks).
 * @param config The configuration for this task, including its parameters.
 * @param f The function to execute whenever this task is executed.
 * @returns A function that can be called to execute this task.
 */
const task = (config, f) => {
    const wrappedF = async (paramValues, executeOptions) => {
        const run = await (0, execute_1.execute)(config.slug, paramValues, executeOptions);
        return run;
    };
    const baseFunc = getBaseFunc(f, config.parameters);
    wrappedF.__airplane = {
        type: config.runtime === "workflow" ? "workflow" : "task",
        config: {
            ...normalizeConfig(config),
            sdkVersion: version_1.VERSION,
        },
        baseFunc,
    };
    return wrappedF;
};
exports.task = task;
/**
 * Airplane Workflows are currently in beta. To learn more, see
 * [the Workflow documentation](https://docs.airplane.dev/workflows/overview).
 * @deprecated since v0.2.23, use `task()` instead and set `runtime: "workflow"`
 * @param config The configuration for this workflow, including its parameters.
 * @param f The function to execute whenever this workflow is executed.
 * @returns A function that can be called to execute this workflow.
 */
const workflow = (config, f) => {
    const wrappedF = async (paramValues, executeOptions) => {
        const run = await (0, execute_1.execute)(config.slug, paramValues, executeOptions);
        return run;
    };
    const baseFunc = getBaseFunc(f, config.parameters);
    wrappedF.__airplane = {
        type: "workflow",
        config: {
            ...normalizeConfig(config),
            sdkVersion: version_1.VERSION,
        },
        baseFunc,
    };
    return wrappedF;
};
exports.workflow = workflow;
/**
 * getBaseFunc gets the function that is executed by the node shim when the task is run.
 * This is a small shim around the task code itself, doing some small conversions
 * e.g. from wire format -> user format.
 * @param f The task function.
 * @param params The parameters in serialized format.
 * @returns A function that can be executed to run the task.
 */
const getBaseFunc = (f, params) => {
    return (paramValues) => {
        const paramValuesDeserialized = (0, params_output_1.deserializeParamValues)(params, paramValues);
        return f(paramValuesDeserialized);
    };
};
/**
 * Airplane Views make it incredibly easy to build UIs that you and your teammates can use.
 *
 * To learn more, see the [Getting started with Views guide](https://docs.airplane.dev/views/getting-started).
 * @param config The configuration for this view.
 * @param view The React component to render whenever this view is opened.
 * @returns A representation of the view.
 */
const view = (config, view) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    view.__airplane = {
        type: "view",
        config: {
            ...config,
            description: config.description ? (0, ts_dedent_1.dedent)(config.description) : undefined,
            name: config.name ? config.name : (0, humanize_string_1.default)(config.slug),
        },
    };
    return view;
};
exports.view = view;
/**
 * @returns a task config with all descriptions dedented.
 */
const normalizeConfig = (config) => {
    // Dedent the parameter descriptions of each parameter:
    const parameters = config.parameters
        ? Object.fromEntries(Object.entries(config.parameters).map(([slug, param]) => {
            if (typeof param === "string") {
                return [slug, { type: param, name: (0, humanize_string_1.default)(slug) }];
            }
            return [
                slug,
                {
                    ...param,
                    description: param.description ? (0, ts_dedent_1.dedent)(param.description) : undefined,
                    name: param.name ? param.name : (0, humanize_string_1.default)(slug),
                },
            ];
        }))
        : undefined;
    return {
        ...config,
        description: config.description ? (0, ts_dedent_1.dedent)(config.description) : undefined,
        parameters,
        name: config.name ? config.name : (0, humanize_string_1.default)(config.slug),
    };
};
