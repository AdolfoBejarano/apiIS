"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeRunbookBackground = exports.executeRunbook = exports.executeWithResourcesBackground = exports.executeWithResources = exports.executeBackground = exports.execute = void 0;
const errors_1 = require("./errors");
const params_serialized_1 = require("./params/params_serialized");
const runtime_1 = require("./runtime");
const execute = async (slug, paramValues = {}, opts = {}) => {
    const run = await (0, exports.executeWithResources)(slug, paramValues, {}, opts);
    if (!run.taskID) {
        // `execute` is intended for executing tasks, not built-ins.
        // This is a sanity check before we cast to a `TaskRun` type that includes a taskID.
        throw new Error(`Run does not have a taskID`);
    }
    return run;
};
exports.execute = execute;
const executeBackground = async (slug, paramValues = {}, opts = {}) => {
    return (0, exports.executeWithResourcesBackground)(slug, paramValues, {}, opts);
};
exports.executeBackground = executeBackground;
const executeWithResources = async (slug, paramValues = {}, resources, opts = {}) => {
    const run = await (0, runtime_1.getRuntime)().execute(slug, (0, params_serialized_1.serializeParamValues)(paramValues), resources, opts);
    if (run.status === "Failed" || run.status === "Cancelled") {
        throw new errors_1.RunTerminationError(run, slug);
    }
    return run;
};
exports.executeWithResources = executeWithResources;
const executeWithResourcesBackground = async (slug, paramValues = {}, resources, opts = {}) => {
    return (0, runtime_1.getRuntime)().executeBackground(slug, (0, params_serialized_1.serializeParamValues)(paramValues), resources, opts);
};
exports.executeWithResourcesBackground = executeWithResourcesBackground;
const executeRunbook = async (slug, paramValues = {}, opts = {}) => {
    const session = await (0, runtime_1.getRuntime)().executeRunbook(slug, (0, params_serialized_1.serializeParamValues)(paramValues), opts);
    if (session.status === "Failed" || session.status === "Cancelled") {
        throw new errors_1.SessionTerminationError(session);
    }
    return session;
};
exports.executeRunbook = executeRunbook;
const executeRunbookBackground = async (slug, paramValues = {}, opts = {}) => {
    return (0, runtime_1.getRuntime)().executeRunbookBackground(slug, (0, params_serialized_1.serializeParamValues)(paramValues), opts);
};
exports.executeRunbookBackground = executeRunbookBackground;
