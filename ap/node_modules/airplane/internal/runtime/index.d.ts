import { ClientOptions } from "../api/client";
import { CreatePromptRequest, CreateUploadResponse, DisplayConfig, Prompt, Run, Session, User } from "../api/types";
import { InputParams, InputToSerializedParamValues } from "../params/params_input";
import { SerializedParamValues } from "../params/params_serialized";
export type RuntimeInterface = {
    execute<Output = unknown>(slug: string, paramValues: SerializedParamValues, resources?: Record<string, string> | undefined | null, opts?: ClientOptions): Promise<Run<SerializedParamValues, Output>>;
    executeBackground(slug: string, paramValues: SerializedParamValues, resources?: Record<string, string> | undefined | null, opts?: ClientOptions): Promise<string>;
    executeRunbook(slug: string, paramValues: SerializedParamValues, opts?: ClientOptions): Promise<Session<SerializedParamValues>>;
    executeRunbookBackground(slug: string, paramValues: SerializedParamValues, opts?: ClientOptions): Promise<string>;
    promptBackground(prompt: CreatePromptRequest): Promise<string>;
    waitForPrompt<TParams extends InputParams>(promptID: string): Promise<InputToSerializedParamValues<TParams>>;
    display(display: DisplayConfig): Promise<void>;
    sleep(durationMs: number): Promise<void>;
    logChunks(output: string): void;
    getPrompt(id: string): Promise<Prompt>;
    getUser(id: string): Promise<User>;
    fetchBlob(url: string): Promise<Blob>;
    createUpload(fileName: string, sizeBytes: number): Promise<CreateUploadResponse>;
    uploadFileContents(url: string, payload: Blob): Promise<void>;
    generateIDToken(audience: string): Promise<string>;
};
export type TaskRuntime = "standard" | "workflow";
export type RuntimeKind = TaskRuntime | "dev";
export declare const registerRuntime: (kind: RuntimeKind, runtime: RuntimeInterface) => () => void;
export declare const getRuntime: () => RuntimeInterface;
