import { OptionalParamSlugs, OptionalParamSlugsWithoutDefaults, Param, ParamType, PromptParam, PromptParamType } from "./params";
import { OutputParamValueByType } from "./params_output";
import { SerializedParamValueByType } from "./params_serialized";
import { ConfigVar } from "../api/types";
import { AirplaneFile } from "../file";
import { AirplaneFileObject } from "../file/file_object";
import { IfEmptyUndefined, Optional } from "../type_helpers";
export type InputParamValueByType = Omit<SerializedParamValueByType, "upload" | "date" | "datetime" | "configvar"> & {
    upload: string | AirplaneFileObject | AirplaneFile;
    date: string | Date;
    datetime: string | Date;
    configvar: string | ConfigVar;
};
export type InputParamType = keyof InputParamValueByType;
export type InputParamValue = InputParamValueByType[keyof InputParamValueByType] | undefined;
export type InputParamValues<TParams extends InputParams = InputParams> = TParams extends Record<string, never> ? Record<string, never> | undefined : IfEmptyUndefined<Optional<{
    [TSlug in keyof TParams]: NormalizeAsObject<TParams[TSlug]>["multi"] extends true ? InputParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]][] : InputParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]];
}, OptionalParamSlugs<NormalizeAsObjects<TParams>>>>;
/**
 * InputParam accepts a shorthand of a param type or a fully-specified parameter object.
 *
 * A shorthand of `"TYPE"` is equivalent to `{ type: "TYPE" }`.
 */
export type InputParam = ParamType | Param;
/**
 * InputParams are a set of parameters keyed by parameter slug.
 *
 * The order of parameters within the object is retained for ordering parameters in form UIs.
 */
export type InputParams = Record<string, InputParam>;
/**
 * PromptInputParams are the subset of InputParams that are available to prompts.
 *
 * Currently config variables and files are not supported by prompts. Once those are supported,
 * we can remove this in favor of using InputParams directly.
 */
export type PromptInputParams = Record<string, PromptParamType | PromptParam>;
type NormalizeAsObjects<TInputParams extends InputParams> = {
    [TSlug in keyof TInputParams]: NormalizeAsObject<TInputParams[TSlug]>;
};
type NormalizeAsObject<TInputParam extends InputParam> = TInputParam extends ParamType ? {
    type: TInputParam;
    required: true;
    multi: false;
} : TInputParam extends Param ? TInputParam : Param;
export type InputToSerializedParamValues<TParams extends InputParams> = TParams extends Record<string, never> ? Record<string, never> : Optional<{
    [TSlug in keyof TParams]: NormalizeAsObject<TParams[TSlug]>["multi"] extends true ? SerializedParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]][] : SerializedParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]];
}, OptionalParamSlugsWithoutDefaults<NormalizeAsObjects<TParams>>>;
export type InputToOutputParamValues<TParams extends InputParams> = TParams extends Record<string, never> ? Record<string, never> : Optional<{
    [TSlug in keyof TParams]: NormalizeAsObject<TParams[TSlug]>["multi"] extends true ? OutputParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]][] : OutputParamValueByType[NormalizeAsObject<TParams[TSlug]>["type"]];
}, OptionalParamSlugsWithoutDefaults<NormalizeAsObjects<TParams>>>;
export {};
