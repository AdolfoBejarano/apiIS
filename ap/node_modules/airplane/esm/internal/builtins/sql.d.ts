import { BuiltInParamValues } from "./builtins";
import { ClientOptions } from "../api/client";
import { BuiltInRun } from "../api/types";
export type TransactionMode = "auto" | "readOnly" | "readWrite" | "none";
export type QueryOptions = {
    args?: Record<string, unknown> | null;
    transactionMode?: TransactionMode | null;
    client?: ClientOptions;
};
export type QueryExecOutput = {
    __airplaneSentinelType: "QueryExecOutput";
    rows_affected: number;
};
type QueryExecOutputWithoutSentinel = {
    rows_affected: number;
};
type QType<TRow> = TRow extends QueryExecOutput ? QueryExecOutputWithoutSentinel : TRow[];
type Row = QueryExecOutput | Record<string, unknown>;
/**
 * A SQL query either returns a list of rows, where each row is typed by `TRow`
 * or it is a DDL query without a `RETURNING` clause. To type the latter case,
 * provide `QueryExecOutput` as `TRow`. For example:
 *
 * query<QueryExecOutput>(...): BuiltInRun<..., {Q1: {rows_affected: number}}>
 * query<{name: string}>(...): BuiltInRun<..., {Q1: {name: string}[]}>
 * @param sqlResource The alias or slug of the DB resource to query
 * @param query The SQL query to execute. Can be DDL or DML and can include multiple queries separated by semicolons. Multiple queries will be executed together as a transaction.
 * @param opts Additional configuration options
 */
export declare function query<TRow1 extends Row = Record<string, any>>(sqlResource: string, query: string, opts?: QueryOptions): Promise<BuiltInRun<BuiltInParamValues, {
    Q1: QType<TRow1>;
}>>;
/**
 * A SQL query either returns a list of rows, where each row is typed by `TRow`
 * or it is a DDL query without a `RETURNING` clause. To type the latter case,
 * provide `QueryExecOutput` as `TRow`. For example:
 *
 * query<QueryExecOutput>(...): BuiltInRun<..., {Q1: {rows_affected: number}}>
 * query<{name: string}>(...): BuiltInRun<..., {Q1: {name: string}[]}>
 * @param sqlResource The alias or slug of the DB resource to query
 * @param query The SQL query to execute. Can be DDL or DML and can include multiple queries separated by semicolons. Multiple queries will be executed together as a transaction.
 * @param opts Additional configuration options
 */
export declare function query<TRow1 extends Row, TRow2 extends Row>(sqlResource: string, query: string, opts?: QueryOptions): Promise<BuiltInRun<BuiltInParamValues, {
    Q1: QType<TRow1>;
    Q2: QType<TRow2>;
}>>;
/**
 * A SQL query either returns a list of rows, where each row is typed by `TRow`
 * or it is a DDL query without a `RETURNING` clause. To type the latter case,
 * provide `QueryExecOutput` as `TRow`. For example:
 *
 * query<QueryExecOutput>(...): BuiltInRun<..., {Q1: {rows_affected: number}}>
 * query<{name: string}>(...): BuiltInRun<..., {Q1: {name: string}[]}>
 * @param sqlResource The alias or slug of the DB resource to query
 * @param query The SQL query to execute. Can be DDL or DML and can include multiple queries separated by semicolons. Multiple queries will be executed together as a transaction.
 * @param opts Additional configuration options
 */
export declare function query<TRow1 extends Row, TRow2 extends Row, TRow3 extends Row>(sqlResource: string, query: string, opts?: QueryOptions): Promise<BuiltInRun<BuiltInParamValues, {
    Q1: QType<TRow1>;
    Q2: QType<TRow2>;
    Q3: QType<TRow3>;
}>>;
/**
 * A SQL query either returns a list of rows, where each row is typed by `TRow`
 * or it is a DDL query without a `RETURNING` clause. To type the latter case,
 * provide `QueryExecOutput` as `TRow`. For example:
 *
 * query<QueryExecOutput>(...): BuiltInRun<..., {Q1: {rows_affected: number}}>
 * query<{name: string}>(...): BuiltInRun<..., {Q1: {name: string}[]}>
 * @param sqlResource The alias or slug of the DB resource to query
 * @param query The SQL query to execute. Can be DDL or DML and can include multiple queries separated by semicolons. Multiple queries will be executed together as a transaction.
 * @param opts Additional configuration options
 */
export declare function query<TRow1 extends Row, TRow2 extends Row, TRow3 extends Row, TRow4 extends Row>(sqlResource: string, query: string, opts?: QueryOptions): Promise<BuiltInRun<BuiltInParamValues, {
    Q1: QType<TRow1>;
    Q2: QType<TRow2>;
    Q3: QType<TRow3>;
    Q4: QType<TRow4>;
}>>;
/**
 * A SQL query either returns a list of rows, where each row is typed by `TRow`
 * or it is a DDL query without a `RETURNING` clause. To type the latter case,
 * provide `QueryExecOutput` as `TRow`. For example:
 *
 * query<QueryExecOutput>(...): BuiltInRun<..., {Q1: {rows_affected: number}}>
 * query<{name: string}>(...): BuiltInRun<..., {Q1: {name: string}[]}>
 * @param sqlResource The alias or slug of the DB resource to query
 * @param query The SQL query to execute. Can be DDL or DML and can include multiple queries separated by semicolons. Multiple queries will be executed together as a transaction.
 * @param opts Additional configuration options
 */
export declare function query<TRow1 extends Row, TRow2 extends Row, TRow3 extends Row, TRow4 extends Row, TRow5 extends Row>(sqlResource: string, query: string, opts?: QueryOptions): Promise<BuiltInRun<BuiltInParamValues, {
    Q1: QType<TRow1>;
    Q2: QType<TRow2>;
    Q3: QType<TRow3>;
    Q4: QType<TRow4>;
    Q5: QType<TRow5>;
}>>;
export {};
