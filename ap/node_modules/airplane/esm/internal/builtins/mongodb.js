import { convertResourceAliasToID } from "./builtins";
import { executeWithResources } from "../execute";
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const find = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, skip, limit, client } = opts;
    return executeWithResources("airplane:mongodb_find", { collection, filter, projection, sort, skip, limit }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const findOne = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return executeWithResources("airplane:mongodb_findOne", { collection, filter, projection, sort }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const findOneAndDelete = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return executeWithResources("airplane:mongodb_findOneAndDelete", { collection, filter, projection, sort }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const findOneAndUpdate = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return executeWithResources("airplane:mongodb_findOneAndUpdate", { collection, update, filter, projection, sort }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const findOneAndReplace = async (mongodbResource, collection, replacement, opts = {}) => {
    const { filter, projection, sort, upsert, client } = opts;
    return executeWithResources("airplane:mongodb_findOneAndReplace", { collection, replacement, filter, projection, sort, upsert }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const insertOne = async (mongodbResource, collection, document, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_insertOne", { collection, document }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const insertMany = async (mongodbResource, collection, documents, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_insertMany", { collection, documents }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const updateOne = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, upsert, client } = opts;
    return executeWithResources("airplane:mongodb_updateOne", { collection, update, filter, upsert }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const updateMany = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, upsert, client } = opts;
    return executeWithResources("airplane:mongodb_updateMany", { collection, update, filter, upsert }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const deleteOne = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_deleteOne", { collection, filter }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const deleteMany = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_deleteMany", { collection, filter }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const aggregate = async (mongodbResource, collection, pipeline, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_aggregate", { collection, pipeline }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
export const countDocuments = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_countDocuments", { collection, filter }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const distinct = async (mongodbResource, collection, field, filter, opts = {}) => {
    const { client } = opts;
    return executeWithResources("airplane:mongodb_distinct", { collection, field, filter }, { db: convertResourceAliasToID(mongodbResource) }, client);
};
