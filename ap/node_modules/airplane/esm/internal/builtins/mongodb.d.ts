import { BuiltInParamValues } from "./builtins";
import { ClientOptions } from "../api/client";
import { BuiltInRun } from "../api/types";
export type QueryOptions = {
    filter?: Record<string, unknown> | null;
    projection?: Record<string, unknown> | null;
    sort?: Record<string, unknown> | null;
    client?: ClientOptions;
};
export type UpdateOptions = {
    filter?: Record<string, unknown> | null;
    upsert?: boolean | null;
    client?: ClientOptions;
};
export declare const find: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, opts?: QueryOptions & {
    skip?: number | null;
    limit?: number | null;
}) => Promise<BuiltInRun<BuiltInParamValues, TDocument[]>>;
export declare const findOne: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, opts?: QueryOptions) => Promise<BuiltInRun<BuiltInParamValues, TDocument | null>>;
export declare const findOneAndDelete: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, opts?: QueryOptions) => Promise<BuiltInRun<BuiltInParamValues, TDocument | null>>;
export declare const findOneAndUpdate: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, update: Record<string, unknown>, opts?: QueryOptions) => Promise<BuiltInRun<BuiltInParamValues, TDocument | null>>;
export declare const findOneAndReplace: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, replacement: Record<string, unknown>, opts?: QueryOptions & UpdateOptions) => Promise<BuiltInRun<BuiltInParamValues, TDocument | null>>;
export type InsertOneOutput = {
    InsertedID: string;
};
export declare const insertOne: (mongodbResource: string, collection: string, document: Record<string, unknown>, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, InsertOneOutput>>;
export type InsertManyOutput = {
    InsertedIDs: string[];
};
export declare const insertMany: (mongodbResource: string, collection: string, documents: Record<string, unknown>[], opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, InsertManyOutput>>;
export type UpdateOutput = {
    MatchedCount: number;
    ModifiedCount: number;
    UpsertedCount: number;
    UpsertedID: string | null;
};
export declare const updateOne: (mongodbResource: string, collection: string, update: Record<string, unknown>, opts?: UpdateOptions) => Promise<BuiltInRun<BuiltInParamValues, UpdateOutput>>;
export declare const updateMany: (mongodbResource: string, collection: string, update: Record<string, unknown>, opts?: UpdateOptions) => Promise<BuiltInRun<BuiltInParamValues, UpdateOutput>>;
export type DeleteOutput = {
    DeletedCount: number;
};
export declare const deleteOne: (mongodbResource: string, collection: string, filter: Record<string, unknown>, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, DeleteOutput>>;
export declare const deleteMany: (mongodbResource: string, collection: string, filter: Record<string, unknown>, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, DeleteOutput>>;
export declare const aggregate: <TDocument extends Record<string, any>>(mongodbResource: string, collection: string, pipeline: Record<string, unknown>[], opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, TDocument[]>>;
export type CountOutput = number;
export declare const countDocuments: (mongodbResource: string, collection: string, filter: Record<string, unknown>, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, CountOutput>>;
export declare const distinct: <TValue = any>(mongodbResource: string, collection: string, field: string, filter: Record<string, unknown>, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, TValue[]>>;
