import { CreatePromptRequest, CreateSleepRequest, CreateUploadResponse, DisplayConfig, Prompt, Reviewer, RunStatus, SessionStatus, Sleep, TaskReviewers, TriggerRequest, User } from "./types";
import { SerializedParams } from "../params/params_serialized";
export type ClientOptions = {
    host?: string;
    token?: string;
    apiKey?: string;
    teamID?: string;
    envID?: string;
    envSlug?: string;
    runID?: string;
    source?: string;
    headers?: Record<string, string>;
    useSelfHostedInputs?: boolean;
    useSelfHostedOutputs?: boolean;
    agentStorageInternalHost?: string;
    allowCachedMaxAge?: number;
};
export declare class Client {
    private readonly fetcher;
    readonly useSelfHostedInputs: boolean;
    readonly useSelfHostedOutputs: boolean;
    readonly agentStorageInternalHost?: string;
    readonly agentStorageRunID?: string;
    readonly allowCachedMaxAge?: number;
    constructor(opts?: ClientOptions);
    executeTask(slug: string, paramValues: Record<string, unknown> | undefined | null, resources: Record<string, string> | undefined | null, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    executeTaskAirplane(slug: string, paramValues: Record<string, unknown> | undefined | null, resources: Record<string, string> | undefined | null, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    executeTaskSelfHostedInputs(slug: string, paramValues: Record<string, unknown> | undefined | null, resources: Record<string, string> | undefined | null, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    executeRunbook(slug: string, paramValues: Record<string, unknown> | undefined | null, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    getTaskReviewers(slug: string, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<TaskReviewers>;
    createTaskRequest(triggerID: string, taskSlug: string, paramValues: Record<string, unknown> | undefined | null, reason: string, reviewers?: Reviewer[], opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createTaskRequestAirplane(triggerID: string, paramValues: Record<string, unknown> | undefined | null, reason: string, reviewers?: Reviewer[], opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createTaskRequestSelfHostedInputs(triggerID: string, taskSlug: string, paramValues: Record<string, unknown> | undefined | null, reason: string, reviewers?: Reviewer[], opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createSelfHostedInputs(paramValues: Record<string, unknown> | undefined | null, passthroughParams: string[], constraintParams: string[], parameters: {
        parameters: SerializedParams;
    }, accessToken: string, dataPlaneURL: string, taskSlug: string, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<{
        token: string;
        substituteValues: Record<string, unknown>;
    }>;
    getRunOutput<O = unknown>(runID: string, opts?: {
        abortSignal?: AbortSignal;
        useZone?: boolean;
    }): Promise<O>;
    getRun<P = unknown>(runID: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<{
        id: string;
        status: RunStatus;
        paramValues: P;
        taskID?: string | undefined;
        zoneID?: string | undefined;
    }>;
    getZoneByRunID(runID: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<{
        id: string;
        slug: string;
        dataPlaneURL: string;
        accessToken: string;
    }>;
    getSession<P = unknown>(sessionID: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<{
        id: string;
        status: SessionStatus;
        paramValues: P;
        runbookID: string;
    }>;
    getTriggerRequest(triggerRequestID: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<TriggerRequest>;
    createPrompt(prompt: CreatePromptRequest, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createPromptAirplane(prompt: CreatePromptRequest, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createPromptSelfHostedOutputs(prompt: CreatePromptRequest, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createSleep(sleep: CreateSleepRequest, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    getSleep(id: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<Sleep>;
    createDisplay(display: DisplayConfig, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createDisplayAirplane(display: DisplayConfig, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createDisplaySelfHostedOutputs(display: DisplayConfig, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    createUpload(fileName: string, sizeBytes: number, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<CreateUploadResponse>;
    private createUploadAirplane;
    private createUploadSelfHostedInputs;
    uploadFileContents(url: string, payload: Blob, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<void>;
    getPrompt(id: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<Prompt>;
    getUser(id: string, opts?: {
        abortSignal?: AbortSignal;
    }): Promise<User>;
    generateIDToken(audience: string, opts?: {
        abortSignal?: AbortSignal;
        idempotencyKey?: string;
    }): Promise<string>;
    private pickZone;
    private withTracingPOST;
}
