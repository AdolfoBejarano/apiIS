import * as api from "./internal/api";
import * as auth from "./internal/auth";
import * as ai from "./internal/builtins/ai";
import * as email from "./internal/builtins/email";
import * as graphql from "./internal/builtins/graphql";
import * as mongodb from "./internal/builtins/mongodb";
import * as rest from "./internal/builtins/rest";
import * as slack from "./internal/builtins/slack";
import * as sql from "./internal/builtins/sql";
import { task, view, workflow } from "./internal/config";
import * as display from "./internal/display";
import { execute, executeBackground, executeBackgroundWithCacheInfo, executeRunbook, executeRunbookBackground } from "./internal/execute";
import * as file from "./internal/file";
import { AirplaneFile } from "./internal/file";
import { appendOutput, setOutput } from "./internal/output";
export { PromptCancelledError, RunTerminationError, SessionTerminationError, } from "./internal/errors";
export { AirplaneFile, appendOutput, execute, executeBackground, executeBackgroundWithCacheInfo, executeRunbook, executeRunbookBackground, setOutput, task, view, workflow, };
declare const _default: {
    appendOutput: (value: unknown, ...path: (string | number)[]) => void;
    setOutput: (value: unknown, ...path: (string | number)[]) => void;
    execute: <Output = unknown>(slug: string, paramValues?: api.ParamValues, opts?: api.ClientOptions) => Promise<api.Run<import("./internal/params/params_serialized").SerializedParamValues, Output>>;
    executeBackground: (slug: string, paramValues?: api.ParamValues, opts?: api.ClientOptions) => Promise<string>;
    executeBackgroundWithCacheInfo: (slug: string, paramValues?: api.ParamValues, opts?: api.ClientOptions) => Promise<import("./internal/api/types").ExecuteBackgroundResponse>;
    executeRunbook: (slug: string, paramValues?: api.ParamValues, opts?: api.ClientOptions) => Promise<api.Session<import("./internal/params/params_serialized").SerializedParamValues>>;
    executeRunbookBackground: (slug: string, paramValues?: api.ParamValues, opts?: api.ClientOptions) => Promise<string>;
    api: typeof api;
    ai: typeof ai;
    email: typeof email;
    graphql: typeof graphql;
    mongodb: typeof mongodb;
    rest: typeof rest;
    slack: typeof slack;
    sql: typeof sql;
    prompt: {
        <TParams extends import("./internal/params/params_input").PromptInputParams>(params: TParams, opts?: import("./internal/prompt/options").BasePromptOptions): Promise<import("./internal/type_helpers").Resolve<import("./internal/params/params_input").InputToOutputParamValues<TParams>>>;
        text: (name: string, opts?: import("./internal/prompt").PromptOptions<string>) => Promise<string>;
        longText: (name: string, opts?: import("./internal/prompt").PromptOptions<string>) => Promise<string>;
        sql: (name: string, opts?: import("./internal/prompt").PromptOptions<string>) => Promise<string>;
        number: (name: string, opts?: import("./internal/prompt").PromptOptions<number>) => Promise<number>;
        integer: (name: string, opts?: import("./internal/prompt").PromptOptions<number>) => Promise<number>;
        boolean: (name: string, opts?: import("./internal/prompt").PromptOptions<boolean>) => Promise<boolean>;
        date: (name: string, opts?: import("./internal/prompt").PromptOptions<string | Date>) => Promise<Date>;
        datetime: (name: string, opts?: import("./internal/prompt").PromptOptions<string | Date>) => Promise<Date>;
        confirm: (opts?: import("./internal/prompt/options").BasePromptOptions) => Promise<void>;
        select: <TOption = unknown>(name: string, options: readonly TOption[], opts?: import("./internal/prompt/options").BasePromptOptions & {
            slug?: string | undefined;
            required?: boolean | undefined;
            default?: TOption | undefined;
            multi?: boolean | undefined;
            regex?: RegExp | undefined;
            options?: (TOption | import("./internal/params/params").SelectOption<TOption>)[] | undefined;
        } & {
            optionToLabel?: ((option: TOption) => string) | undefined;
        }) => Promise<TOption>;
        background: <TParams_1 extends import("./internal/params/params_input").PromptInputParams>(params: TParams_1, opts?: import("./internal/prompt/options").BasePromptOptions) => Promise<import("./internal/prompt").Prompt<TParams_1>>;
    };
    task: <TParams_2 extends import("./internal/params/params_input").InputParams, TOutput>(config: import("./internal/config").TaskConfig<TParams_2>, f: import("./internal/config").RunFunc<import("./internal/params/params_input").InputToOutputParamValues<import("./internal/params/params_input").InputParams extends TParams_2 ? Record<string, never> : TParams_2>, TOutput>) => import("./internal/config").WrappedRunFunc<import("./internal/params/params_input").InputParams extends TParams_2 ? Record<string, never> : TParams_2, TOutput>;
    view: (config: import("./internal/config").ViewConfig, view: import("./internal/config").View) => import("./internal/config").View;
    workflow: <TParams_3 extends import("./internal/params/params_input").InputParams, TOutput_1>(config: import("./internal/config").TaskConfig<TParams_3>, f: import("./internal/config").RunFunc<import("./internal/params/params_input").InputToOutputParamValues<import("./internal/params/params_input").InputParams extends TParams_3 ? Record<string, never> : TParams_3>, TOutput_1>) => import("./internal/config").WrappedRunFunc<import("./internal/params/params_input").InputParams extends TParams_3 ? Record<string, never> : TParams_3, TOutput_1>;
    sleep: (duration: import("ms").StringValue) => Promise<void>;
    display: typeof display;
    file: typeof file;
    auth: typeof auth;
};
export default _default;
