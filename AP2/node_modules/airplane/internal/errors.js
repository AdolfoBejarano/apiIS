"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionTerminationError = exports.PromptCancelledError = exports.RequestRejectionError = exports.RunTerminationError = exports.TASK_MUST_BE_REQUESTED_ERROR_CODE = void 0;
exports.TASK_MUST_BE_REQUESTED_ERROR_CODE = "task_must_be_requested";
class RunTerminationError extends Error {
    constructor(run, slug) {
        let message = getRunErrorMessage(run);
        if (!message) {
            message = slug
                ? `Run for task "${slug}" ${run.status.toLowerCase()}`
                : `Run ${run.status.toLowerCase()}`;
        }
        super(message);
        this.run = run;
        this.slug = slug;
        this.name = "RunTerminationError";
        Object.setPrototypeOf(this, RunTerminationError.prototype);
    }
}
exports.RunTerminationError = RunTerminationError;
class RequestRejectionError extends Error {
    constructor() {
        super(`Request rejected`);
        this.name = "RequestRejectionError";
        Object.setPrototypeOf(this, RequestRejectionError.prototype);
    }
}
exports.RequestRejectionError = RequestRejectionError;
class PromptCancelledError extends Error {
    constructor() {
        super(`Prompt cancelled`);
        this.name = "PromptCancelledError";
        Object.setPrototypeOf(this, PromptCancelledError.prototype);
    }
}
exports.PromptCancelledError = PromptCancelledError;
class SessionTerminationError extends Error {
    constructor(session) {
        super(`Session ${session.status.toLowerCase()}`);
        this.session = session;
        this.name = "SessionTerminationError";
        Object.setPrototypeOf(this, SessionTerminationError.prototype);
    }
}
exports.SessionTerminationError = SessionTerminationError;
// getRunErrorMessage extracts an error message from a run's output, if any.
const getRunErrorMessage = (run) => {
    if (!run.output || typeof run.output !== "object") {
        return undefined;
    }
    if (!("error" in run.output)) {
        return undefined;
    }
    const output = run.output;
    if (typeof output["error"] !== "string") {
        return undefined;
    }
    return output["error"];
};
