import { PromptReviewers } from "../api/types";
import { SelectOption } from "../params/params";
import { InputParamValueByType } from "../params/params_input";
import { SerializedParam } from "../params/params_serialized";
export type BasePromptOptions = {
    /**
     * Reviewers that are allowed to approve the prompt. If no reviewers are provided, anyone that can see the
     * active run is allowed to approved.
     */
    reviewers?: PromptReviewers;
    /** Text of the confirmation button on the prompt dialog. */
    confirmText?: string;
    /** Text of the cancellation button on the prompt dialog. */
    cancelText?: string;
    /** Prompt description to display. Supports markdown.  */
    description?: string;
    /** Whether to notify reviewers when the prompt is ready for review. Defaults to true. */
    notify?: boolean;
};
export type PromptOptions<T> = BasePromptOptions & {
    slug?: string;
    required?: boolean;
    default?: T;
    multi?: boolean;
    regex?: RegExp;
    options?: Array<T | SelectOption<T>>;
};
export declare const optionsToSchema: <T extends "boolean" | "shorttext" | "longtext" | "sql" | "upload" | "integer" | "float" | "date" | "datetime" | "configvar" | "json">(name: string, type: T, opts: PromptOptions<InputParamValueByType[T]>) => SerializedParam;
