"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.distinct = exports.countDocuments = exports.aggregate = exports.deleteMany = exports.deleteOne = exports.updateMany = exports.updateOne = exports.insertMany = exports.insertOne = exports.findOneAndReplace = exports.findOneAndUpdate = exports.findOneAndDelete = exports.findOne = exports.find = void 0;
const builtins_1 = require("./builtins");
const execute_1 = require("../execute");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const find = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, skip, limit, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_find", { collection, filter, projection, sort, skip, limit }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.find = find;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const findOne = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_findOne", { collection, filter, projection, sort }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.findOne = findOne;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const findOneAndDelete = async (mongodbResource, collection, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_findOneAndDelete", { collection, filter, projection, sort }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.findOneAndDelete = findOneAndDelete;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const findOneAndUpdate = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, projection, sort, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_findOneAndUpdate", { collection, update, filter, projection, sort }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.findOneAndUpdate = findOneAndUpdate;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const findOneAndReplace = async (mongodbResource, collection, replacement, opts = {}) => {
    const { filter, projection, sort, upsert, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_findOneAndReplace", { collection, replacement, filter, projection, sort, upsert }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.findOneAndReplace = findOneAndReplace;
const insertOne = async (mongodbResource, collection, document, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_insertOne", { collection, document }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.insertOne = insertOne;
const insertMany = async (mongodbResource, collection, documents, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_insertMany", { collection, documents }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.insertMany = insertMany;
const updateOne = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, upsert, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_updateOne", { collection, update, filter, upsert }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.updateOne = updateOne;
const updateMany = async (mongodbResource, collection, update, opts = {}) => {
    const { filter, upsert, client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_updateMany", { collection, update, filter, upsert }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.updateMany = updateMany;
const deleteOne = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_deleteOne", { collection, filter }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.deleteOne = deleteOne;
const deleteMany = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_deleteMany", { collection, filter }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.deleteMany = deleteMany;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const aggregate = async (mongodbResource, collection, pipeline, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_aggregate", { collection, pipeline }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.aggregate = aggregate;
const countDocuments = async (mongodbResource, collection, filter, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_countDocuments", { collection, filter }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.countDocuments = countDocuments;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const distinct = async (mongodbResource, collection, field, filter, opts = {}) => {
    const { client } = opts;
    return (0, execute_1.executeWithResources)("airplane:mongodb_distinct", { collection, field, filter }, { db: (0, builtins_1.convertResourceAliasToID)(mongodbResource) }, client);
};
exports.distinct = distinct;
