import { runtime as devRuntime } from "./dev";
import { runtime as standardRuntime } from "./standard";
const runtimeMap = {
    standard: standardRuntime,
    dev: devRuntime,
};
// registerRuntime registers a new runtime with a given kind.
//
// It returns a function that can be called, if necessary, to unregister the runtime.
export const registerRuntime = (kind, runtime) => {
    if (kind in runtimeMap) {
        throw new Error(`A runtime for "${kind}" has already been registered.`);
    }
    runtimeMap[kind] = runtime;
    return () => {
        delete runtimeMap[kind];
    };
};
export const getRuntime = () => {
    var _a;
    const kindStr = (_a = globalThis.process) === null || _a === void 0 ? void 0 : _a.env.AIRPLANE_RUNTIME;
    if (kindStr != null) {
        const runtime = runtimeMap[kindStr];
        if (runtime != null) {
            return runtime;
        }
    }
    return standardRuntime;
};
