import { Block, KnownBlock, MessageAttachment } from "@slack/types";
import { BuiltInParamValues } from "./builtins";
import { ClientOptions } from "../api/client";
import { BuiltInRun } from "../api/types";
import { AirplaneFile } from "../file/file";
/**
 * The options for sending a Slack message.
 *
 * This includes the same options as the Slack API's `chat.postMessage` method.
 */
type MessageOption = {
    attachments?: MessageAttachment[];
    text?: string;
    blocks?: (KnownBlock | Block)[];
    mrkdown?: boolean;
    parse?: "full" | "none";
    reply_broadcast?: boolean;
    thread_ts?: string;
    unfurl_links?: boolean;
    unfurl_media?: boolean;
};
/**
 * Sends a message to a Slack channel.
 * @param channelName The Slack channel to send a message to. This can be a channel name (e.g. `#general`), a channel
 * ID (e.g. `C1234567890`), or a user ID (e.g. `U1234567890`).
 * @param message The message to send. This can be a string, or a Slack message option object. The Slack message option
 * object includes the same options as the Slack API's `chat.postMessage` method.
 */
export declare const message: (channelName: string, message: string | MessageOption, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, void>>;
type UploadOption = {
    /** Payload to upload to Slack. Can be a string, bytes, or an Airplane file. */
    payload: Blob | AirplaneFile | string;
    /** Name of the upload. This is used to determine the file type of the upload. */
    filename: string;
    /** Optional message to send with the upload. */
    message?: string;
};
/**
 * Uploads a file to a Slack channel.
 * @param channelName The Slack channel to send a message to. This can be a channel name (e.g. `#general`), a channel
 * ID (e.g. `C1234567890`), or a user ID (e.g. `U1234567890`).
 * @param uploadOption The options to use when uploading the file.
 */
export declare const upload: (channelName: string, uploadOption: UploadOption, opts?: {
    client?: ClientOptions;
}) => Promise<BuiltInRun<BuiltInParamValues, void>>;
export {};
