import humanizeString from "humanize-string";
import { dedent } from "ts-dedent";
import { execute } from "./execute";
import { deserializeParamValues } from "./params/params_output";
import { VERSION } from "./version";
/**
 * Airplane Tasks are functions that anyone on your team can execute via a simple Airplane-generated UI.
 *
 * A call to this method will declare a new task and register a function to call
 * whenever this task is executed. You can configure
 * [parameters](https://docs.airplane.dev/platform/parameters) for your task and the values will
 * be passed as the first argument to your function. Your function can return
 * [output](https://docs.airplane.dev/tasks/output) that will be rendered in the Airplane UI.
 *
 * If the function throws an error, that error will be automatically caught and serialized as
 * an error output.
 *
 * This method returns a wrapped version of your task's function. This can be called from
 * within other tasks to trigger an execution of your task. It will return the execution's
 * output. To learn more, see [executing other tasks](https://docs.airplane.dev/workflows/js-tasks).
 * @param config The configuration for this task, including its parameters.
 * @param f The function to execute whenever this task is executed.
 * @returns A function that can be called to execute this task.
 */
export const task = (config, f) => {
    const wrappedF = async (paramValues, executeOptions) => {
        const run = await execute(config.slug, paramValues, executeOptions);
        return run;
    };
    const baseFunc = getBaseFunc(f, config.parameters);
    wrappedF.__airplane = {
        type: config.runtime === "workflow" ? "workflow" : "task",
        config: {
            ...normalizeConfig(config),
            sdkVersion: VERSION,
        },
        baseFunc,
    };
    return wrappedF;
};
/**
 * Airplane Workflows are currently in beta. To learn more, see
 * [the Workflow documentation](https://docs.airplane.dev/workflows/overview).
 * @deprecated since v0.2.23, use `task()` instead and set `runtime: "workflow"`
 * @param config The configuration for this workflow, including its parameters.
 * @param f The function to execute whenever this workflow is executed.
 * @returns A function that can be called to execute this workflow.
 */
export const workflow = (config, f) => {
    const wrappedF = async (paramValues, executeOptions) => {
        const run = await execute(config.slug, paramValues, executeOptions);
        return run;
    };
    const baseFunc = getBaseFunc(f, config.parameters);
    wrappedF.__airplane = {
        type: "workflow",
        config: {
            ...normalizeConfig(config),
            sdkVersion: VERSION,
        },
        baseFunc,
    };
    return wrappedF;
};
/**
 * getBaseFunc gets the function that is executed by the node shim when the task is run.
 * This is a small shim around the task code itself, doing some small conversions
 * e.g. from wire format -> user format.
 * @param f The task function.
 * @param params The parameters in serialized format.
 * @returns A function that can be executed to run the task.
 */
const getBaseFunc = (f, params) => {
    return (paramValues) => {
        const paramValuesDeserialized = deserializeParamValues(params, paramValues);
        return f(paramValuesDeserialized);
    };
};
/**
 * Airplane Views make it incredibly easy to build UIs that you and your teammates can use.
 *
 * To learn more, see the [Getting started with Views guide](https://docs.airplane.dev/views/getting-started).
 * @param config The configuration for this view.
 * @param view The React component to render whenever this view is opened.
 * @returns A representation of the view.
 */
export const view = (config, view) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    view.__airplane = {
        type: "view",
        config: {
            ...config,
            description: config.description ? dedent(config.description) : undefined,
            name: config.name ? config.name : humanizeString(config.slug),
        },
    };
    return view;
};
/**
 * @returns a task config with all descriptions dedented.
 */
const normalizeConfig = (config) => {
    // Dedent the parameter descriptions of each parameter:
    const parameters = config.parameters
        ? Object.fromEntries(Object.entries(config.parameters).map(([slug, param]) => {
            if (typeof param === "string") {
                return [slug, { type: param, name: humanizeString(slug) }];
            }
            return [
                slug,
                {
                    ...param,
                    description: param.description ? dedent(param.description) : undefined,
                    name: param.name ? param.name : humanizeString(slug),
                },
            ];
        }))
        : undefined;
    return {
        ...config,
        description: config.description ? dedent(config.description) : undefined,
        parameters,
        name: config.name ? config.name : humanizeString(config.slug),
    };
};
