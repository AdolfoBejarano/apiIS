import dedent from "ts-dedent";
import { toISOString } from "../date";
import { AirplaneFile } from "../file";
export const serializeParamValues = (paramValues) => {
    const newParamEntries = Object.entries(paramValues !== null && paramValues !== void 0 ? paramValues : {}).map(([key, val]) => {
        return [key, serializeParamValue(val)];
    });
    return Object.fromEntries(newParamEntries);
};
export const serializeParamValue = (paramValue, multi) => {
    if (multi) {
        if (paramValue == null) {
            return paramValue;
        }
        return paramValue.map(serializeParamValueSingle);
    }
    return serializeParamValueSingle(paramValue);
};
export const serializeParamValueSingle = (paramValue) => {
    if (paramValue instanceof AirplaneFile) {
        return paramValue.id;
    }
    if (paramValue instanceof Date) {
        return toISOString(paramValue);
    }
    return paramValue;
};
const serializeParamType = (t) => {
    switch (t) {
        case "shorttext":
            return ["string", undefined];
        case "longtext":
            return ["string", "textarea"];
        case "sql":
            return ["string", "editor-sql"];
        default:
            return [t, undefined];
    }
};
export const serializeParams = (params) => {
    const serializedParams = [];
    for (const slug in params) {
        const p = params[slug];
        const param = typeof p === "string"
            ? {
                type: p,
                required: true,
                name: undefined,
                description: undefined,
                default: undefined,
                multi: undefined,
            }
            : p;
        const [type, component] = serializeParamType(param.type);
        const regex = "regex" in param ? param.regex : undefined;
        const optional = param.required === false ? true : false;
        serializedParams.push({
            slug: slug,
            // TODO: add a slug -> name conversion, e.g. my_param -> My Param
            name: param.name ? param.name : slug,
            type: type,
            component: component,
            desc: param.description && dedent(param.description),
            default: serializeParamValue(param.default, param.multi),
            multi: param.multi,
            constraints: {
                optional: optional,
                options: "options" in param && param.options != null
                    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        serializeOptions(param.options, slug, optional)
                    : undefined,
                regex,
            },
        });
    }
    return serializedParams;
};
const isOptionObject = (opt) => {
    return typeof opt === "object" && opt != null && "value" in opt;
};
const serializeOptions = (options, slug, optional) => {
    if (options.length === 0 && !optional) {
        throw new Error(`The required parameter, "${slug}", has no options to select from.`);
    }
    const optionToLabel = (option) => {
        if (isOptionObject(option) && option.label != null) {
            return option.label;
        }
        switch (typeof option) {
            case "bigint":
            case "boolean":
            case "number":
                return String(option);
            case "string":
                return option;
        }
        if (option instanceof Date) {
            return toISOString(option);
        }
        return JSON.stringify(option);
    };
    return options.map((option) => ({
        label: optionToLabel(option),
        value: serializeParamValueSingle(isOptionObject(option) ? option.value : option),
    }));
};
