import { RunTerminationError, SessionTerminationError } from "./errors";
import { serializeParamValues } from "./params/params_serialized";
import { getRuntime } from "./runtime";
export const execute = async (slug, paramValues = {}, opts = {}) => {
    const run = await executeWithResources(slug, paramValues, {}, opts);
    if (!run.taskID) {
        // `execute` is intended for executing tasks, not built-ins.
        // This is a sanity check before we cast to a `TaskRun` type that includes a taskID.
        throw new Error(`Run does not have a taskID`);
    }
    return run;
};
export const executeBackground = async (slug, paramValues = {}, opts = {}) => {
    return executeWithResourcesBackground(slug, paramValues, {}, opts);
};
export const executeBackgroundWithCacheInfo = async (slug, paramValues = {}, opts = {}) => {
    return executeWithResourcesBackgroundWithCacheInfo(slug, paramValues, {}, opts);
};
export const executeWithResources = async (slug, paramValues = {}, resources, opts = {}) => {
    const run = await getRuntime().execute(slug, serializeParamValues(paramValues), resources, opts);
    if (run.status === "Failed" || run.status === "Cancelled") {
        throw new RunTerminationError(run, slug);
    }
    return run;
};
export const executeWithResourcesBackground = async (slug, paramValues = {}, resources, opts = {}) => {
    return getRuntime().executeBackground(slug, serializeParamValues(paramValues), resources, opts);
};
export const executeWithResourcesBackgroundWithCacheInfo = async (slug, paramValues = {}, resources, opts = {}) => {
    return getRuntime().executeBackgroundWithCacheInfo(slug, serializeParamValues(paramValues), resources, opts);
};
export const executeRunbook = async (slug, paramValues = {}, opts = {}) => {
    const session = await getRuntime().executeRunbook(slug, serializeParamValues(paramValues), opts);
    if (session.status === "Failed" || session.status === "Cancelled") {
        throw new SessionTerminationError(session);
    }
    return session;
};
export const executeRunbookBackground = async (slug, paramValues = {}, opts = {}) => {
    return getRuntime().executeRunbookBackground(slug, serializeParamValues(paramValues), opts);
};
